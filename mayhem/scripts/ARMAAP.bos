#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  base, pad, beam1, beam2, building1, building2, nanobox1, nanobox2,
       nano2, nano1, lights, radar;

static-var  Nano_1, ReqState_3, On_4, Busy_5;
//static-var  Nano_1, Demo_2, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			Func_Var_4 = Rand(1,3);
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from building1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from building2;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from pad;
			}
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
//	set BUGGER_OFF to 1;
	while( !Busy_5 AND ReqState_3 != On_4 )
	{
		Busy_5 = 1;
		if( ReqState_3 and !On_4 )
		{
//			set BUGGER_OFF to 1;
			dont-cache beam1;
			dont-cache beam2;
			dont-cache building1;
			dont-cache building2;
			dont-cache nano1;
			dont-cache nano2;
			dont-cache nanobox1;
			dont-cache nanobox2;
			dont-cache pad;
			move building1 to x-axis [0] now;
			move building1 to x-axis [7.80] speed [15.18];
			move building2 to x-axis [0] now;
			move building2 to x-axis [-7.85] speed [15.27];
//			sleep 514;
			move nanobox1 to x-axis [7.70] speed [14.86];
			move nanobox2 to x-axis [-7.75] speed [14.96];
//			sleep 518;
			move nano2 to z-axis [4] speed [7.71];
			move nano1 to z-axis [3.55] speed [6.84];
			sleep 545;
//			sleep 26;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
//				set BUGGER_OFF to 1;
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30>;
//			set BUGGER_OFF to 0;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 and On_4 )
		{
			On_4 = 0;
//			set BUGGER_OFF to 1;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
//				set BUGGER_OFF to 1;
				sleep 1500;
				set YARD_OPEN to 0;
			}
//			set BUGGER_OFF to 0;
			spin pad around y-axis speed <0>;
			move nanobox1 to x-axis [7.70] now;
			move nanobox2 to x-axis [-7.75] now;
			move building1 to x-axis [7.80] now;
			move building2 to x-axis [-7.85] now;
			move nano2 to z-axis [4] now;
			move nano2 to z-axis [0] speed [7.78];
			move nano1 to z-axis [3.55] now;
			move nano1 to z-axis [0] speed [6.91];
//			sleep 514;
			move nanobox1 to x-axis [0] speed [14.86];
			move nanobox2 to x-axis [0] speed [14.96];
//			sleep 518;
			move building1 to x-axis [0] speed [15];
			move building2 to x-axis [0] speed [15.13];
			sleep 545;
//			sleep 26;
			cache beam1;
			cache beam2;
			cache building1;
			cache building2;
			cache nano1;
			cache nano2;
			cache nanobox1;
			cache nanobox2;
			cache pad;
		}
		Busy_5 = 0;
	}
//	set BUGGER_OFF to 0;
	return (0);
}

/*
Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}
*/	

Create()
{
	dont-cache lights;
	dont-shade lights;
	dont-cache radar;
	dont-shade radar;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade building1;
	dont-shade building2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade nanobox1;
	dont-shade nanobox2;
	dont-shade pad;
	Nano_1 = 0;
//	Demo_2 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	spin radar around y-axis speed <150>;
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 5000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode building1 type BITMAPONLY | BITMAP2;
		explode building2 type BITMAPONLY | BITMAP3;
		explode lights type SHATTER | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP5;
		explode nano2 type BITMAPONLY | BITMAP1;
		explode nanobox1 type BITMAPONLY | BITMAP2;
		explode nanobox2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode radar type BITMAPONLY | BITMAP5;
		explode beam1 type BITMAPONLY | BITMAP1;
		explode beam2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode building1 type BITMAPONLY | BITMAP2;
		explode building2 type BITMAPONLY | BITMAP3;
		explode lights type SHATTER | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP5;
		explode nano2 type BITMAPONLY | BITMAP1;
		explode nanobox1 type BITMAPONLY | BITMAP2;
		explode nanobox2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode radar type BITMAPONLY | BITMAP5;
		explode beam1 type BITMAPONLY | BITMAP1;
		explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
//	if( severity <= 99 )
//	{
//		explode base type BITMAPONLY | BITMAP1;
//		explode building1 type BITMAPONLY | BITMAP2;
//		explode building2 type BITMAPONLY | BITMAP3;
//		explode lights type SHATTER | BITMAP4;
//		explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
//		explode nano2 type BITMAPONLY | BITMAP1;
//		explode nanobox1 type BITMAPONLY | BITMAP2;
//		explode nanobox2 type BITMAPONLY | BITMAP3;
//		explode pad type BITMAPONLY | BITMAP4;
//		explode radar type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
//		explode beam1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
//		explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
//		return (0);
//	}
	explode base type BITMAPONLY | BITMAP1;
	explode building1 type BITMAPONLY | BITMAP2;
	explode building2 type BITMAPONLY | BITMAP3;
	explode lights type SHATTER | BITMAP4;
	explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode nano2 type BITMAPONLY | BITMAP1;
	explode nanobox1 type BITMAPONLY | BITMAP2;
	explode nanobox2 type BITMAPONLY | BITMAP3;
	explode pad type BITMAPONLY | BITMAP4;
	explode radar type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode beam1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}