#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, emit1a, emit1b, emit1c, emit1d, emit2a, emit2b,
       emit2c, emit2d, base, missilebox1, missilebox2, turretgun1, turretgun2, wake1,
       wake2, gunbarrel1, gunbarrel2, platform;

static-var  gun_1, gun_3, bAiming, Static_Var_4;

RestoreAfterDelay()
{
	sleep 5000;
	if( !bAiming )
	{
		turn turretgun1 to y-axis <0> speed <75>;
		turn turretgun2 to x-axis <0> speed <75>;
		turn missilebox1 to y-axis <0> speed <75>;
		turn missilebox1 to x-axis <0> speed <75>;
		turn missilebox2 to y-axis <0> speed <75>;
		turn missilebox2 to x-axis <0> speed <75>;
		signal 2;
		signal 4;
		signal 16;
	}
	Static_Var_4 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( bAiming AND ( !Static_Var_4 ) )
		{
			bAiming = FALSE;
			Static_Var_4 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

/*
NanoFrameInit()
{
	hide flare1;
	hide flare2;
}

Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}
*/	

Create()
{
	hide flare1;
	hide flare2;
	gun_1 = 0;
	gun_3 = flare1;
	bAiming = FALSE;
	Static_Var_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	return (0);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	bAiming = TRUE;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 16;
	set-signal-mask 0;
	set-signal-mask 16;
	turn turretgun1 to y-axis heading speed <755>;
	turn turretgun2 to x-axis <0> - pitch speed <730>;
	wait-for-move gunbarrel1 along z-axis;
	wait-for-move gunbarrel2 along z-axis;
	wait-for-turn turretgun1 around y-axis;
	wait-for-turn turretgun2 around x-axis;
	bAiming = TRUE;
	return (1);
}

FireTertiary()
{
	if( !gun_3 )
	{
		show flare1;
		move gunbarrel1 to z-axis [-2.4] speed [500];
		sleep 150;
		move gunbarrel1 to z-axis [0] speed [4];
		hide flare1;
	}
	if( gun_3 )
	{
		show flare2;
		move gunbarrel2 to z-axis [-2.4] speed [500];
		sleep 150;
		move gunbarrel2 to z-axis [0] speed [4];
		hide flare2;
	}
	gun_3 = !gun_3;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	if( ( gun_1 == 0 ) OR ( gun_1 == 2 ) OR ( gun_1 == 4 ) or ( gun_1 == 6 ) )
	{
		turn missilebox1 to y-axis heading speed <420>;
		turn missilebox1 to x-axis <0> - pitch speed <270>;
		wait-for-turn missilebox1 around y-axis;
		wait-for-turn missilebox1 around x-axis;
	}
	if( ( gun_1 == 1 ) OR ( gun_1 == 3 ) OR ( gun_1 == 5 ) or ( gun_1 == 7 ) )
	{
		turn missilebox2 to y-axis heading speed <420>;
		turn missilebox2 to x-axis <0> - pitch speed <270>;
		wait-for-turn missilebox2 around y-axis;
		wait-for-turn missilebox2 around x-axis;
	}
	bAiming = TRUE;
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 > 6 )
	{
		gun_1 = 0;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	if( ( gun_1 == 0 ) OR ( gun_1 == 2 ) OR ( gun_1 == 4 ) or ( gun_1 == 6 ) )
	{
		piecenum = missilebox1;
	}
	if( ( gun_1 == 1 ) OR ( gun_1 == 3 ) OR ( gun_1 == 5 ) or ( gun_1 == 7 ) )
	{
		piecenum = missilebox2;
	}
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = turretgun1;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = emit1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = emit2a;
	}
	if( gun_1 == 2 )
	{
		piecenum = emit1b;
	}
	if( gun_1 == 3 )
	{
		piecenum = emit2b;
	}
	if( gun_1 == 4 )
	{
		piecenum = emit1c;
	}
	if( gun_1 == 5 )
	{
		piecenum = emit2c;
	}
	if( gun_1 == 6 )
	{
		piecenum = emit1d;
	}
	if( gun_1 > 6 )
	{
		piecenum = emit2d;
	}
	return (0);
}

QuerySecondary(piecenum)
{
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = gun_3;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = platform;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	explode base type BITMAPONLY | BITMAP1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	return (0);
}
