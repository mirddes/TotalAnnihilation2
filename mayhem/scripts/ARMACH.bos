#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  GP, base, beam, nanogun, door1, door2, plate, post, wake1,
       wake2, wake3, wake4, wake5, wake6, wake7, wake8, turret;

static-var  terrain_1, heading_2, request_3, busy_4, curstate_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 250 )
		{
			sleeptime = 250;
		}
		sleep sleeptime;
	}
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	//moving = 1;
	while( TRUE )
	{
		count = 0;
		if( terrain_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <44>;
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	terrain_1 = Func_Var_1;
}

RequestState(sleeptime)
{
	while( ( !busy_4 ) AND ( request_3 != curstate_5 ) )
	{
		busy_4 = 1;
		if( request_3 )
		{
			turn door1 to z-axis <0> now;
			turn door1 to z-axis <-67> speed <99>;
			turn door2 to z-axis <0> now;
			turn door2 to z-axis <67> speed <99>;
			move door1 to y-axis [-2] speed [2];
			move door2 to y-axis [-2] speed [2];
			move plate to y-axis [4] speed [5];
			sleep 688;
			turn post to x-axis <90> speed <131>;
			turn nanogun to x-axis <-90> speed <131>;
			turn turret to y-axis heading_2 speed <160>;
			sleep 600;
			wait-for-turn turret around y-axis;
			sleeptime = Rand(1,500);
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			curstate_5 = 1;
		}
		if( !request_3 )
		{
			curstate_5 = 0;
			set INBUILDSTANCE to 0;
			turn turret to y-axis <0> speed <160>;
			move door1 to y-axis [-2] now;
			move door2 to y-axis [-2] now;
			move plate to y-axis [4] now;
			turn door1 to z-axis <-67> now;
			turn door2 to z-axis <67> now;
			turn post to x-axis <90> now;
			turn post to x-axis <0> speed <197>;
			turn nanogun to x-axis <-90> now;
			turn nanogun to x-axis <0> speed <197>;
			sleep 457;
			wait-for-turn turret around y-axis;
			move door1 to y-axis [0] speed [4];
			move door2 to y-axis [0] speed [4];
			move plate to y-axis [0] speed [8];
			sleep 471;
			turn door1 to z-axis <0> speed <143>;
			turn door2 to z-axis <0> speed <143>;
			sleep 495;
		}
		busy_4 = 0;
	}
}

Create()
{
	heading_2 = 0;
	request_3 = 0;
	busy_4 = 0;
	curstate_5 = 0;
	//moving=0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
	}
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	heading_2 = Func_Var_1;
	request_3 = 1;
	start-script RequestState();
	return (0);
}

StopBuilding()
{
	request_3 = 0;
	sleep 5000;
	if( !request_3 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	heading_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = plate;
}

Killed(severity, corpsetype)
{
	if( terrain_1 >= 4 AND ( severity <= 25 ))
	{
		corpsetype = 1;
		explode post type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode post type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nanogun type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP2;
}
