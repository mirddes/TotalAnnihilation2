#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rnanospray, lnanospray, torso, pelvis, lleg, lfoot, rleg, rfoot,
       rthigh, lthigh, guncase, nanojoint, nanoarm, lnanogun, rnanogun, ground;

static-var  Turret_1, Moving_2, Request_3, Gun_4, Busy_5, Waiting_6, State_7; //buildingid, buildingpos, buildingtype, buildingcrc;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Smokepiece;
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			Smokepiece = Rand(1,2);
			if( Smokepiece == 1 )
			{
				emit-sfx smoketype from lnanogun;
			}
			if( Smokepiece == 2 )
			{
				emit-sfx smoketype from rnanogun;
			}
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;

		if( !Busy_5 )
		{
			Waiting_6 = 0;
		}
		if( Busy_5 )
		{
			Waiting_6 = Waiting_6 + sleeptime ;
			if( Waiting_6 > 11000 )
			{
				Busy_5 = 0;
				Waiting_6 = 0;
			}
		}
	}
	return (0);
}

MotionControl(JustMoved)
{
	while( TRUE )
	{
		while( Moving_2 )
//		if( Aiming_3 and Moving_2 )
		{
			JustMoved = 1;
			move pelvis to y-axis [1.20] speed [100];
			move lleg to y-axis [0] speed [100];
			move lfoot to z-axis [0] speed [100];
			move rleg to y-axis [0] speed [100];
			move rfoot to z-axis [0] speed [100];
			turn rthigh to x-axis <49.93> speed <300>;
			turn lthigh to x-axis <-36.57> speed <300>;
			turn lleg to x-axis <43.24> speed <300>;
			turn lfoot to x-axis <-6.32> speed <300>;
			turn rfoot to x-axis <-18.63> speed <300>;
			sleep 120;
			move pelvis to y-axis [1.10] speed [100];
			turn rthigh to x-axis <31.64> speed <300>;
			turn lthigh to x-axis <-29.18> speed <300>;
			turn lleg to x-axis <38.68> speed <300>;
			turn lfoot to x-axis <-10.18> speed <300>;
			turn rleg to x-axis <-18.63> speed <300>;
			turn rfoot to x-axis <10.54> speed <300>;
			sleep 80;
			if( Moving_2 )
			{
				move pelvis to y-axis [0.90] speed [100];
				turn rthigh to x-axis <19.32> speed <300>;
				turn lthigh to x-axis <-22.14> speed <300>;
				turn lleg to x-axis <32.35> speed <300>;
				turn rleg to x-axis <-31.29> speed <300>;
				turn rfoot to x-axis <30.24> speed <300>;
				sleep 70;
				move pelvis to y-axis [0.80] speed [100];
				turn rthigh to x-axis <9.14> speed <300>;
				turn lthigh to x-axis <-8.77> speed <300>;
				turn lleg to x-axis <34.80> speed <300>;
				turn lfoot to x-axis <-24.60> speed <300>;
				turn rleg to x-axis <-31.64> speed <300>;
				turn rfoot to x-axis <40.08> speed <300>;
				sleep 60;
				move pelvis to y-axis [0.75] speed [100];
				turn rthigh to x-axis <-7.38> speed <300>;
				turn lthigh to x-axis <-6.67> speed <300>;
				turn lleg to x-axis <45.71> speed <300>;
				turn lfoot to x-axis <-39.02> speed <300>;
				turn rleg to x-axis <-31.29> speed <300>;
				turn rfoot to x-axis <47.11> speed <300>;
				sleep 110;
			}
			if( Moving_2 )
			{
				move pelvis to y-axis [0.85] speed [100];
				turn rthigh to x-axis <-17.22> speed <300>;
				turn lthigh to x-axis <4.55> speed <300>;
				turn rfoot to x-axis <57.31> speed <300>;
				sleep 60;
				move pelvis to y-axis [0.90] speed [100];
				turn rthigh to x-axis <-24.60> speed <300>;
				turn lthigh to x-axis <12.65> speed <300>;
				turn lfoot to x-axis <-42.19> speed <300>;
				turn rleg to x-axis <-21.09> speed <300>;
				turn rfoot to x-axis <62.23> speed <300>;
				sleep 60;
				move pelvis to y-axis [1.10] speed [100];
				turn rthigh to x-axis <-37.26> speed <300>;
				turn lthigh to x-axis <33.04> speed <300>;
				turn lleg to x-axis <33.76> speed <300>;
				turn rleg to x-axis <0.70> speed <300>;
				turn rfoot to x-axis <51.68> speed <300>;
				sleep 60;
			}
			if( Moving_2 )
			{
				move pelvis to y-axis [1.20] speed [100];
				turn rthigh to x-axis <-40.79> speed <300>;
				turn lthigh to x-axis <47.47> speed <300>;
				turn lleg to x-axis <19.32> speed <300>;
				turn lfoot to x-axis <-41.14> speed <300>;
				turn rleg to x-axis <36.91> speed <300>;
				turn rfoot to x-axis <3.86> speed <300>;
				sleep 120;
				move pelvis to y-axis [1.10] speed [100];
				turn rthigh to x-axis <-29.18> speed <300>;
				turn lthigh to x-axis <35.86> speed <300>;
				turn lleg to x-axis <4.57> speed <300>;
				turn lfoot to x-axis <-19.68> speed <300>;
				turn rfoot to x-axis <-7.73> speed <300>;
				sleep 80;
			}
			if( Moving_2 )
			{
				move pelvis to y-axis [0.90] speed [100];
				turn rthigh to x-axis <-18.63> speed <300>;
				turn lthigh to x-axis <16.52> speed <300>;
				turn lleg to x-axis <-15.46> speed <300>;
				turn lfoot to x-axis <13.35> speed <300>;
				turn rleg to x-axis <33.40> speed <300>;
				turn rfoot to x-axis <-14.76> speed <300>;
				sleep 70;
				move pelvis to y-axis [0.85] speed [100];
				turn rthigh to x-axis <-10.54> speed <300>;
				turn lthigh to x-axis <4.55> speed <300>;
				turn lleg to x-axis <-23.54> speed <300>;
				turn lfoot to x-axis <36.21> speed <300>;
				turn rfoot to x-axis <-24.25> speed <300>;
				sleep 60;
				move pelvis to y-axis [0.75] speed [100];
				turn rthigh to x-axis <-1.40> speed <300>;
				turn lthigh to x-axis <-4.92> speed <300>;
				turn lleg to x-axis <-37.97> speed <300>;
				turn lfoot to x-axis <66.46> speed <300>;
				turn rleg to x-axis <36.91> speed <300>;
				turn rfoot to x-axis <-34.46> speed <300>;
				sleep 110;
			}
			if( Moving_2 )
			{
				move pelvis to y-axis [0.85] speed [100];
				turn rthigh to x-axis <13.70> speed <300>;
				turn lthigh to x-axis <-23.55> speed <300>;
				turn lleg to x-axis <-14.06> speed <300>;
				turn lfoot to x-axis <56.26> speed <300>;
				turn rleg to x-axis <26.01> speed <300>;
				turn rfoot to x-axis <-27.77> speed <300>;
				sleep 60;
				move pelvis to y-axis [0.90] speed [100];
				turn rthigh to x-axis <22.14> speed <300>;
				turn lthigh to x-axis <-29.18> speed <300>;
				turn lleg to x-axis <-7.37> speed <300>;
				turn lfoot to x-axis <53.09> speed <300>;
				turn rleg to x-axis <17.92> speed <300>;
				turn rfoot to x-axis <-21.45> speed <300>;
				sleep 60;
				move pelvis to y-axis [1.10] speed [100];
				turn rthigh to x-axis <36.91> speed <300>;
				turn lthigh to x-axis <-33.76> speed <300>;
				turn lleg to x-axis <6.67> speed <300>;
				turn lfoot to x-axis <42.90> speed <300>;
				turn rleg to x-axis <8.08> speed <300>;
				turn rfoot to x-axis <-13.71> speed <300>;
				sleep 60;
			}
		}
		if( !Moving_2 )
		{
			if( JustMoved )
			{
				JustMoved = 0;
				move lleg to y-axis [0] speed [100];
				move lfoot to z-axis [0] speed [100];
				move rleg to y-axis [0] speed [100];
				move rfoot to z-axis [0] speed [100];
			}
			sleep 150;
		}
	}
	return (0);
}

RequestState(sleeptime)
{
	if( Busy_5 )
	{
		return(0);
	}
	while( Request_3 != State_7 )
	{
		Busy_5 = 1;
		if( Request_3 )
		{
//			Aiming_3 = 1;
			move lleg to y-axis [0] speed [100];
			move lfoot to z-axis [0] speed [100];
			move rleg to y-axis [0] speed [100];
			move rfoot to z-axis [0] speed [100];
			turn guncase to x-axis <0> now;
			turn guncase to x-axis <-68.02> speed <90>;
			turn nanojoint to x-axis <0> now;
			turn nanojoint to x-axis <-4> speed <5>;
			sleep 750;
//			turn nanoarm to x-axis <-52.01> speed <69>;
//			turn nanojoint to x-axis <43.01> speed <63>;
//			sleep 758;
//			turn nanoarm to x-axis <-87.02> speed <45>;
			turn nanoarm to x-axis <-87.02> speed <69>;
			turn nanojoint to x-axis <157.03> speed <149>;
			sleep 638;
			sleeptime = Rand(1,500);
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			State_7 = 1;
		}
		if( !Request_3 )
		{
			State_7 = 0;
			set INBUILDSTANCE to 0;
			turn torso to y-axis <0> speed <160>;
			move lleg to y-axis [0] speed [100];
			move lfoot to z-axis [0] speed [100];
			move rleg to y-axis [0] speed [100];
			move rfoot to z-axis [0] speed [100];
			turn guncase to x-axis <-68.10> now;
			turn nanoarm to x-axis <-87.55> now;
			turn nanoarm to x-axis <0> speed <116>;
			turn nanojoint to x-axis <157.54> now;
			turn nanojoint to x-axis <0> speed <209>;
			sleep 751;
			turn guncase to x-axis <0> speed <89>;
			sleep 798;
//			Aiming_3 = 0;
		}
		Busy_5 = 0;
	}
	return (0);
}


/*
Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}
*/	

Create()
{
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	var bcheck;
	bcheck = get BUILD_PERCENT_LEFT;*/
	Turret_1 = 0;
	Moving_2 = 0;
	Request_3 = 0;
	State_7 = 0;
	Gun_4 = 0;
	Busy_5 = 0;
	Waiting_6 = 0;
	State_7 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
/*	if (bcheck)
	{
		{
			if (get LOCAL_SHARED_DATA(0,get UNIT_TEAM(get MY_ID)) < 2)
			{
		    	get LOCAL_SHARED_DATA(1,get UNIT_TEAM(get MY_ID),2);
		    }
		}
	}
*/
	start-script SmokeUnit();
	start-script MotionControl();
	return (0);
}

StartBuilding(Func_Var_1)
{
	Turret_1 = Func_Var_1;
	turn torso to y-axis Turret_1 speed <160>;
	Request_3 = 1;
	start-script RequestState();
/*	buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 25)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}
*/
	return (0);
}

StopBuilding()
{
/*	if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - (get GROUND_HEIGHT(get UNIT_XZ(buildingid)) / 131072);
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(25,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}
*/
	Request_3 = 0;
	sleep 5000;
	if( !Request_3 )
	{
		start-script RequestState();
	}
	return (0);
}

StartMoving()
{
	Moving_2 = 1;
	return (0);
}

StopMoving()
{
	Moving_2 = 0;	
	/*if ((get CURRENT_ORDER_TYPE) == 25 AND (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2))
	{
		sleep 1000;
		if (!Moving_5 AND !ReqState_2)
		{
			get ORDER_SELF(45,0);
		}
	}*/
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = Gun_4;
	Gun_4 = ( !Gun_4 );
	return (0);
}

TargetHeading(Func_Var_1)
{
	Turret_1 = ( 0 - Func_Var_1 );
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode guncase type BITMAPONLY | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP3;
		explode lleg type BITMAPONLY | BITMAP4;
		explode lnanogun type BITMAPONLY | BITMAP5;
		explode lnanospray type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode nanoarm type BITMAPONLY | BITMAP3;
		explode nanojoint type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP2;
		explode rnanogun type BITMAPONLY | BITMAP3;
		explode rnanospray type BITMAPONLY | BITMAP4;
		explode rthigh type BITMAPONLY | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type BITMAPONLY | BITMAP1;
		explode guncase type BITMAPONLY | BITMAP2;
		explode lfoot type BITMAPONLY | BITMAP3;
		explode lleg type FALL | BITMAP4;
		explode lnanogun type BITMAPONLY | BITMAP5;
		explode lnanospray type FALL | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP2;
		explode nanoarm type BITMAPONLY | BITMAP3;
		explode nanojoint type SHATTER | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rleg type FALL | BITMAP2;
		explode rnanogun type BITMAPONLY | BITMAP3;
		explode rnanospray type FALL | BITMAP4;
		explode rthigh type BITMAPONLY | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode ground type BITMAPONLY | BITMAP1;
		explode guncase type BITMAPONLY | BITMAP2;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lnanogun type BITMAPONLY | BITMAP5;
		explode lnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nanoarm type SHATTER | BITMAP3;
		explode nanojoint type SHATTER | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rnanogun type BITMAPONLY | BITMAP3;
		explode rnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	explode ground type BITMAPONLY | BITMAP1;
	explode guncase type BITMAPONLY | BITMAP2;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lnanogun type BITMAPONLY | BITMAP5;
	explode lnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nanoarm type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode nanojoint type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode pelvis type BITMAPONLY | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rnanogun type BITMAPONLY | BITMAP3;
	explode rnanospray type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode torso type BITMAPONLY | BITMAP1;
	return (0);
}