#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  mis1, mis2, mis3, door1, door2, door3, launch1, launch2,
       launch3, base, pipes, pieces;

static-var gun_1, busy_2, ready_3, dead, constructor_id, buildangle;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

/*
Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}

Upgrade(callerID, angle)
{
	constructor_id = callerID;
	buildangle = angle;
	set TURNZ to buildangle;
}	
*/

Create()
{
	/*constructor_id=0;
	sleep 33;
	if (!constructor_id)
	{
		buildangle = Rand(-2048,2048);
	buildangle = buildangle + 32768;
		set TURNZ to buildangle;
	}
	dead=0;*/
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade mis1;
	dont-shade mis2;
	dont-shade mis3;
	dont-shade pipes;
	gun_1 = 0;
	busy_2 = 0;
	ready_3 = 0;
	sleep 100;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	sleep 100;
	/*if (constructor_id)
	{
		if (!dead)
		{
			get KILL_OTHER_UNIT(constructor_id, 3);
			constructor_id=0;
		}
	}*/
	start-script SmokeUnit();
	sleep 100;
	//get UNIT_REBUILD_YARD;
}

RestoreAfterDelay()
{
	sleep 12000;
	if( !busy_2 )
	{
		busy_2 = 1;
		move mis1 to y-axis [0] speed [20];
		move mis2 to y-axis [0] speed [20];
		move mis3 to y-axis [0] speed [20];
		turn door1 to z-axis <0> speed <60>;
		turn door2 to x-axis <0> speed <60>;
		turn door3 to z-axis <0> speed <60>;
		wait-for-move mis1 along y-axis;
		wait-for-move mis2 along y-axis;
		wait-for-move mis3 along y-axis;
		busy_2 = 0;
	}
}

AimPrimary()
{
	while( busy_2 )
	{
		sleep 200;
	}
	busy_2 = 1;
	if( !gun_1 )
	{
		show mis1;
		turn door1 to z-axis <90> speed <180>;
		wait-for-turn door1 around z-axis;
		move mis1 to y-axis [10] speed [20];
		turn door1 to z-axis <120> speed <90>;
		wait-for-move mis1 along y-axis;
	}
	if( gun_1 == 1 )
	{
		show mis2;
		turn door2 to x-axis <-90> speed <200>;
		wait-for-turn door2 around x-axis;
		move mis2 to y-axis [10] speed [20];
		turn door2 to x-axis <-120> speed <90>;
		wait-for-move mis2 along y-axis;
	}
	if( gun_1 > 1 )
	{
		show mis3;
		turn door3 to z-axis <-90> speed <200>;
		wait-for-turn door3 around z-axis;
		move mis3 to y-axis [10] speed [20];
		turn door3 to z-axis <-120> speed <90>;
		wait-for-move mis3 along y-axis;
	}
	busy_2 = 0;
	signal 2;
	set-signal-mask 2;
	start-script RestoreAfterDelay();
	return(1);
}

FirePrimary()
{
	busy_2 = 1;
	++gun_1;
	if( gun_1 > 2 )
	{
		gun_1 = 0;
	}
	hide mis1;
	hide mis2;
	hide mis3;
	sleep 250;
	move mis1 to y-axis [0] NOW;
	move mis2 to y-axis [0] NOW;
	move mis3 to y-axis [0] NOW;
	turn door1 to z-axis <0> speed <90>;
	turn door2 to x-axis <0> speed <90>;
	turn door3 to z-axis <0> speed <90>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around x-axis;
	wait-for-turn door3 around z-axis;
	sleep 1000;
	busy_2 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = pipes;
	return (0);
}

/*
TookDamage(dmgtype, dmgamount, attackerid)
{
	if (constructor_id AND (get BUILD_PERCENT_LEFT) AND dmgtype==dtWeapon AND (get HEALTH_VAL) == (get GET_UNITINFO(uiMaxDamage)))
	{
		get MAKE_DAMAGE(1, dmgamount, attackerid, constructor_id);
	}
}*/

Killed(severity, corpsetype)
{
	dead=1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP2;
		explode pieces type BITMAPONLY | BITMAP3;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type FALL | BITMAP2;
		explode door2 type FALL | BITMAP2;
		explode door3 type FALL | BITMAP2;
		explode pieces type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type FALL | BITMAP2;
		explode door2 type FALL | BITMAP2;
		explode door3 type FALL | BITMAP2;
		explode pieces type SHATTER | BITMAP3;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pieces type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}