#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, centerbar1, centerbar2, quarter3, quarter4,
       quarter1, quarter2, nano2, nano1, spot;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			Func_Var_4 = Rand(1,4);
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from quarter1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from quarter2;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from quarter3;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from quarter4;
			}
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ReqState_3 != On_4 )
	{
		Busy_5 = 1;
		if( ReqState_3  )
		{
			dont-cache beam1;
			dont-cache beam2;
			dont-cache centerbar1;
			dont-cache centerbar2;
			dont-cache nano1;
			dont-cache nano2;
			dont-cache pad;
			dont-cache quarter1;
			dont-cache quarter2;
			dont-cache quarter3;
			dont-cache quarter4;
			move centerbar1 to x-axis [0] now;
			move centerbar1 to x-axis [8] speed [11.71];
			move centerbar2 to x-axis [0] now;
			move centerbar2 to x-axis [-7.95] speed [11.64];
	//		sleep 683;
			move quarter3 to z-axis [6.40] speed [9.29];
			move quarter4 to z-axis [-5.95] speed [8.64];
			move quarter1 to z-axis [-5.85] speed [8.49];
			move quarter2 to z-axis [6.45] speed [9.36];
	//		sleep 689;
			move nano2 to x-axis [4.05] speed [5.86];
			move nano1 to x-axis [-4] speed [5.79];
			sleep 725;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30>;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			spin pad around y-axis speed <0>;
			move centerbar1 to x-axis [8] now;
			move centerbar2 to x-axis [-7.95] now;
			move nano2 to x-axis [4.05] now;
			move nano2 to x-axis [0] speed [5.93];
			move quarter3 to z-axis [6.40] now;
			move quarter4 to z-axis [-5.95] now;
			move nano1 to x-axis [-4] now;
			move nano1 to x-axis [0] speed [5.86];
			move quarter1 to z-axis [-5.85] now;
			move quarter2 to z-axis [6.45] now;
			sleep 683;
			move quarter3 to z-axis [0] speed [9.29];
			move quarter4 to z-axis [0] speed [8.64];
			move quarter1 to z-axis [0] speed [8.49];
			move quarter2 to z-axis [0] speed [9.36];
	//		sleep 689;
			move centerbar1 to x-axis [0] speed [11.58];
			move centerbar2 to x-axis [0] speed [11.51];
			sleep 725;
			cache beam1;
			cache beam2;
			cache centerbar1;
			cache centerbar2;
			cache nano1;
			cache nano2;
			cache pad;
			cache quarter1;
			cache quarter2;
			cache quarter3;
			cache quarter4;
		}
		Busy_5 = 0;
	}
	return (0);
}

Create()
{
	dont-shade beam1;
	dont-shade beam2;
	dont-shade centerbar1;
	dont-shade centerbar2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade quarter1;
	dont-shade quarter2;
	dont-shade quarter3;
	dont-shade quarter4;
	Nano_1 = 0;
//	Demo_2 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 8000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = spot;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode centerbar1 type BITMAPONLY | BITMAP4;
		explode centerbar2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode quarter1 type BITMAPONLY | BITMAP4;
		explode quarter2 type BITMAPONLY | BITMAP5;
		explode quarter3 type BITMAPONLY | BITMAP1;
		explode quarter4 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | FIRE | BITMAP2;
		explode beam2 type FALL | SMOKE | BITMAP3;
		explode centerbar1 type BITMAPONLY | BITMAP4;
		explode centerbar2 type BITMAPONLY | BITMAP5;
		explode nano1 type SHATTER | BITMAP1;
		explode nano2 type SHATTER | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode quarter1 type BITMAPONLY | BITMAP4;
		explode quarter2 type BITMAPONLY | BITMAP5;
		explode quarter3 type BITMAPONLY | BITMAP1;
		explode quarter4 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode centerbar1 type BITMAPONLY | BITMAP4;
		explode centerbar2 type BITMAPONLY | BITMAP5;
		explode nano1 type SHATTER | BITMAP1;
		explode nano2 type SHATTER | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode quarter1 type BITMAPONLY | BITMAP4;
		explode quarter2 type BITMAPONLY | BITMAP5;
		explode quarter3 type BITMAPONLY | BITMAP1;
		explode quarter4 type BITMAPONLY | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode centerbar1 type BITMAPONLY | BITMAP4;
	explode centerbar2 type BITMAPONLY | BITMAP5;
	explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode pad type BITMAPONLY | BITMAP3;
	explode quarter1 type BITMAPONLY | BITMAP4;
	explode quarter2 type BITMAPONLY | BITMAP5;
	explode quarter3 type BITMAPONLY | BITMAP1;
	explode quarter4 type BITMAPONLY | BITMAP2;
	return (0);
}