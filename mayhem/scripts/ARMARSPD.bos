#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, leg1, leg2, leg3, leg4, leg5, leg6, beam1, beam2, spid;

static-var  bMoving, spray;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl()
{
	while( TRUE )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <-12.5> now; 
			turn leg1 to z-axis <16.25> now;
			turn leg1 to y-axis <0> speed <86.5>;
			turn leg1 to z-axis <32.5> speed <86.5>;
			turn leg2 to y-axis <0> now;
			turn leg2 to y-axis <-25> speed <86.5>;
			turn leg3 to y-axis <12.5> now;
			turn leg3 to z-axis <16.25> now;
			turn leg3 to y-axis <25> speed <86.5>;
			turn leg3 to z-axis <0> speed <86.5>;
			turn leg4 to y-axis <-25> now;
			turn leg4 to y-axis <0> speed <86.5>;
			turn leg5 to z-axis <-32.5> now;
			turn leg5 to y-axis <-12.5> speed <86.5>;
			turn leg5 to z-axis <-16.25> speed <86.5>;
			turn leg6 to y-axis <25> now;
			turn leg6 to y-axis <12.5> speed <86.5>;
			turn leg6 to z-axis <-16.25> speed <86.5>;
			sleep 235;
		}
		if( bMoving )
		{	
			turn leg1 to y-axis <12.5> speed <86.5>;
			turn leg1 to z-axis <16.25> speed <86.5>;
			turn leg2 to y-axis <-12.5> speed <86.5>;
			turn leg2 to z-axis <16.25> speed <86.5>;
			turn leg3 to y-axis <0> speed <86.5>;
			turn leg4 to y-axis <25> speed <86.5>;
			turn leg5 to y-axis <-25> speed <86.5>;
			turn leg5 to z-axis <0> speed <86.5>;
			turn leg6 to y-axis <0> speed <86.5>;
			turn leg6 to z-axis <-32.5> speed <86.5>;
			sleep 235;
		}
		if( bMoving )
		{	
			turn leg1 to y-axis <25> speed <86.5>;
			turn leg1 to z-axis <0> speed <86.5>;
			turn leg2 to y-axis <0> speed <86.5>;
			turn leg2 to z-axis <32.5> speed <86.5>;
			turn leg3 to y-axis <-25> speed <86.5>;
			turn leg4 to y-axis <12.5> speed <86.5>;
			turn leg4 to z-axis <-16.25> speed <86.5>;
			turn leg5 to y-axis <0> speed <86.5>;
			turn leg6 to y-axis <-12.5> speed <86.5>;
			turn leg6 to z-axis <-16.25> speed <86.5>;
			sleep 235;
		}
		if( bMoving )
		{	
			turn leg1 to y-axis <0> speed <86.5>;
			turn leg2 to y-axis <12.5> speed <86.5>;
			turn leg2 to z-axis <16.25> speed <86.5>;
			turn leg3 to y-axis <-12.5> speed <86.5>;
			turn leg3 to z-axis <16.25> speed <86.5>;
			turn leg4 to y-axis <0> speed <86.5>;
			turn leg4 to z-axis <-32.5> speed <86.5>;
			turn leg5 to y-axis <25> speed <86.5>;
			turn leg6 to y-axis <-25> speed <86.5>;
			turn leg6 to z-axis <0> speed <86.5>;
			sleep 235;
		}
		if( bMoving )
		{	
			turn leg1 to y-axis <-25> speed <86.5>;
			turn leg2 to y-axis <25> speed <86.5>;
			turn leg2 to z-axis <0> speed <86.5>;
			turn leg3 to y-axis <0> speed <86.5>;
			turn leg3 to z-axis <32.5> speed <86.5>;
			turn leg4 to y-axis <-12.5> speed <86.5>;
			turn leg4 to z-axis <-16.25> speed <86.5>;
			turn leg5 to y-axis <12.5> speed <86.5>;
			turn leg5 to z-axis <-16.25> speed <86.5>;
			turn leg6 to y-axis <0> speed <86.5>;
			sleep 235;
		}
		if( bMoving )
		{	
			turn leg1 to y-axis <-12.5> speed <86.5>; 
			turn leg1 to z-axis <16.25> speed <86.5>;
			turn leg2 to y-axis <0> speed <86.5>;
			turn leg3 to y-axis <12.5> speed <86.5>;
			turn leg3 to z-axis <16.25> speed <86.5>;
			turn leg4 to y-axis <-25> speed <86.5>;
			turn leg4 to z-axis <0> speed <86.5>;
			turn leg5 to y-axis <0> speed <86.5>;
			turn leg5 to z-axis <-32.5> speed <86.5>;
			turn leg6 to y-axis <25> speed <86.5>;
			sleep 235;
		}
		if( !bMoving )
		{
			turn leg1 to y-axis <0> speed <96>;
			turn leg1 to z-axis <0> now;
			turn leg2 to y-axis <0> speed <96>;
			turn leg2 to z-axis <0> now;		
			turn leg3 to y-axis <0> speed <96>;
			turn leg3 to z-axis <0> now;		
			turn leg4 to y-axis <0> speed <96>;
			turn leg4 to z-axis <0> now;
			turn leg5 to y-axis <0> speed <96>;
			turn leg5 to z-axis <0> now;	
			turn leg6 to y-axis <0> speed <96>;
			turn leg6 to z-axis <0> now;
			sleep 200;
		}
	}
}

/*
Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}
*/	

Create()
{
	bMoving = FALSE;
	spray = base;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = spid;
}

QueryLandingPad(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = 1;
	Func_Var_2 = 1;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode beam1 type BITMAPONLY | BITMAP3;
		explode beam2 type BITMAPONLY | BITMAP4;
		explode leg1 type BITMAPONLY | BITMAP5;
		explode leg2 type BITMAPONLY | BITMAP1;
		explode leg3 type BITMAPONLY | BITMAP2;
		explode leg4 type BITMAPONLY | BITMAP3;
		explode leg5 type BITMAPONLY | BITMAP4;
		explode leg6 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode beam1 type FALL | BITMAP3;
		explode beam2 type FALL | BITMAP4;
		explode leg1 type FALL | BITMAP5;
		explode leg2 type FALL | BITMAP1;
		explode leg3 type FALL | BITMAP2;
		explode leg4 type FALL | BITMAP3;
		explode leg5 type FALL | BITMAP4;
		explode leg6 type FALL | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode pad type FALL | EXPLODE_ON_HIT | BITMAP2;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
