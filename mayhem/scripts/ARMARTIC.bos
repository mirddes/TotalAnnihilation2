#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, door1, door2, door3, door4, door5,
       door6, sleeve, b1, barrel, flare, p1, p2, p3,
       p4;

static-var  state_1, request_2, busy_3, restore_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(timer)
{
	timer = 0;
	while( TRUE )
	{
		busy_3 = 1;
		if( !request_2 AND state_1 )
		{
			state_1 = 0;
			timer = 0;
			restore_4 = 0;
			signal 2;
			turn b1 to x-axis <0> speed <80>;
			move b1 to z-axis [-2.4] speed [6];
			move barrel to z-axis [-4] speed [10];
			sleep 400;
			move turret to y-axis [-16.5] speed [33];
			sleep 400;
			//get SET_CLOAKED (1);
			turn door2 to z-axis <175> speed <350>;
			sleep 66;
			turn door1 to z-axis <175> speed <350>;
			sleep 66;
			turn door5 to x-axis <175> speed <350>;
			sleep 66;
			turn door3 to z-axis <-175> speed <350>;
			sleep 66;
			turn door4 to z-axis <-175> speed <350>;
			sleep 66;
			turn door6 to x-axis <-175> speed <350>;
			set ARMORED to 1;
			cache sleeve;
			cache barrel;
			cache b1;
			cache turret;
			sleep 500;
			cache door1;
			cache door2;
			cache door3;
			cache door4;
			cache door5;
			cache door6;
		}
		if( request_2 AND !state_1 )
		{
			state_1 = 1;
			timer = 0;
			dont-cache door1;
			dont-cache door2;
			dont-cache door3;
			dont-cache door4;
			dont-cache door5;
			dont-cache door6;
			dont-cache sleeve;
			dont-cache b1;
			dont-cache barrel;
			dont-cache turret;
			//get SET_CLOAKED (0);
			turn door6 to x-axis <0> speed <700>;
			sleep 33;
			turn door5 to x-axis <0> speed <700>;
			sleep 33;
			turn door4 to z-axis <0> speed <700>;
			sleep 33;
			turn door3 to z-axis <0> speed <700>;
			sleep 33;
			turn door2 to z-axis <0> speed <700>;
			sleep 33;
			turn door1 to z-axis <0> speed <700>;
			sleep 150;
			set ARMORED to 0;
			move turret to y-axis [0] speed [41.25];
			sleep 400;
			move b1 to z-axis [0] speed [10];
			move barrel to z-axis [0] speed [10];
			sleep 400;
			Restore_4 = 1;
		}
		busy_3 = 0;
		if( !restore_4 AND timer )
		{
			--timer;
			if( !timer AND request_2 )
			{
				set ACTIVATION to 0;
			}
		}
		if( restore_4 )
		{
			restore_4 = 0;
			timer = 20;
		}
		sleep 250;
	}
}

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade door5;
	dont-shade door6;
	dont-shade sleeve;
	dont-shade barrel;
	dont-shade b1;
	dont-shade turret;
	hide flare;
	dont-cache flare;
	state_1 = 1;
	request_2 = 1;
	busy_3 = 0;
	restore_4 = 0;
	turn p1 to y-axis <-30> now;
	turn p2 to y-axis <30> now;
	turn p3 to y-axis <30> now;
	turn p4 to y-axis <-30> now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	restore_4 = 1;
	start-script SmokeUnit();
	start-script RequestState();
}

Deactivate()
{
	request_2 = 0;
}

Activate()
{
	request_2 = 1;
}

AimPrimary(heading, pitch)
{
	if( !request_2 )
	{
		set ACTIVATION to 1;
	}
	signal 2;
	set-signal-mask 2;
	while( !state_1 OR busy_3 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <360>;
	turn b1 to x-axis <0> - pitch speed <80>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	wait-for-move barrel along z-axis;
	restore_4 = 1;
	return (1);
}

FirePrimary()
{
	show flare;
	move barrel to z-axis [-1.50] NOW;
	sleep 150;
	hide flare;
	move barrel to z-axis [0] speed [1.575];
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		if( state_1 )
		{
			corpsetype = 1;
		}
		if( !state_1 )
		{
			corpsetype = 2;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode door3 type BITMAPONLY | BITMAP3;
		explode door4 type BITMAPONLY | BITMAP4;
		explode door5 type BITMAPONLY | BITMAP3;
		explode door6 type BITMAPONLY | BITMAP4;
		explode b1 type BITMAPONLY | BITMAP5;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP4;
		explode barrel type FALL | BITMAP5;
		explode door4 type FALL | BITMAP3;
		explode door6 type FALL | BITMAP4;
		explode b1 type FALL | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode b1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
