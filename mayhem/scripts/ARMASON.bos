#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hinge1, hinge2, hinge3, hinge4, dish4, dish3, dish2,
       dish1, wheel, light;

static-var  Static_Var_1, Static_Var_2;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2 )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( !Static_Var_1 )
		{
	dont-cache base;
	dont-cache dish1;
	dont-cache dish2;
	dont-cache dish3;
	dont-cache dish4;
	dont-cache hinge1;
	dont-cache hinge2;
	dont-cache hinge3;
	dont-cache hinge4;
	dont-cache wheel;
		turn hinge1 to x-axis <0> now;
		turn hinge1 to x-axis <133.30> speed <68.75>;
		turn hinge2 to x-axis <0> now;
		turn hinge2 to x-axis <-132.87> speed <68.52>;
		turn hinge3 to z-axis <0> now;
		turn hinge3 to z-axis <130.70> speed <67.41>;
		turn hinge4 to z-axis <0> now;
		turn hinge4 to z-axis <-130.27> speed <67.18>;
		turn dish4 to y-axis <0> now;
		turn dish4 to y-axis <-180.47> speed <93.08>;
		turn dish3 to y-axis <0> now;
		turn dish3 to y-axis <-172.25> speed <88.84>;
		turn dish2 to y-axis <0> now;
		turn dish2 to y-axis <-182.20> speed <93.97>;
		turn dish1 to y-axis <0> now;
		turn dish1 to y-axis <-178.74> speed <92.18>;
	set ARMORED to 0;
		sleep 2027;
	move base to y-axis [0] speed [5];
	spin wheel around y-axis speed <60>;
			currentstate = 0;
		}
		if( Static_Var_1 )
		{
	spin wheel around y-axis speed <0>;
	move base to y-axis [-14] speed [5];
		turn hinge1 to x-axis <133.30> now;
		turn hinge1 to x-axis <0> speed <68.78>;
		turn hinge2 to x-axis <-132.87> now;
		turn hinge2 to x-axis <0> speed <68.55>;
		turn hinge3 to z-axis <130.70> now;
		turn hinge3 to z-axis <0> speed <67.44>;
		turn hinge4 to z-axis <-130.27> now;
		turn hinge4 to z-axis <0> speed <67.22>;
		turn dish4 to y-axis <-180.47> now;
		turn dish4 to y-axis <0> speed <93.12>;
		turn dish3 to y-axis <-172.25> now;
		turn dish3 to y-axis <0> speed <88.88>;
		turn dish2 to y-axis <-182.20> now;
		turn dish2 to y-axis <0> speed <94>;
		turn dish1 to y-axis <-178.74> now;
		turn dish1 to y-axis <0> speed <92.23>;
	set ARMORED to 1;
		sleep 2026;
	cache base;
	cache dish1;
	cache dish2;
	cache dish3;
	cache dish4;
	cache hinge1;
	cache hinge2;
	cache hinge3;
	cache hinge4;
	cache wheel;
			currentstate = 1;
		}
	}
	Static_Var_2 = 0;
	return (0);
}

/*
Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}
*/

Create()
{
	dont-shade light;
	dont-cache light;
	dont-shade base;
	dont-shade dish1;
	dont-shade dish2;
	dont-shade dish3;
	dont-shade dish4;
	dont-shade hinge1;
	dont-shade hinge2;
	dont-shade hinge3;
	dont-shade hinge4;
	dont-shade wheel;
	Static_Var_1 = 1;
	Static_Var_2 = 0;
	start-script SmokeUnit();
	set ARMORED to 1;
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( !Static_Var_1 )
	{
	signal 2;
	set-signal-mask 2;
	set ACTIVATION to 0;
	sleep 8000;
	set ACTIVATION to 1;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode dish1 type BITMAPONLY | BITMAP2;
		explode dish2 type BITMAPONLY | BITMAP3;
		explode dish3 type BITMAPONLY | BITMAP4;
		explode dish4 type BITMAPONLY | BITMAP5;
		explode hinge1 type BITMAPONLY | BITMAP1;
		explode hinge2 type BITMAPONLY | BITMAP2;
		explode hinge3 type BITMAPONLY | BITMAP3;
		explode hinge4 type BITMAPONLY | BITMAP4;
		explode light type SHATTER | BITMAP5;
		explode wheel type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode dish1 type BITMAPONLY | BITMAP2;
		explode dish2 type BITMAPONLY | BITMAP3;
		explode dish3 type BITMAPONLY | BITMAP4;
		explode dish4 type BITMAPONLY | BITMAP5;
		explode hinge1 type BITMAPONLY | BITMAP1;
		explode hinge2 type BITMAPONLY | BITMAP2;
		explode hinge3 type BITMAPONLY | BITMAP3;
		explode hinge4 type BITMAPONLY | BITMAP4;
		explode light type SHATTER | BITMAP5;
		explode wheel type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode dish1 type BITMAPONLY | BITMAP2;
		explode dish2 type BITMAPONLY | BITMAP3;
		explode dish3 type BITMAPONLY | BITMAP4;
		explode dish4 type BITMAPONLY | BITMAP5;
		explode hinge1 type BITMAPONLY | BITMAP1;
		explode hinge2 type BITMAPONLY | BITMAP2;
		explode hinge3 type BITMAPONLY | BITMAP3;
		explode hinge4 type BITMAPONLY | BITMAP4;
		explode light type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode wheel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode dish1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode dish2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode dish3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode dish4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode hinge1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hinge2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hinge3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode hinge4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode light type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wheel type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}