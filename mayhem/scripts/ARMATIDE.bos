#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, wheel1, wheel2, wheel3, gun, barrel, flare, torplauncher,
       torp, base;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

/*
NanoFrameInit()
{
	hide flare;
}

Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}
*/	

Create()
{
	dont-shade wheel1;
	dont-shade wheel2;
	dont-shade wheel3;
	dont-shade body;
	dont-shade gun;
	dont-shade barrel;
	dont-cache body;
	dont-cache gun;
	dont-cache barrel;
	dont-cache flare;
	hide flare;
	start-script SmokeUnit();
}

Activate()
{
	dont-cache wheel1;
	dont-cache wheel2;
	dont-cache wheel3;
	spin wheel1 around y-axis speed <25.005495> accelerate <2.5>;
	spin wheel2 around y-axis speed <10> accelerate <1>;
	spin wheel3 around y-axis speed <6> accelerate <0.6>;
}

Deactivate()
{
	spin wheel1 around y-axis speed <0>;
	spin wheel2 around y-axis speed <0>;
	spin wheel3 around y-axis speed <0>;
	cache wheel1;
	cache wheel2;
	cache wheel3;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn gun to y-axis heading speed <200>;
	turn gun to x-axis <0> - pitch speed <80>;
	wait-for-turn gun around y-axis;
	wait-for-turn gun around x-axis;
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn torplauncher to y-axis heading speed <100.021978>;
	wait-for-turn torplauncher around y-axis;
	return (1);
}

FireSecondary()
{
}

QuerySecondary(piecenum)
{
	piecenum = torp;
}

AimFromSecondary(piecenum)
{
	piecenum = torplauncher;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode wheel1 type BITMAPONLY | BITMAP2;
		explode wheel2 type BITMAPONLY | BITMAP1;
		explode wheel3 type BITMAPONLY | BITMAP2;
		explode gun type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode wheel1 type BITMAPONLY | BITMAP2;
		explode wheel2 type BITMAPONLY | BITMAP1;
		explode wheel3 type BITMAPONLY | BITMAP2;
		explode gun type BITMAPONLY | BITMAP1;
		explode torplauncher type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode wheel1 type BITMAPONLY | BITMAP2;
		explode wheel2 type BITMAPONLY | BITMAP2;
		explode wheel3 type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP1;
		explode torplauncher type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode wheel1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wheel2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wheel3 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode torplauncher type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
