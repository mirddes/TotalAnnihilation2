#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, arm1, arm2, arm3, jet1, jet2, jet3;

static-var  Flames_1, Demo_2, On_3;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	Demo_2 = 0;
	Flames_1 = 0;
	On_3 = 0;
	start-script SmokeUnit();
	return (0);
}

Demo()
{
	Demo_2 = 1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = 1;
	return (0);
}

OpenArms()
{
	On_3 = 1;
	move arm1 to x-axis [-3.40] speed [3.41];
	move arm2 to x-axis [3.40] speed [3.41];
	move arm3 to z-axis [-4.80] speed [4.81];
	turn arm1 to y-axis <-21.15> speed <21.19>;
	turn arm2 to y-axis <21.15> speed <21.19>;
}
	

Activate()
{
	if( Demo_2 )
	{
		start-script OpenArms();
	}
	return (0);
}

BeginTransport(Func_Var_1)
{
	move link to y-axis ( [0] - Func_Var_1 ) now;
	if( !On_3 )
	{
		start-script OpenArms();
	}
	return (0);
}

CloseArms()
{
	On_3 = 0;
	move arm1 to x-axis [0] speed [3.41];
	move arm2 to x-axis [0] speed [3.41];
	move arm3 to z-axis [0] speed [4.81];
	turn arm1 to y-axis <0> speed <21.19>;
	turn arm2 to y-axis <0> speed <21.19>;
}


Deactivate()
{
	if( Demo_2 )
	{
		start-script CloseArms();
	}
	return (0);
}

EndTransport()
{
	if( On_3 )
	{
		start-script CloseArms();
	}
	return (0);
}

ProcessFlames()
{
	while( TRUE )
	{
		if( ( Flames_1 == 1 ) OR ( Flames_1 == 2 ) )
		{
			emit-sfx 0 from jet1;
			emit-sfx 0 from jet2;
			emit-sfx 0 from jet3;
		}
		sleep 67;
	}
	return (0);
}

StopMoving()
{
	signal 2;
	Flames_1 = 0;
	return (0);
}

MoveRate1()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Flames_1 = 1;
	return (0);
}

MoveRate2()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Flames_1 = 2;
	return (0);
}

MoveRate3()
{
	signal 2;
	set-signal-mask 2;
	start-script ProcessFlames();
	Flames_1 = 3;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode arm3 type BITMAPONLY | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type BITMAPONLY | BITMAP5;
		explode jet2 type BITMAPONLY | BITMAP1;
		explode jet3 type BITMAPONLY | BITMAP2;
		explode link type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode arm3 type SHATTER | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type FALL | BITMAP5;
		explode jet2 type FALL | BITMAP1;
		explode jet3 type FALL | BITMAP2;
		explode link type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode arm3 type SHATTER | BITMAP3;
		explode base type BITMAPONLY | BITMAP4;
		explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode jet3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	explode arm1 type BITMAPONLY | BITMAP1;
	explode arm2 type BITMAPONLY | BITMAP2;
	explode arm3 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode base type BITMAPONLY | BITMAP4;
	explode jet1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode jet2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode jet3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}