#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, cylinder1, cylinder2, cylinder3, cylinder4, cylinder5, cylinder6, nano2, nano1, spot;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ( ReqState_3 != On_4 ) )
	{
		Busy_5 = 1;
		if( ReqState_3 )
		{
			dont-cache beam1;
			dont-cache beam2;
			dont-cache cylinder1;
			dont-cache cylinder2;
			dont-cache cylinder3;
			dont-cache cylinder4;
			dont-cache cylinder5;
			dont-cache cylinder6;
			dont-cache nano1;
			dont-cache nano2;
			dont-cache pad;
			move cylinder1 to x-axis [0] now;
			move cylinder1 to x-axis [10.85] speed [35.34];
			move cylinder2 to x-axis [0] now;
			move cylinder2 to x-axis [-10.35] speed [33.71];
			sleep 307;
			move cylinder3 to x-axis [10.95] speed [36.62];
			move cylinder4 to x-axis [-10.55] speed [35.28];
			sleep 299;
	//		move cylinder5 to x-axis [10.85] speed [32.98];
	//		move cylinder6 to x-axis [-10.55] speed [32.07];
	//		sleep 329;
	//		move cylinder5 to x-axis [10.90] speed [0.12];
	//		move cylinder6 to x-axis [-10.35] speed [0.50];
			move cylinder5 to x-axis [10.90] speed [32];
			move cylinder6 to x-axis [-10.35] speed [32];
			turn cylinder5 to y-axis <96.77> speed <241.93>;
			turn cylinder6 to y-axis <100.37> speed <250.93>;
			sleep 400;
			turn nano2 to z-axis <117.03> speed <182.29>;
			turn nano1 to z-axis <-117.03> speed <182.29>;
			sleep 659;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30>;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			spin pad around y-axis speed <0>;
			move cylinder1 to x-axis [10.85] now;
			move cylinder2 to x-axis [-10.35] now;
			move cylinder3 to x-axis [10.95] now;
			move cylinder4 to x-axis [-10.55] now;
			move cylinder5 to x-axis [10.90] now;
			move cylinder6 to x-axis [-10.35] now;
			turn cylinder5 to y-axis <96.77> now;
			turn cylinder6 to y-axis <100.37> now;
			turn nano2 to z-axis <117.03> now;
			turn nano2 to z-axis <0> speed <301.62>;
			turn nano1 to z-axis <-117.03> now;
			turn nano1 to z-axis <0> speed <301.62>;
	//		sleep 388;
			move cylinder5 to x-axis [10.85] speed [0.09];
			move cylinder6 to x-axis [-10.55] speed [0.35];
			turn cylinder5 to y-axis <0> speed <167.14>;
			turn cylinder6 to y-axis <0> speed <173.36>;
			sleep 579;
			move cylinder1 to x-axis [0.40] speed [37.19];
			move cylinder2 to x-axis [0.35] speed [38.08];
			sleep 281;
			move cylinder3 to x-axis [0.30] speed [39.59];
			move cylinder4 to x-axis [0.20] speed [39.96];
			sleep 269;
			move cylinder5 to x-axis [0.25] speed [40.77];
			move cylinder6 to x-axis [0.35] speed [41.92];
			sleep 280;
			cache beam1;
			cache beam2;
			cache cylinder1;
			cache cylinder2;
			cache cylinder3;
			cache cylinder4;
			cache cylinder5;
			cache cylinder6;
			cache nano1;
			cache nano2;
			cache pad;
		}
		Busy_5 = 0;
	}
	return (0);
}

/*
Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}
*/	

Create()
{
	dont-shade beam1;
	dont-shade beam2;
	dont-shade cylinder1;
	dont-shade cylinder2;
	dont-shade cylinder3;
	dont-shade cylinder4;
	dont-shade cylinder5;
	dont-shade cylinder6;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 8000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = spot;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode cylinder1 type BITMAPONLY | BITMAP4;
		explode cylinder2 type BITMAPONLY | BITMAP5;
		explode cylinder3 type BITMAPONLY | BITMAP1;
		explode cylinder4 type BITMAPONLY | BITMAP2;
		explode cylinder5 type BITMAPONLY | BITMAP3;
		explode cylinder6 type BITMAPONLY | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP5;
		explode nano2 type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode cylinder1 type BITMAPONLY | BITMAP4;
		explode cylinder2 type BITMAPONLY | BITMAP5;
		explode cylinder3 type BITMAPONLY | BITMAP1;
		explode cylinder4 type BITMAPONLY | BITMAP2;
		explode cylinder5 type SHATTER | BITMAP3;
		explode cylinder6 type SHATTER | BITMAP4;
		explode nano1 type FALL | BITMAP5;
		explode nano2 type FALL | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode cylinder1 type BITMAPONLY | BITMAP4;
		explode cylinder2 type BITMAPONLY | BITMAP5;
		explode cylinder3 type BITMAPONLY | BITMAP1;
		explode cylinder4 type BITMAPONLY | BITMAP2;
		explode cylinder5 type SHATTER | BITMAP3;
		explode cylinder6 type SHATTER | BITMAP4;
		explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode cylinder1 type BITMAPONLY | BITMAP4;
	explode cylinder2 type BITMAPONLY | BITMAP5;
	explode cylinder3 type BITMAPONLY | BITMAP1;
	explode cylinder4 type BITMAPONLY | BITMAP2;
	explode cylinder5 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode cylinder6 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pad type BITMAPONLY | BITMAP2;
	return (0);
}