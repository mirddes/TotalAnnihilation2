#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, sphere, gear, collar, tower;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( ( get BUILD_PERCENT_LEFT ) )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( !Static_Var_2 )
		{
	dont-cache sphere;
	dont-cache gear;
	spin sphere around y-axis speed <15>;
	spin gear around y-axis speed <-25>;
			currentstate = 0;
		}
		if( Static_Var_2 )
		{
	spin sphere around y-axis speed <0>;
	spin gear around y-axis speed <0>;
	cache gear;
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
	return (0);
}

/*
Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}
*/	

Create()
{
	dont-cache sphere;
	dont-shade collar;
	dont-shade gear;
	dont-shade sphere;
	dont-shade tower;
	Static_Var_2 = 1;
	Static_Var_3 = 0;
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	explode base type BITMAPONLY | BITMAP1;
	explode sphere type BITMAPONLY | BITMAP2;
	explode gear type BITMAPONLY | BITMAP3;
	explode collar type BITMAPONLY | BITMAP4;
	explode tower type BITMAPONLY | BITMAP5;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	return (0);
}