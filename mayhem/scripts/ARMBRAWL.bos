#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1b, flare2b, base, wing1, wing2, tail1, tail2, weapon1,
       weapon2, flare1a, flare2a;

static-var  Static_Var_1;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	start-script SmokeUnit();
	return (0);
}

Activate()
{
//		move wing1 to x-axis [0] now;
		move wing1 to x-axis [2.90] speed [2.91];
//		move wing2 to x-axis [0] now;
		move wing2 to x-axis [-2.90] speed [2.91];
//		turn tail1 to z-axis <0> now;
		turn tail1 to z-axis <55.96> speed <56.07>;
//		turn tail2 to z-axis <0> now;
		turn tail2 to z-axis <-65.69> speed <65.82>;
//		sleep 998;
		move weapon1 to x-axis [-2.85] speed [2.83];
		move weapon2 to x-axis [2.95] speed [2.93];
//		sleep 1110;
	return (0);
}

Deactivate()
{
//		move weapon1 to x-axis [-2.85] now;
		move weapon1 to x-axis [0] speed [2.86];
//		move weapon2 to x-axis [2.95] now;
		move weapon2 to x-axis [0] speed [2.96];
//		move wing1 to x-axis [2.90] now;
//		move wing2 to x-axis [-2.90] now;
//		turn tail1 to z-axis <55.96> now;
//		turn tail2 to z-axis <-65.69> now;
//		sleep 998;
		move wing1 to x-axis [0] speed [2.88];
		move wing2 to x-axis [0] speed [2.88];
		turn tail1 to z-axis <0> speed <55.51>;
		turn tail2 to z-axis <0> speed <65.17>;
//		sleep 1079;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

FirePrimary()
{
	Static_Var_1 = ( !Static_Var_1 );
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = Static_Var_1;
	return (0);
}

//AimSecondary(Func_Var_1, Func_Var_2)
//{
//	return (0);
//}

//QuerySecondary(piecenum)
//{
//	piecenum = base;
//	return (0);
//}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare2a;
	hide flare1b;
	hide flare2b;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type BITMAPONLY | BITMAP2;
		explode wing2 type BITMAPONLY | BITMAP3;
		explode tail1 type BITMAPONLY | BITMAP4;
		explode tail2 type BITMAPONLY | BITMAP5;
		explode weapon1 type BITMAPONLY | BITMAP1;
		explode weapon2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type BITMAPONLY | BITMAP2;
		explode wing2 type BITMAPONLY | BITMAP3;
		explode tail1 type FALL | BITMAP4;
		explode tail2 type FALL | BITMAP5;
		explode weapon1 type BITMAPONLY | BITMAP1;
		explode weapon2 type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode wing1 type BITMAPONLY | BITMAP2;
	explode wing2 type BITMAPONLY | BITMAP3;
	explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode weapon1 type BITMAPONLY | BITMAP1;
	explode weapon2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}