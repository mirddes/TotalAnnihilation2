#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  base, wing1, wing2;

//static-var buildingid, buildingpos, buildingtype, buildingcrc;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


Create()
{
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;*/
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	/*if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var lSearchId, lUnitId, nCurrIdx, nFoundCount, crc;
		lSearchId = get FREE_ARRAY_ID(1);
		nFoundCount = get UNITS_WHOLEMAP(25,0,lSearchId,0);
		if (nFoundCount)
		{
			get RANDOMIZE_UNITS_ARRAY(lSearchId,1);
			nCurrIdx = 1;
			var unit;
			unit = 0;
			while (nCurrIdx <= nFoundCount)
			{
				lUnitId = get UNITS_ARRAY_RESULT(lSearchId,nCurrIdx,1);
				crc = get UNIT_TYPE_CRC(lUnitId);
				if (crc == ARMLAB OR crc == ARMVP OR crc == ARMASY OR crc == ARMXSY OR crc == ARMSPLAB OR crc == ARMALAB OR crc == ARMAVP OR crc == ARMSHLT OR crc == ARMXVP)
				{
					unit = lUnitId;
					break;
				}
			++nCurrIdx;
			}
		}
		get CLEAR_ARRAY_ID(1,lSearchId);
		if (unit)
		{
			get ORDER_UNIT_UNIT(49,get MY_ID,unit,0);
		}
	}*/
}

/*MoveRate1()
{
	if ((get CURRENT_ORDER_TYPE) == 54 AND (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2) AND (get INBUILDSTANCE) == 0)
	{
		get ORDER_SELF(45,0);
		get RESET_ORDER;
	}
}*/

Activate()
{
	move wing1 to x-axis [-4.50] speed [4.96];
	move wing2 to x-axis [5.85] speed [6.44];
	sleep 948;
	return (0);
}

Deactivate()
{
	move wing1 to x-axis [0] speed [4.96];
	move wing2 to x-axis [0] speed [6.44];
	sleep 948;
	return (0);
}

StartBuilding(sleeptime)
{
	sleeptime = Rand(1,500);
	sleep sleeptime;
	set INBUILDSTANCE to 1;
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 54)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}*/
	return (0);
}

StopBuilding()
{
	/*if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - (get GROUND_HEIGHT(get UNIT_XZ(buildingid)) / 131072);
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(54,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}*/
	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = base;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	explode base type BITMAPONLY | BITMAP1;
	explode wing1 type BITMAPONLY | BITMAP2;
	explode wing2 type BITMAPONLY | BITMAP3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	return (0);
}