#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam, nano, lid, wake1, wake2, wake3, wake4, wake5, 
       wake6, wake7, wake8, base, GP;

static-var  Depth_1, heading_2, request_3, busy_4, curstate_5; //buildingid, buildingpos, buildingtype, buildingcrc;

// Signal definitions

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( depth_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <44>;
			++count;
			sleep 33;
		}
	}
	return (0);
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	Depth_1 = Func_Var_1;
}

RequestState(sleeptime)
{
	while( ( !busy_4 ) AND ( request_3 != curstate_5 ) )
	{
		busy_4 = 1;
		if( request_3 )
		{
			move lid to y-axis [1.5] speed [4];
			sleep 400;
			move lid to z-axis [2.5] speed [5];
			sleep 400;
			move nano to z-axis [3] speed [5];
			turn lid to y-axis heading_2 speed <120>;
			sleep 600;
			wait-for-turn lid around y-axis;
			sleeptime = Rand(1,500);
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			curstate_5 = 1;
		}
		if( !request_3  )
		{
			curstate_5 = 0;
			set INBUILDSTANCE to 0;
			turn lid to y-axis <0> speed <120>;
			sleep 400;
			move nano to z-axis [0] speed [5];
			sleep 400;
			move lid to z-axis [0] speed [5];
			wait-for-turn lid around y-axis;
			move lid to y-axis [0] speed [5];
		}
		busy_4 = 0;
	}
}

/*
Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}
*/	

Create()
{
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;*/
	heading_2 = 0;
	request_3 = 0;
	busy_4 = 0;
	curstate_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
	}
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	heading_2 = Func_Var_1;
	request_3 = 1;
	start-script RequestState();
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 25)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}*/
	return (0);
}

StopBuilding()
{
	/*if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - (get GROUND_HEIGHT(get UNIT_XZ(buildingid)) / 131072);
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(25,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}*/
	request_3 = 0;
	sleep 5000;
	if( !request_3 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	heading_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( Depth_1 >= 4 AND ( severity <= 25 ))
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type BITMAPONLY | BITMAP3;
		explode lid type BITMAPONLY | BITMAP4;
		explode nano type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode lid type BITMAPONLY | BITMAP4;
		explode nano type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lid type BITMAPONLY | BITMAP4;
		explode nano type SHATTER | BITMAP1;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lid type BITMAPONLY | BITMAP4;
	explode nano type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
