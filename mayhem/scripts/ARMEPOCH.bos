#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare1c, flare1d, barrel1a, barrel1b, barrel1c, barrel1d,
       sleeve1a, sleeve1bc, sleeve1d, bflare1a, bflare1b, bflare1c, bflare2a, bflare2b, 
       bflare2c, bflare3a, bflare3b, bflare3c, bbarrel1a, bbarrel1b, bbarrel1c, bbarrel2a, 
       bbarrel2b, bbarrel2c, bbarrel3a, bbarrel3b, bbarrel3c, bturret1, bturret2, bturret3,
       baim1, baim2, baim3, turret1, gflare1, gflare2, gbarrel1, gbarrel2,  
       gsleeve, gturret, gtbase, glowybits, wake1, wake2, wake3, wake4,
       base;

static-var  Gun_1, Gun_2, Gun_3, Reset_4, Busy_5, Delay_6, Arc_7, Turret_8;

RestoreAfterDelay()
{
	sleep 6000;
	if( !Reset_4 )
	{
		turn turret1 to y-axis <0> speed <30>;
		turn turret1 to x-axis <0> speed <15>;
		turn gturret to y-axis <0> speed <160>;
		turn gsleeve to x-axis <0> speed <60>;
		turn bturret3 to y-axis <0> speed <50>;
		turn bturret3 to x-axis <0> speed <20>;
		cache gturret; 
		cache gsleeve;
		cache gbarrel1;
		cache gbarrel2;
		if( Arc_7 == 3 )
		{
			turn bturret1 to y-axis <175> speed <50>;
			turn bturret2 to y-axis <185> speed <50>;
			wait-for-turn bturret1 around y-axis;
			wait-for-turn bturret2 around y-axis;
		}
		turn bturret1 to y-axis <0> speed <50>;
		turn bturret1 to x-axis <0> speed <20>;
		turn bturret2 to y-axis <0> speed <50>;
		turn bturret2 to x-axis <0> speed <20>;
		signal 2;
		signal 4;
		signal 16;
		cache glowybits;
		Arc_7 = 0;
	}
	Busy_5 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Reset_4 and !Busy_5 )
		{
			Reset_4 = 0;
			Busy_5 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare1d;
	hide bflare1a;
	hide bflare1b;
	hide bflare1c;
	hide bflare2a;
	hide bflare2b;
	hide bflare2c;
	hide bflare3a;
	hide bflare3b;
	hide bflare3c;
	hide gflare1;
	hide gflare2;
	dont-cache flare1a;
	dont-cache flare1b;
	dont-cache flare1c;
	dont-cache flare1d;
	dont-cache bflare1a;
	dont-cache bflare1b;
	dont-cache bflare1c;
	dont-cache bflare2a;
	dont-cache bflare2b;
	dont-cache bflare2c;
	dont-cache bflare3a;
	dont-cache bflare3b;
	dont-cache bflare3c;
	dont-cache gflare1;
	dont-cache gflare2;
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	Reset_4 = 0;
	Busy_5 = 0;
	Delay_6 = 0;
	Arc_7 = 0;
	Turret_8 = 1;
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	dont-cache glowybits;
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 4 from wake3;
		emit-sfx 2 from wake4;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	return (0);
}

AimTertiary(heading, pitch)
{
	dont-cache gturret; 
	dont-cache gsleeve;
	dont-cache gbarrel1;
	dont-cache gbarrel2;
	Signal 16;
	set-signal-mask 16;
	turn gturret to y-axis heading speed <240>;
	turn gsleeve to x-axis 0 - pitch speed <100>;
	wait-for-turn gturret around y-axis;
	wait-for-turn gsleeve around x-axis;
	Reset_4 = 1;
	Return(1);
}

AimSecondary(heading, pitch)
{
	var prevarc;
	prevarc = Arc_7;
	Arc_7 = 0;
	signal 4;
	set-signal-mask 4;
	if(( heading >= <225> ) AND ( heading < <315> ))
	{
		Arc_7 = 1; //bturret2 aka right turret can't fire left
	}
	if(( heading > <45> ) AND ( heading <= <135> ))
	{
		Arc_7 = 2; //bturret1 aka left turret can't fire right
	}
	if(( heading > <135> ) AND ( heading < <225> ))
	{
		Arc_7 = 3; //bturret3 aka front turret can't fire aft/rear
	}
	while( Arc_7 == Turret_8 )	//if target direction is in turret's blind spot...
	{							//short delay then switch turrets
		wait-for-move bbarrel1a along z-axis;
		wait-for-move bbarrel1b along z-axis;
		wait-for-move bbarrel1c along z-axis;
		wait-for-move bbarrel2a along z-axis;
		wait-for-move bbarrel2b along z-axis;
		wait-for-move bbarrel2c along z-axis;
		wait-for-move bbarrel3a along z-axis;
		wait-for-move bbarrel3b along z-axis;
		wait-for-move bbarrel3c along z-axis;
		++Turret_8;
		if( Turret_8 > 3 )
		{
			Turret_8 = 1;
		}
	}
	if( !Arc_7 ) //forward arc, all turrets can fire
	{
		turn bturret3 to y-axis heading speed <60>;
		turn bturret3 to x-axis <0> - pitch speed <25>;
		if( prevarc == 1 )
		{
			Turret_8 = 1; //will be already facing forward
		}
		if( prevarc == 2 )
		{
			Turret_8 = 2; //will be already facing forward
		}
		if( prevarc == 3 ) //was rear arc, turn turrets 1 and 2 so they don't point inwards
		{
			Turret_8 = 3; //front turret will already be facing forward
			gun_2 = 0; //big arc change, reset to first barrel
			turn bturret1 to y-axis <130> speed <60>;
			turn bturret1 to x-axis <0> - pitch speed <25>;
			wait-for-turn bturret1 around y-axis;
			turn bturret1 to y-axis heading speed <60>;
			turn bturret2 to y-axis <220> speed <60>;
			turn bturret2 to x-axis <0> - pitch speed <25>;
			wait-for-turn bturret2 around y-axis;
		}
		turn bturret1 to y-axis heading speed <60>;
		turn bturret1 to x-axis <0> - pitch speed <25>;
		turn bturret2 to y-axis heading speed <60>;
		turn bturret2 to x-axis <0> - pitch speed <25>;
	}
	if( Arc_7 == 1 ) //ship's right/starboard, port turret (1) can't fire
	{
		if( !prevarc )
		{
			Turret_8 = 2;
		}
		if( prevarc == 2 ) //was left/port, turn front turret to front first
		{
			Turret_8 = 2; //right turret will already be facing forward
			gun_2 = 0; //big arc change, reset to first barrel
			turn bturret1 to y-axis 0 speed <50>;
			turn bturret2 to y-axis heading speed <60>;
			turn bturret2 to x-axis <0> - pitch speed <25>;
			turn bturret3 to y-axis <320> speed <60>;
			turn bturret3 to x-axis <0> - pitch speed <25>;
			wait-for-turn bturret3 around y-axis;
		}
		if( prevarc == 3 ) //was rear, turn port turret to the outside first
		{
			Turret_8 = 3; 
			turn bturret1 to y-axis <50> speed <50>;
		}
		turn bturret2 to y-axis heading speed <60>;
		turn bturret2 to x-axis <0> - pitch speed <25>;
		turn bturret3 to y-axis heading speed <60>;
		turn bturret3 to x-axis <0> - pitch speed <25>;
	}
	if( Arc_7 == 2 ) //ships left/port, starbord turret (2) can't fire
	{
		if( !prevarc )
		{
			Turret_8 = 1;
		}
		if( prevarc == 1 ) //was right, turn front turret to front first
		{
			Turret_8 = 1; //would already be facing forward
			gun_2 = 0; //big arc change, reset to first barrel
			turn bturret2 to y-axis 0 speed <50>;
			turn bturret1 to y-axis heading speed <60>;
			turn bturret1 to x-axis <0> - pitch speed <25>;
			turn bturret3 to y-axis <40> speed <60>;
			turn bturret3 to x-axis <0> - pitch speed <25>;
			wait-for-turn bturret3 around y-axis;
		}
		if( prevarc == 3 ) //was rear, turn left turret to outside first
		{
			Turret_8 = 3; //would already be facing forward
			turn bturret2 to y-axis <310> speed <50>;
		}
		turn bturret1 to y-axis heading speed <60>;
		turn bturret1 to x-axis <0> - pitch speed <25>;
		turn bturret3 to y-axis heading speed <60>;
		turn bturret3 to x-axis <0> - pitch speed <25>;
	}
	if( Arc_7 == 3 ) //rear arc, front turret can't fire
	{
		//no matter previous, park front turret
		//it wont be turning greater than 180 so won't turn the wrong way
		turn bturret3 to y-axis 0 speed <50>;
		turn bturret3 to x-axis 0 speed <20>;
		if( !prevarc ) //was front arc, turn side turrets outwards first
		{
			Turret_8 = 1;
			gun_2 = 0; //big arc change, reset to first barrel
			turn bturret1 to y-axis <50> speed <60>;
			turn bturret1 to x-axis <0> - pitch speed <25>;
			wait-for-turn bturret1 around y-axis;
			turn bturret1 to y-axis heading speed <60>;
			turn bturret2 to y-axis <310> speed <60>;
			turn bturret2 to x-axis <0> - pitch speed <25>;
			wait-for-turn bturret2 around y-axis;
		}
		if( prevarc == 1 ) //was right, left turret was parked, turn it left
		{
			Turret_8 = 2; //will reach aiming angle faster
			turn bturret1 to y-axis <50> speed <60>;
			turn bturret1 to x-axis <0> - pitch speed <25>;
			turn bturret2 to y-axis heading speed <60>;
			turn bturret2 to x-axis <0> - pitch speed <25>;
			wait-for-turn bturret1 around y-axis;
		}
		if( prevarc == 2 ) //was left, right turret was parked, turn it right
		{
			Turret_8 = 1; //will reach aiming angle faster
			turn bturret1 to y-axis heading speed <60>;
			turn bturret1 to x-axis <0> - pitch speed <25>;
			turn bturret2 to y-axis <310> speed <60>;
			turn bturret2 to x-axis <0> - pitch speed <25>;
			wait-for-turn bturret2 around y-axis;
		}
		turn bturret1 to y-axis heading speed <60>;
		turn bturret1 to x-axis <0> - pitch speed <25>;
		turn bturret2 to y-axis heading speed <60>;
		turn bturret2 to x-axis <0> - pitch speed <25>;
	}
	if( Turret_8 == 1 )
	{
		wait-for-turn bturret1 around y-axis;
		wait-for-turn bturret1 around x-axis;
	}
	if( Turret_8 == 2 )
	{
		wait-for-turn bturret2 around y-axis;
		wait-for-turn bturret2 around x-axis;
	}
	if( Turret_8 == 3 )
	{
		wait-for-turn bturret3 around y-axis;
		wait-for-turn bturret3 around x-axis;
	}
	if( Arc_7 == 1 )
	{
		turn bturret1 to y-axis 0 speed <50>;
		turn bturret1 to x-axis 0 speed <20>;
	}
	if( Arc_7 == 2 )
	{
		turn bturret2 to y-axis 0 speed <50>;
		turn bturret2 to x-axis 0 speed <20>;
	}
	Reset_4 = 1;
	return (1);
}

AimPrimary(heading, pitch)
{
	dont-cache glowybits;
	signal 2;
	set-signal-mask 2;
	turn turret1 to y-axis heading speed <35>;
	turn turret1 to x-axis <0> - pitch speed <15>;
	while( Delay_6 )
	{
		wait-for-move barrel1a along z-axis;
		wait-for-move barrel1b along z-axis;
		wait-for-move barrel1c along z-axis;
		wait-for-move barrel1d along z-axis;
	}
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	Reset_4 = 1;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		show flare1a;
		move barrel1a to z-axis [-5] speed [500];
		sleep 20;
		move barrel1a to z-axis [0] speed [2];
		move sleeve1a to z-axis [-1] speed [200];
		sleep 130;
		gun_1 = 1;
		hide flare1a;
		move sleeve1a to z-axis [0] speed [2];
		return(0);
	}
	if( gun_1 == 1 )
	{
		show flare1b;
		move barrel1b to z-axis [-5] speed [500];
		sleep 20;
		move barrel1b to z-axis [0] speed [2];
		move sleeve1bc to z-axis [-1] speed [200];
		sleep 130;
		gun_1 = 2;
		hide flare1b;
		move sleeve1bc to z-axis [0] speed [2];
		return(0);
	}
	if( gun_1 == 2 )
	{
		show flare1c;
		move barrel1c to z-axis [-5] speed [500];
		sleep 20;
		move barrel1c to z-axis [0] speed [2];
		move sleeve1bc to z-axis [-1] speed [200];
		sleep 130;
		gun_1 = 3;
		hide flare1c;
		move sleeve1bc to z-axis [0] speed [2];
		return(0);
	}
	if( gun_1 > 2 )
	{
		Delay_6 = 1;
		show flare1d;
		move barrel1d to z-axis [-5] speed [500];
		sleep 20;
		move barrel1d to z-axis [0] speed [2];
		move sleeve1d to z-axis [-1] speed [200];
		sleep 130;
		gun_1 = 0;
		hide flare1d;
		move sleeve1d to z-axis [0] speed [2];
		wait-for-move barrel1d along z-axis;
		Delay_6 = 0;
		return(0);
	}
	return (0);
}

FireSecondary()
{
	if( Turret_8 == 1 )
	{
		if( !gun_2 )
		{
			show bflare1a;
			move bbarrel1a to z-axis [-3] speed [500];
			sleep 30;
			move bbarrel1a to z-axis [0] speed [2.4];
			sleep 120;
			hide bflare1a;
		}
		if( gun_2 == 1 )
		{
			show bflare1b;
			move bbarrel1b to z-axis [-3] speed [500];
			sleep 30;
			move bbarrel1b to z-axis [0] speed [2.4];
			sleep 120;
			hide bflare1b;
		}
		if( gun_2 == 2 )
		{
			show bflare1c;
			move bbarrel1c to z-axis [-3] speed [500];
			sleep 30;
			move bbarrel1c to z-axis [0] speed [2.4];
			sleep 120;
			hide bflare1c;
		}
	}
	if( Turret_8 == 2 )
	{
		if( !gun_2 )
		{
			show bflare2a;
			move bbarrel2a to z-axis [-3] speed [500];
			sleep 30;
			move bbarrel2a to z-axis [0] speed [2.4];
			sleep 120;
			hide bflare2a;
		}
		if( gun_2 == 1 )
		{
			show bflare2b;
			move bbarrel2b to z-axis [-3] speed [500];
			sleep 30;
			move bbarrel2b to z-axis [0] speed [2.4];
			sleep 120;
			hide bflare2b;
		}
		if( gun_2 == 2 )
		{
			show bflare2c;
			move bbarrel2c to z-axis [-3] speed [500];
			sleep 30;
			move bbarrel2c to z-axis [0] speed [2.4];
			sleep 120;
			hide bflare2c;
		}
	}
	if( Turret_8 == 3 )
	{
		if( !gun_2 )
		{
			show bflare3a;
			move bbarrel3a to z-axis [-3] speed [500];
			sleep 30;
			move bbarrel3a to z-axis [0] speed [2.4];
			sleep 120;
			hide bflare3a;
		}
		if( gun_2 == 1 )
		{
			show bflare3b;
			move bbarrel3b to z-axis [-3] speed [500];
			sleep 30;
			move bbarrel3b to z-axis [0] speed [2.4];
			sleep 120;
			hide bflare3b;
		}
		if( gun_2 == 2 )
		{
			show bflare3c;
			move bbarrel3c to z-axis [-3] speed [500];
			sleep 30;
			move bbarrel3c to z-axis [0] speed [2.4];
			sleep 120;
			hide bflare3c;
		}
	}
	++gun_2;
	if( gun_2 > 2 )
	{
		gun_2 = 0;
		++Turret_8;
		if( Turret_8 > 3 )
		{
			Turret_8 = 1;
		}
	}
	return (0);
}

FireTertiary()
{
	if( !gun_3 )
	{
		show gflare1;
		move gbarrel1 to z-axis [-2] speed [500];
		sleep 30;
		move gbarrel1 to z-axis [0] speed [2];
		sleep 120;
		hide gflare1;
		gun_3 = 1;
		return(0);
	}
	show gflare2;
	move gbarrel2 to z-axis [-2] speed [500];
	sleep 30;
	move gbarrel2 to z-axis [0] speed [2];
	sleep 120;
	hide gflare2;
	gun_3 = 0;
	return(0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1b;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare1c;
	}
	if( gun_1 > 2 )
	{
		piecenum = flare1d;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	if( Turret_8 == 1 )
	{
		piecenum = bturret1;
	}
	if( Turret_8 == 2 )
	{
		piecenum = bturret2;
	}
	if( Turret_8 == 3 )
	{
		piecenum = bturret3;
	}
	return (0);
}

QuerySecondary(piecenum)
{
	if( Turret_8 == 1 )
	{
		if( !gun_2 )
		{
			piecenum = bflare1a;
		}
		if( gun_2 == 1 )
		{
			piecenum = bflare1b;
		}
		if( gun_2 == 2 )
		{
			piecenum = bflare1c;
		}
	}
	if( Turret_8 == 2 )
	{
		if( !gun_2 )
		{
			piecenum = bflare2a;
		}
		if( gun_2 == 1 )
		{
			piecenum = bflare2b;
		}
		if( gun_2 == 2 )
		{
			piecenum = bflare2c;
		}
	}
	if( Turret_8 == 3 )
	{
		if( !gun_2 )
		{
			piecenum = bflare3a;
		}
		if( gun_2 == 1 )
		{
			piecenum = bflare3b;
		}
		if( gun_2 == 2 )
		{
			piecenum = bflare3c;
		}
	}
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = gsleeve;
}

QueryTertiary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = gflare1;
		return(0);
	}
	piecenum = gflare2;
	return(0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare1d;
	hide bflare1a;
	hide bflare1b;
	hide bflare1c;
	hide bflare2a;
	hide bflare2b;
	hide bflare2c;
	hide bflare3a;
	hide bflare3b;
	hide bflare3c;
	hide gflare1;
	hide gflare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1a type BITMAPONLY | BITMAP4;
		explode barrel1b type BITMAPONLY | BITMAP5;
		explode barrel1c type BITMAPONLY | BITMAP4;
		explode barrel1d type BITMAPONLY | BITMAP5;
		explode sleeve1a type BITMAPONLY | BITMAP5;
		explode sleeve1bc type BITMAPONLY | BITMAP4;
		explode sleeve1d type BITMAPONLY | BITMAP4;
		explode bbarrel3a type BITMAPONLY | BITMAP1;
		explode bbarrel3b type BITMAPONLY | BITMAP2;
		explode bbarrel3c type BITMAPONLY | BITMAP3;
		explode bbarrel2a type BITMAPONLY | BITMAP4;
		explode bbarrel2b type BITMAPONLY | BITMAP2;
		explode bbarrel2c type BITMAPONLY | BITMAP1;
		explode bbarrel3a type BITMAPONLY | BITMAP1;
		explode bbarrel3b type BITMAPONLY | BITMAP2;
		explode bbarrel3c type BITMAPONLY | BITMAP3;
		explode base type BITMAPONLY | BITMAP2;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode bturret1 type BITMAPONLY | BITMAP2;
		explode bturret2 type BITMAPONLY | BITMAP2;
		explode bturret3 type BITMAPONLY | BITMAP2;
		explode gturret type BITMAPONLY | BITMAP3;
		explode gsleeve type BITMAPONLY | BITMAP5;
		explode gbarrel1 type BITMAPONLY | BITMAP1;
		explode gbarrel2 type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP2;
		explode wake3 type BITMAPONLY | BITMAP3;
		explode wake4 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1a type BITMAPONLY | BITMAP4;
		explode barrel1b type BITMAPONLY | BITMAP5;
		explode barrel1c type BITMAPONLY | BITMAP5;
		explode barrel1d type BITMAPONLY | BITMAP4;
		explode sleeve1a type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode sleeve1bc type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode sleeve1d type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode bbarrel3a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel3b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode bbarrel3c type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode bbarrel2a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode bbarrel2b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode bbarrel2c type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel3a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel3b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode bbarrel3c type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode base type BITMAPONLY | BITMAP2;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode bturret1 type BITMAPONLY | BITMAP2;
		explode bturret2 type BITMAPONLY | BITMAP2;
		explode bturret3 type BITMAPONLY | BITMAP2;
		explode gturret type BITMAPONLY | BITMAP3;
		explode gsleeve type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode gbarrel1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode gbarrel2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP2;
		explode wake3 type BITMAPONLY | BITMAP3;
		explode wake4 type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel1d type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode sleeve1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve1bc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode sleeve1d type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode bbarrel3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrel3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bbarrel3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode bbarrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode bbarrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bbarrel2c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrel3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrel3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bbarrel3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode base type BITMAPONLY | BITMAPNUKE;
	explode turret1 type BITMAPONLY | BITMAP2;
	explode bturret1 type BITMAPONLY | BITMAP2;
	explode bturret2 type BITMAPONLY | BITMAP2;
	explode bturret3 type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gturret type BITMAPONLY | BITMAP3;
	explode gsleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gbarrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gbarrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type BITMAPONLY | BITMAP1;
	explode wake2 type BITMAPONLY | BITMAP2;
	explode wake3 type BITMAPONLY | BITMAP3;
	explode wake4 type BITMAPONLY | BITMAP4;
	return (0);
}
