#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Flare1, Flare2, Flare3, Flare4, emit1, emit2, emit3, emit4,
       gun1, gun2, gun3, gun4, turret, missileBox, counterbox, counterflak,  
       wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8, 
       base, GP;

static-var Gun_1, Gun_2, depth_3, Busy_4, restore_5, reset_6, bMoving, bAiming;

RestoreAfterDelay()
{
	sleep 3000;
	set-signal-mask 0;
	if( !Restore_5 )
	{
		bAiming = 0;
		turn missilebox to x-axis <0> speed <100>;
		turn turret to x-axis <0> speed <200>;
		signal 2;
		signal 4;
	}
	Reset_6 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Restore_5 AND ( !Reset_6 ) )
		{
			Restore_5 = FALSE;
			Reset_6 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( busy_4 )
	{
		return(0);
	}
	busy_4 = 1;
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	busy_4 = 0;
	return (0);
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( depth_3 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <32>;
			turn counterbox to y-axis get XZ_ATAN(0) speed <32>;
			turn counterflak to y-axis get XZ_ATAN(0) speed <32>;
			if( !bAiming )
			{
				turn turret to y-axis (0 - get XZ_ATAN(0)) speed <32>;
				turn missilebox to y-axis (0 - get XZ_ATAN(0)) speed <32>;
			}
			++count;
			sleep 33;
		}
	}
	return (0);
}

StopMoving()
{
	bMoving = 0;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	depth_3 = Func_Var_1;
	return (0);
}	

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	Gun_1 = 0;
	Gun_2 = 0;
	Busy_4 = 0;
	Restore_5 = 0;
	Reset_6 = 0;
	bMoving = 0;
	bAiming = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 200;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
		turn counterbox to y-axis get XZ_ATAN(0) NOW;
		turn counterflak to y-axis get XZ_ATAN(0) NOW;
	}
	start-script SmokeUnit();
	return (0);
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	bAiming = 1;
	turn turret to y-axis ( heading - get XZ_ATAN(0)) speed <640>;
	turn turret to x-axis <0> - pitch speed <500>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	Restore_5 = 1;
	return (1);
}

FireTertiary()
{
	if( !gun_1 )
	{
		move gun1 to z-axis [-4] now;
		show flare1;
		sleep 150;
		hide flare1;
		move gun1 to z-axis [0] speed [15];
	}
	if( gun_1 == 1 )
	{
		move gun4 to z-axis [-4] now;
		show flare4;
		sleep 150;
		hide flare4;
		move gun4 to z-axis [0] speed [15];
	}
	if( gun_1 == 2 )
	{
		move gun2 to z-axis [-4] now;
		show flare2;
		sleep 150;
		hide flare2;
		move gun2 to z-axis [0] speed [15];
	}
	if( gun_1 > 2 )
	{
		move gun3 to z-axis [-4] now;
		show flare3;
		sleep 150;
		hide flare3;
		move gun3 to z-axis [0] speed [15];
		gun_1 = -1;
	}
	++gun_1;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	bAiming = 1;
	turn missilebox to y-axis ( heading - get XZ_ATAN(0)) speed <360>;
	turn missilebox to x-axis 0 - pitch speed <240>;
	wait-for-turn missilebox around y-axis;
	wait-for-turn missilebox around x-axis;
	Restore_5 = 1;
	return (1);
}

FirePrimary()
{
	++Gun_2;
	if( Gun_2 > 3 )
	{
		Gun_2 = 0;
	}
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = missilebox;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = Gun_1;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = emit1;
	}
	if( gun_2 == 1 )
	{
		piecenum = emit2;
	}
	if( gun_2 == 2 )
	{
		piecenum = emit3;
	}
	if( gun_2 > 2 )
	{
		piecenum = emit4;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( depth_3 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode missilebox type SHATTER | BITMAP2;
			explode gun1 type BITMAPONLY | BITMAP3;
			explode gun2 type BITMAPONLY | BITMAP4;
			explode gun3 type BITMAPONLY | BITMAP5;
			explode gun4 type BITMAPONLY | BITMAP1;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox type SHATTER | BITMAP2;
		explode gun1 type FALL | BITMAP3;
		explode gun2 type FALL | BITMAP4;
		explode gun3 type FALL | BITMAP5;
		explode gun4 type FALL | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox type SHATTER | BITMAP2;
		explode gun1 type FALL | SMOKE | BITMAP3;
		explode gun2 type FALL | SMOKE | BITMAP4;
		explode gun3 type FALL | SMOKE | BITMAP5;
		explode gun4 type FALL | SMOKE | BITMAP1;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode missilebox type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}