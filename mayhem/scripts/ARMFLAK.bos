#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, Xturret, barrel1, barrel2, Yturret;

static-var  Gun_1;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( ( get BUILD_PERCENT_LEFT ) )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

/*NanoFrameInit()
{
	hide flare1;
	hide flare2;
}

Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	hide flare1;
	hide flare2;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache Yturret;
	dont-cache Xturret;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade Yturret;
	dont-shade Xturret;
	Gun_1 = 0;
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn Xturret to y-axis heading speed <750>;
	turn Yturret to x-axis ( <0> - pitch ) speed <600>;
	wait-for-turn Xturret around y-axis;
	wait-for-turn Yturret around x-axis;
	return (1);
}

FirePrimary()
{
	if( !Gun_1 )
	{
		move barrel1 to z-axis [-4] now;
		show flare1;
		sleep 150;
		hide flare1;
		move barrel1 to z-axis [0] speed [15];
	}
	if( Gun_1 )
	{
		move barrel2 to z-axis [-4] now;
		show flare2;
		sleep 150;
		hide flare2;
		move barrel2 to z-axis [0] speed [15];
	}
	Gun_1 = ( !Gun_1 );
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = Gun_1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = Xturret;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = Xturret;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode Xturret type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode Yturret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode Xturret type BITMAPONLY | BITMAP2;
		explode barrel1 type FALL | BITMAP3;
		explode barrel2 type FALL | BITMAP4;
		explode Yturret type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode Xturret type BITMAPONLY | BITMAP2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Yturret type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode Xturret type BITMAPONLY | BITMAP2;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Yturret type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}