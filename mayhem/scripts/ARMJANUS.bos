#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  rocket1, rocket2, turret, launcher, base;

static-var  gun_1, reload_2, busy_3;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0); 
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( busy_3 )
	{
		return(0);
	}
	busy_3 = 1;
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	sleep 100;
	busy_3 = 0;
}

Create()
{
	hide rocket1;
	hide rocket2;
	gun_1 = 0;
	reload_2 = 0;
	busy_3 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 6000;
	turn turret to y-axis <0> speed <80>;
	turn launcher to x-axis <0> speed <30>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <100>;
	turn launcher to x-axis <0> - pitch speed <40>;
	while( reload_2 )
	{
		sleep 200;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		gun_1 = 1;
		return (0);
	}
	reload_2 = 1;
	sleep 3800;
	gun_1 = 0;
	reload_2 = 0;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide rocket1;
	hide rocket2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode rocket1 type BITMAPONLY | BITMAP3;
		explode rocket2 type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode rocket1 type FALL | BITMAP3;
		explode rocket2 type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
