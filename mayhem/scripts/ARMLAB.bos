#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, door4A, door3A, door2A, door1A,
       stand1, stand2, nano2, nano1, door1, door2, door3, door4,
       spot;

static-var  Nano_1, Request_2, State_3, Busy_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState()
{
	while( ( !Busy_4 ) AND ( Request_2 != State_3 ) )
	{
		Busy_4 = 1;
		if( Request_2 )
		{
			dont-cache beam1;
			dont-cache beam2;
			dont-cache door1;
			dont-cache door1A;
			dont-cache door2;
			dont-cache door2A;
			dont-cache door3;
			dont-cache door3A;
			dont-cache door4;
			dont-cache door4A;
			dont-cache nano1;
			dont-cache nano2;
			dont-cache pad;
			dont-cache stand1;
			dont-cache stand2;
			move door4A to z-axis [0.000] now;
			move door4A to z-axis [-9.600] speed [9.620];
			move door3A to z-axis [0.000] now;
			move door3A to z-axis [-9.500] speed [9.520];
			move door2A to z-axis [0.000] now;
			move door2A to z-axis [10.000] speed [10.000];
			move door1A to z-axis [0.000] now;
			move door1A to z-axis [9.900] speed [9.920];
			turn stand1 to z-axis <0.000> now;
			turn stand1 to z-axis <35.099> speed <35.176>;
			turn stand2 to z-axis <0.000> now;
			turn stand2 to z-axis <-35.549> speed <35.626>;
			turn nano2 to z-axis <0.000> now;
			turn nano2 to z-axis <102.165> speed <102.379>;
			turn nano1 to z-axis <0.000> now;
			turn nano1 to z-axis <-100.819> speed <101.000>;
			sleep 998;
			move door1 to x-axis [7.500] speed [7.440];
			move door2 to x-axis [-7.500] speed [7.440];
			move door3 to x-axis [7.500] speed [7.440];
			move door4 to x-axis [-7.500] speed [7.440];
			sleep 1056;
			set YARD_OPEN to 1;
			while( !get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30.000>;
			set INBUILDSTANCE to 1;
			State_3 = 1;
		}
		if( !Request_2 )
		{
			State_3 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			spin pad around y-axis speed <0.000>;
			move door1 to x-axis [7.500] now;
			move door1 to x-axis [0.000] speed [7.520];
			move door2 to x-axis [-7.500] now;
			move door2 to x-axis [0.000] speed [7.520];
			move door3 to x-axis [7.500] now;
			move door3 to x-axis [0.000] speed [7.520];
			move door4 to x-axis [-7.500] now;
			move door4 to x-axis [0.000] speed [7.520];
			move door4A to z-axis [-9.600] now;
			move door3A to z-axis [-9.500] now;
			move door2A to z-axis [10.000] now;
			move door1A to z-axis [9.900] now;
			turn stand1 to z-axis <35.099> now;
			turn stand2 to z-axis <-35.549> now;
			turn nano2 to z-axis <102.165> now;
			turn nano1 to z-axis <-100.819> now;
			sleep 998;
			move door4A to z-axis [0.000] speed [9.520];
			move door3A to z-axis [0.000] speed [9.420];
			move door2A to z-axis [0.000] speed [9.920];
			move door1A to z-axis [0.000] speed [9.820];
			turn stand1 to z-axis <0.000> speed <34.830>;
			turn stand2 to z-axis <0.000> speed <35.269>;
			turn nano2 to z-axis <0.000> speed <101.357>;
			turn nano1 to z-axis <0.000> speed <100.000>;
			sleep 1056;
			cache beam1;
			cache beam2;
			cache door1;
			cache door1A;
			cache door2;
			cache door2A;
			cache door3;
			cache door3A;
			cache door4;
			cache door4A;
			cache nano1;
			cache nano2;
			cache pad;
			cache stand1;
			cache stand2;
		}
		Busy_4 = 0;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade beam1;
	dont-shade beam2;
	dont-shade door1;
	dont-shade door1A;
	dont-shade door2;
	dont-shade door2A;
	dont-shade door3;
	dont-shade door3A;
	dont-shade door4;
	dont-shade door4A;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade stand1;
	dont-shade stand2;
	Nano_1 = 0;
	Request_2 = 0;
	State_3 = 0;
	Busy_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = !Nano_1;
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	Request_2 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	Request_2 = 0;
	sleep 8000;
	set-signal-mask 0;
	if( !Request_2 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = spot;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door1A type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		explode door2A type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP3;
		explode door3A type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode door4A type BITMAPONLY | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode stand1 type BITMAPONLY | BITMAP5;
		explode stand2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode door1 type FALL | BITMAP4;
		explode door1A type FALL | BITMAP5;
		explode door2 type FALL | BITMAP1;
		explode door2A type FALL | BITMAP2;
		explode door3 type FALL | BITMAP3;
		explode door3A type FALL | BITMAP4;
		explode door4 type FALL | BITMAP5;
		explode door4A type FALL | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode stand1 type BITMAPONLY | BITMAP5;
		explode stand2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type SHATTER | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door3A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door4A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode stand1 type BITMAPONLY | BITMAP5;
		explode stand2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door3A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door4A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode nano1 type BITMAPONLY | BITMAP2;
	explode nano2 type BITMAPONLY | BITMAP3;
	explode pad type BITMAPONLY | BITMAP4;
	explode stand1 type BITMAPONLY | BITMAP5;
	explode stand2 type BITMAPONLY | BITMAP1;
}
