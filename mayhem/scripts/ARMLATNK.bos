#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lflare, lturret, rflare1, lgun, rturret, rgun;

static-var  bAiming, restore_2, aa_3, delay_4;

RestoreAfterDelay()
{
	sleep 5000;
	aa_3 = 0;
	if( !bAiming )
	{
		turn lturret to y-axis <0> speed <90>;
		turn lgun to x-axis <0> speed <50>;
		turn rturret to y-axis <0> speed <90>;
		turn rgun to x-axis <0> speed <50>;
		signal 2;
		signal 4;
		signal 16;
	}
	restore_2 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( bAiming AND ( !restore_2 ) )
		{
			bAiming = FALSE;
			restore_2 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

Create()
{
	hide lflare;
	bAiming = FALSE;
	restore_2 = 0;
	aa_3 = 0;
	delay_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

AimTertiary(heading, pitch)
{
	aa_3 = 1;
	signal 4;
	signal 16;
	set-signal-mask 0;
	set-signal-mask 4;
	while( delay_4 )
	{
		wait-for-move rgun along z-axis;
	}
	turn rturret to y-axis heading speed <350>;
	turn rgun to x-axis <0> - pitch speed <180>;
	wait-for-turn rturret around y-axis;
	wait-for-turn rgun around x-axis;
	bAiming = TRUE;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 16;
	set-signal-mask 0;
	set-signal-mask 16;
	while( aa_3 OR delay_4 )
	{
		sleep 200;
		wait-for-move rgun along z-axis;
	}
	turn rturret to y-axis heading speed <350>;
	turn rgun to x-axis <0> - pitch speed <180>;
	wait-for-turn rturret around y-axis;
	wait-for-turn rgun around x-axis;
	bAiming = TRUE;
	return (1);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn lturret to y-axis heading speed <200>;
	turn lgun to x-axis <0> - pitch speed <80>;
	wait-for-move lgun along z-axis;
	wait-for-turn lturret around y-axis;
	wait-for-turn lgun around x-axis;
	bAiming = TRUE;
	return (1);
}

FirePrimary()
{
	show lflare;
	move lgun to z-axis [0.15] NOW;
	move lgun to z-axis [0] speed [0.1];
	sleep 200;
	hide lflare;
	wait-for-move lgun along z-axis;
}

FireTertiary()
{
	delay_4 = 1;
	move rgun to z-axis [-0.19] NOW;
	move rgun to z-axis [0] speed [0.1];
	wait-for-move rgun along z-axis;
	aa_3 = 0;
	delay_4 = 0;
}

FireSecondary()
{
	delay_4 = 1;
	move rgun to z-axis [-0.19] NOW;
	move rgun to z-axis [0] speed [0.1];
	wait-for-move rgun along z-axis;
	delay_4 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = lturret;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = rturret;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = rturret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = lflare;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = rflare1;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = rflare1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = lturret;
	return (0);
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode lturret type BITMAPONLY | BITMAP2;
		explode lgun type BITMAPONLY | BITMAP3;
		explode rturret type BITMAPONLY | BITMAP4;
		explode rgun type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode lturret type SHATTER | BITMAP2;
		explode lgun type FALL | BITMAP3;
		explode rturret type SHATTER | BITMAP4;
		explode rgun type FALL | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode lturret type SHATTER | BITMAP2;
		explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rturret type SHATTER | BITMAP4;
		explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode lturret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rturret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
