#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, sleeve, barrel;

static-var  delay_1;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.00>;
	turn base to z-axis anglez speed <50.00>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.00> speed <20.00>;
	turn base to x-axis <0.00> speed <20.00>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.00>;
	turn base to x-axis Func_Var_1 speed <105.00>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.00> speed <30.00>;
	turn base to x-axis <0.00> speed <30.00>;
}

Create()
{
	hide flare;
	delay_1 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 10000;
	set-signal-mask 0;
	turn turret to y-axis <0.00> speed <50.00>;
	turn sleeve to x-axis <0.00> speed <30.00>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <50.00>;
	turn sleeve to x-axis <0.00> - pitch speed <30.00>;
	while( delay_1 )
	{
		sleep 200;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	delay_1 = 1;
	show flare;
	move barrel to z-axis [-3] speed [500.00];
	sleep 150;
	hide flare;
	move barrel to z-axis [0.00] speed [3];
	sleep 2850;
	delay_1 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode barrel type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode sleeve type SHATTER | BITMAP3;
		explode barrel type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve type SHATTER | BITMAP3;
		explode barrel type BITMAPONLY | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode barrel type BITMAPONLY | BITMAP4;
}
