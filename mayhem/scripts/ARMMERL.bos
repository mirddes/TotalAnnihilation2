#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rocket, door1, door2, plate, arm;

static-var  Ready_1, Busy_2, Firing_3, hit_4;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( !hit_4 )
	{
		hit_4 = 1;
		turn base to z-axis Func_Var_2 speed <105.00>;
		turn base to x-axis Func_Var_1 speed <105.00>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.00> speed <30.00>;
		turn base to x-axis <0.00> speed <30.00>;
		sleep 100;
		hit_4 = 0;
	}
}

Create()
{
	Ready_1 = 0;
	Busy_2 = 0;
	Firing_3 = 0;
	Hit_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	set ARMORED to 1;
	start-script SmokeUnit();
}

Closeup()
{
	Busy_2 = 1;
	Ready_1 = 0;
	move plate to y-axis [3.10] now;
	move door1 to y-axis [-2.55] now;
	move door1 to z-axis [0.00] now;
	move door2 to y-axis [-2.60] now;
	move door2 to z-axis [0.00] now;
	move rocket to y-axis [0.00] now;
	move rocket to z-axis [0.00] now;
	turn door1 to z-axis <-89.12> now;
	turn door2 to z-axis <90.00> now;
	turn arm to x-axis <-89.80> now;
	turn arm to x-axis <0.00> speed <175.41>;
	sleep 512;
	move plate to y-axis [0.00] speed [5.98];
	sleep 518;
	move door1 to y-axis [0.00] speed [4.90];
	move door2 to y-axis [0.00] speed [5.00];
	sleep 520;
	turn door1 to z-axis <0.00> speed <171.70>;
	turn door2 to z-axis <0.00> speed <173.45>;
	set ARMORED to 1;
	sleep 3000;
	Busy_2 = 0;
}

RestoreAfterDelay()
{
	sleep 7500;
	set-signal-mask 0;
	if( Ready_1 )
	{
		start-script Closeup();
	}
}

AimPrimary(heading, pitch)
{
	while( Busy_2 OR Firing_3 )
	{
		sleep 300;
	}
	while( !Ready_1 )
	{
		Busy_2 = 1;
		show rocket;
		set ARMORED to 0;
		move door1 to z-axis [0.00] now;
		move door2 to z-axis [0.00] now;
		move rocket to y-axis [0.00] now;
		move rocket to z-axis [0.00] now;
		turn door1 to z-axis <0.00> now;
		turn door1 to z-axis <-90.00> speed <143.51>;
		turn door2 to z-axis <0.00> now;
		turn door2 to z-axis <90.00> speed <144.96>;
		sleep 621;
		move door1 to y-axis [-2.55] speed [4.07];
		move door2 to y-axis [-2.60] speed [4.15];
		sleep 627;
		move plate to y-axis [3.10] speed [4.94];
		sleep 628;
		move rocket to y-axis [0.00] speed [0.00];
		move rocket to z-axis [0.00] speed [0.00];
		turn arm to x-axis <-90.00> speed <143.31>;
		sleep 700;
		Ready_1 = 1;
		Busy_2 = 0;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	Firing_3 = 1;
	hide rocket;
	sleep 400;
	start-script Closeup();
	sleep 7500;
	Firing_3 = 0;
}

QueryPrimary(piecenum)
{
	piecenum = rocket;
}

SweetSpot(piecenum)
{
	piecenum = door1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode rocket type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode plate type BITMAPONLY | BITMAP5;
		explode arm type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode rocket type SHATTER | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP4;
		explode plate type BITMAPONLY | BITMAP5;
		explode arm type FALL | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode rocket type SHATTER | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode plate type BITMAPONLY | BITMAP5;
		explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode rocket type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode plate type BITMAPONLY | BITMAP5;
	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
