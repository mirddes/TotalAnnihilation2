#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, base, box, wake1, wake2, wake3, wake4, wake5,
       wake6, wake7, wake8, GP;

static-var  State_1, Depth_2, Request_3, Busy_4;



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
}

RequestState()
{
	while( ( !Busy_4 ) AND Request_3 != State_1 )
	{
		Busy_4 = 1;
		if( Request_3 AND ( !State_1 ) )
		{
			turn base to x-axis <0> now;
			turn base to x-axis <1> speed <3>;
			turn box to x-axis <0> now;
			turn box to x-axis <-20> speed <58>;
			sleep 352;
			turn base to x-axis <0> speed <3>;
			turn box to x-axis <-70> speed <141>;
			sleep 354;
			turn base to x-axis <-3> speed <9>;
			turn box to x-axis <-93> speed <64>;
			sleep 353;
			turn base to x-axis <0> speed <9>;
			turn box to x-axis <-90> speed <8>;
			sleep 371;
			State_1 = 1;
		}
		if( ( !Request_3 ) AND State_1 )
		{
			State_1 = 0;
			turn base to x-axis <0> now;
			turn base to x-axis <-3> speed <12>;
			turn box to x-axis <-90> now;
			turn box to x-axis <-93> speed <12>;
			sleep 262;
			turn base to x-axis <0> speed <11>;
			turn box to x-axis <-70> speed <86>;
			sleep 266;
			turn base to x-axis <1> speed <4>;
			turn box to x-axis <-20> speed <189>;
			sleep 264;
			turn base to x-axis <0> speed <4>;
			turn box to x-axis <0> speed <76>;
			sleep 280;
		}
		Busy_4 = 0;
	}
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( Depth_2 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <28>;
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	Depth_2 = Func_Var_1;
}

Create()
{
	State_1 = 0;
	Request_3 = 0;
	Busy_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 12500;
	set-signal-mask 0;
	Request_3 = FALSE;
	start-script RequestState();
}

AimPrimary(heading, pitch)
{
	while( !State_1 )
	{
		Request_3 = TRUE;
		start-script RequestState();
		sleep 300;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
}

AimFromPrimary(piecenum)
{
	piecenum = box;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( Depth_2 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode box type BITMAPONLY | BITMAP2;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode box type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode box type SHATTER | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode box type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
