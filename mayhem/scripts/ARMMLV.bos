#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, plate, gun, tire1, tire2, 
       tire3, tire4, post;

static-var  Nano_1, ReqState_2, Aiming_3, On_4, Building_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( TRUE )
	{
		if( ReqState_2 AND !On_4 )
		{
			turn door1 to z-axis <0> now;
			turn door1 to z-axis <-91> speed <195>;
			turn door2 to z-axis <0> now;
			turn door2 to z-axis <90> speed <192>;
	//		sleep 468;
			move door1 to y-axis [-1.85] speed [3];
			move door2 to y-axis [-1.95] speed [4];
			sleep 471;
			move plate to y-axis [2.95] speed [6];
			sleep 495;
			turn gun to y-axis Nano_1 speed <160>;
			wait-for-turn gun around y-axis;
			On_4 = 1;
			sleep Rand(1,500);
			set INBUILDSTANCE to 1;
		}
		if( !ReqState_2 AND On_4 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			turn gun to y-axis <0> speed <160>;
	//		wait-for-turn gun around y-axis;
			move plate to y-axis [2.95] now;
			move plate to y-axis [0] speed [6];
			move door1 to y-axis [-1.85] now;
			move door2 to y-axis [-1.95] now;
			turn door1 to z-axis <-91.35> now;
			turn door2 to z-axis <90.11> now;
			sleep 426;
			move door1 to y-axis [0] speed [4];
			move door2 to y-axis [0] speed [4];
	//		sleep 428;
			turn door1 to z-axis <0> speed <213>;
			turn door2 to z-axis <0> speed <210>;
			sleep 200;
		}
		sleep 250;
	}
	return (0);
}

Create()
{
	Nano_1 = 0;
	ReqState_2 = 0;
	Aiming_3 = 0;
	On_4 = 0;
	Building_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script RequestState();
	return (0);
}

StartBuilding(Func_Var_1)
{
	Building_5 = 1;
	Nano_1 = Func_Var_1;
	ReqState_2 = 1;
	return (0);
}

StopBuilding()
{
	Building_5 = 0;
	sleep 3000;
	if( !Building_5 AND !Aiming_3 )
	{
		ReqState_2 = 0;
	}
	return (0);
}

StartMoving()
{
	spin tire1 around x-axis speed <150>;
	spin tire2 around x-axis speed <150>;
	spin tire3 around x-axis speed <150>;
	spin tire4 around x-axis speed <150>;
	return (0);
}

StopMoving()
{
	spin tire1 around x-axis speed <0>;
	spin tire2 around x-axis speed <0>;
	spin tire3 around x-axis speed <0>;
	spin tire4 around x-axis speed <0>;
	return (0);
}

RestorAfterDelay()
{
	sleep 3000;
	Aiming_3 = 0;
	if( !Building_5 )
	{
		ReqState_2 = 0;
	}
	return (0);
}		

AimPrimary(heading, pitch)
{
	Aiming_3 = 1;
	signal 2;
	set-signal-mask 2;
	while( !On_4 )
	{
		while( Building_5 )
		{
			sleep 500;
		}
		ReqState_2 = 1;
		heading = nano_1;
		sleep 250;
	}
	turn gun to y-axis heading speed <160>;
	wait-for-turn gun around y-axis;
	start-script RestorAfterDelay();
	return(1);
}
		
AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = beam;
	return (0);
}

FirePrimary()
{
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Nano_1 = ( 0 - Func_Var_1 );
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = plate;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode plate type BITMAPONLY | BITMAP5;
		explode gun type BITMAPONLY | BITMAP1;
		explode tire1 type BITMAPONLY | BITMAP2;
		explode tire2 type BITMAPONLY | BITMAP3;
		explode tire3 type BITMAPONLY | BITMAP4;
		explode tire4 type BITMAPONLY | BITMAP5;
		explode post type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode plate type BITMAPONLY | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode tire1 type FALL | BITMAP2;
		explode tire2 type FALL | BITMAP3;
		explode tire3 type FALL | BITMAP4;
		explode tire4 type FALL | BITMAP5;
		explode post type FALL | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode plate type BITMAPONLY | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode tire1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode tire2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode tire3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode tire4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode post type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode beam type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP4;
	explode plate type BITMAPONLY | BITMAP5;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode tire1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode tire2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode tire3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode tire4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode post type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}