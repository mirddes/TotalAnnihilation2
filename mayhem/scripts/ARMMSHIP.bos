#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rocket1, rocket2, flare1, flare2, flare3, base, launcher1, launcher2,
       door1, door2, plate, wake1, wake2, turret1, turret2, dish;

static-var  gun_1, state_2, gun_3, on_4, request_5,
            busy_6, restore_7, reset_8, reload_9;
            
RequestState()
{
	if( busy_6 )
	{
		return (0);
	}
	busy_6 = 1;
	while( request_5 != state_2 )
	{
		if( request_5 )
		{
			move door1 to x-axis [0] now;
			move door1 to x-axis [4.20] speed [7];
			move door2 to x-axis [0] now;
			move door2 to x-axis [-4.35] speed [7.25];
			set ARMORED to 0;
			sleep 600;
			move plate to y-axis [4.35] speed [7.25];
			sleep 600;
			turn launcher1 to x-axis <-90> speed <120>;
			sleep 800;
			state_2 = 1;
		}
		if( !request_5 )
		{
			state_2 = 0;
			move plate to y-axis [4.35] now;
			move door1 to x-axis [4.20] now;
			move door2 to x-axis [-4.35] now;
			move launcher1 to x-axis [0] now;
			move launcher1 to x-axis [0] speed [0];
			turn launcher1 to x-axis <-90> now;
			turn launcher1 to x-axis <0> speed <120>;
			sleep 750;
			move plate to y-axis [0] speed [7.25];
			sleep 600;
			move door1 to x-axis [0] speed [7];
			move door2 to x-axis [0] speed [7.25];
			set ARMORED to 1;
			sleep 600;
			gun_1 = 0;
			show rocket1;
			show rocket2;
		}
	}
	busy_6 = 0;
	return (0);
}

RestoreAfterDelay()
{
	sleep 10000;
	if( !reset_8 )
	{
		turn launcher2 to y-axis <0> speed <120>;
		turn launcher2 to x-axis <0> speed <75>;
		request_5 = 0;
		start-script RequestState();
		signal 2;
		signal 4;
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		if( reset_8 and ( !restore_7 ) )
		{
			reset_8 = 0;
			restore_7 = 1;
		}
		sleep sleeptime;
		if( !reset_8 AND restore_7 )
		{
			restore_7 = 0;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	state_2 = 0;
	gun_1 = rocket1;
	gun_3 = rocket1;
	on_4 = 1;
	request_5 = 0;
	busy_6 = 0;
	restore_7 = 0;
	reset_8 = 0;
	reload_9 = 0;
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	/*if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var target,lasttarget;
		lasttarget=0;
		while (1)
		{
			if ((get CURRENT_ORDER_TYPE) == 6)
			{
				target=get CURRENT_ORDER_TARGET_ID;
				while ((get CURRENT_ORDER_TYPE) == 6)
				{
					target=get CURRENT_ORDER_TARGET_ID;
					if (target != lasttarget)
					{
						get LOCAL_SHARED_DATA(1,20 + (get UNIT_TEAM(get MY_ID)),target);
					}
					lasttarget=target;
					sleep 500;
				}
				if ((get CURRENT_ORDER_TYPE) == 41)
				{
					target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					while (!(get UNIT_XZ(target)))
					{
						sleep 500;
						target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					}
					get ORDER_UNIT_UNIT(6,get MY_ID,target,0);
				}
			}
			sleep 500;
		}
	}*/
	return (0);
}

Activate()
{
	on_4 = 1;
	spin dish around y-axis speed <120>;
	set-signal-mask 0;
	return (0);
}

Deactivate()
{
	stop-spin dish around y-axis;
	turn dish to y-axis <0> speed <75>;
	on_4 = 0;
	request_5 = 0;
	start-script RequestState();
	signal 2;
	return (0);
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	return (0);
}

AimPrimary(heading, pitch)
{
	while( ( !on_4 ) OR reload_9 )
	{
		sleep 250;
	}
	while( !state_2 OR !request_5 )
	{
		request_5 = 1;
		start-script RequestState();
		sleep 250;
	}
	signal 2;
	set-signal-mask 2;
	reset_8 = 1;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn launcher2 to y-axis heading speed <250>;
	turn launcher2 to x-axis <0> - pitch speed <130>;
	wait-for-turn launcher2 around y-axis;
	wait-for-turn launcher2 around x-axis;
	reset_8 = 1;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		hide rocket1;
		gun_1 = rocket2;
		return (0);
	}
	reload_9 = 1;
	hide rocket2;
	sleep 1000;
	request_5 = 0;
	start-script RequestState();
	sleep 7000;
	gun_1 = rocket1;
	reload_9 = 0;
	show rocket2;
	return (0);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_3 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	if( gun_3 == 2 )
	{
		show flare3;
		sleep 150;
		hide flare3;
	}
	++gun_3;
	if( gun_3 > 2 )
	{
		gun_3 = rocket1;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = launcher1;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = launcher2;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_3 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_3 == 2 )
	{
		piecenum = flare3;
	}
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide wake1;
	hide wake2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher1 type BITMAPONLY | BITMAP2;
		explode launcher2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode plate type BITMAPONLY | BITMAP1;
		explode rocket1 type BITMAPONLY | BITMAP2;
		explode rocket2 type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher1 type SHATTER | BITMAP2;
		explode launcher2 type SHATTER | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode plate type BITMAPONLY | BITMAP1;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret1 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode turret2 type FALL | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode launcher1 type SHATTER | BITMAP2;
		explode launcher2 type SHATTER | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode plate type BITMAPONLY | BITMAP1;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode launcher1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode launcher2 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode plate type BITMAPONLY | BITMAP1;
	explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
