#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, platform, door1, door2, plate1, plate2, nano2, nano1;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ( ReqState_3 != On_4 ) )
	{
		Busy_5 = 1;
		if( ReqState_3 )
		{
			dont-cache door1;
			dont-cache door2;
			dont-cache nano1;
			dont-cache nano2;
			dont-cache pad;
			dont-cache plate1;
			dont-cache plate2;
			dont-cache platform;
			move platform to y-axis [0] now;
			move platform to y-axis [11.65] speed [15.37];
			sleep 758;
			turn door1 to z-axis <-90> speed <231.42>;
			turn door2 to z-axis <90> speed <231.42>;
			sleep 389;
			move door1 to y-axis [-7.40] speed [19];
			move door2 to y-axis [-7.30] speed [18.77];
	//		sleep 389;
			move plate1 to y-axis [10] speed [25.64];
			move plate2 to y-axis [10] speed [25.64];
	//		sleep 390;
			move nano2 to y-axis [5.60] speed [14.29];
			move nano1 to y-axis [5.60] speed [14.29];
			sleep 392;
			turn nano2 to z-axis <115.37> speed <297.35>;
			turn nano1 to z-axis <-115.37> speed <297.35>;
			sleep 815;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30>;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			spin pad around y-axis speed <0>;
			move platform to y-axis [11.65] now;
			move plate1 to y-axis [10] now;
			move door1 to y-axis [-7.40] now;
			move plate2 to y-axis [10] now;
			move door2 to y-axis [-7.30] now;
			move nano2 to y-axis [5.60] now;
			move nano1 to y-axis [5.60] now;
			turn door1 to z-axis <-90> now;
			turn door2 to z-axis <90> now;
			turn nano2 to z-axis <115.37> now;
			turn nano2 to z-axis <0> speed <246.52>;
			turn nano1 to z-axis <-115.37> now;
			turn nano1 to z-axis <0> speed <246.52>;
			sleep 468;
			move nano2 to y-axis [0] speed [11.89];
			move nano1 to y-axis [0] speed [11.89];
	//		sleep 471;
			move plate1 to y-axis [0] speed [21.23];
			move plate2 to y-axis [0] speed [21.23];
	//		sleep 471;
			move door1 to y-axis [0] speed [15.68];
			move door2 to y-axis [0] speed [15.47];
			sleep 472;
			turn door1 to z-axis <0> speed <189.92>;
			turn door2 to z-axis <0> speed <189.92>;
			sleep 474;
			move platform to y-axis [0] speed [15.35];
			sleep 806;
			cache door1;
			cache door2;
			cache nano1;
			cache nano2;
			cache pad;
			cache plate1;
			cache plate2;
			cache platform;
		}
		Busy_5 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade plate1;
	dont-shade plate2;
	dont-shade platform;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 5000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	explode base type BITMAPONLY | BITMAP1;
	explode pad type BITMAPONLY | BITMAP2;
	explode beam1 type BITMAPONLY | BITMAP3;
	explode beam2 type BITMAPONLY | BITMAP4;
	explode platform type BITMAPONLY | BITMAP5;
	explode door1 type BITMAPONLY | BITMAP1;
	explode door2 type BITMAPONLY | BITMAP2;
	explode plate1 type BITMAPONLY | BITMAP3;
	explode plate2 type BITMAPONLY | BITMAP4;
	explode nano2 type BITMAPONLY | BITMAP5;
	explode nano1 type BITMAPONLY | BITMAP1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	return (0);
}