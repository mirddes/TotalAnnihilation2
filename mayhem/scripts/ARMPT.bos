#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, base, turret, misturret, wake1, wake2, barrel1, barrel2;

static-var  Gun_1, Reset_3, Busy_4, aa_5, delay_6;

RestoreAfterDelay()
{
	sleep 5000;
	if( !Reset_3 )
	{
		turn turret to y-axis <0> speed <35>;
		turn turret to x-axis <0> speed <15>;
		turn misturret to y-axis <0> speed <100>;
		turn misturret to x-axis <0> speed <50>;
		move misturret to y-axis [0] speed [0.5];
//		wait-for-turn turret around y-axis;
//		wait-for-turn turret around x-axis;
		signal 2;
		signal 4;
		aa_5 = 0;
	}
	Busy_4 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Reset_3 and !Busy_4 )
		{
			Reset_3 = 0;
			Busy_4 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	Gun_1 = 0;
	Reset_3 = 0;
	Busy_4 = 0;
	aa_5 = 0;
	delay_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	move misturret to y-axis [1] speed [10];
	wait-for-move barrel2 along z-axis;
	turn turret to y-axis heading speed <115>;
	turn turret to x-axis ( <0> - pitch ) speed <45>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	Reset_3 = 1;
	return (1);
}

AimTertiary(heading, pitch)
{
	aa_5 = 1;
	signal 4;
	set-signal-mask 4;
	move misturret to y-axis [1] speed [10];
	while( delay_6 )
	{
		turn misturret to y-axis heading speed <280>;
		turn misturret to x-axis ( <0> - pitch ) speed <210>;
		sleep 200;
	}
	turn misturret to y-axis heading speed <280>;
	turn misturret to x-axis ( <0> - pitch ) speed <210>;
	wait-for-turn misturret around y-axis;
	wait-for-turn misturret around x-axis;
//	start-script RestoreAfterDelay();
	Reset_3 = 1;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	move misturret to y-axis [1] speed [10];
	while( aa_5 or delay_6 )
	{
		if( !aa_5 )
		{
			turn misturret to y-axis heading speed <280>;
			turn misturret to x-axis ( <0> - pitch ) speed <210>;
		}
		sleep 200;
	}
	turn misturret to y-axis heading speed <280>;
	turn misturret to x-axis ( <0> - pitch ) speed <210>;
	wait-for-turn misturret around y-axis;
	wait-for-turn misturret around x-axis;
//	start-script RestoreAfterDelay();
	Reset_3 = 1;
	return (1);
}

FirePrimary()
{
	if( !Gun_1 )
	{
		move barrel1 to z-axis [-1.2] speed [500];
		show flare1;
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0] speed [5];
		sleep 100;
		hide flare1;
		Gun_1 = 1;
		return (0);
	}
	move barrel2 to z-axis [-1.2] speed [500];
	show flare2;
	wait-for-move barrel2 along z-axis;
	move barrel2 to z-axis [0] speed [5];
	sleep 100;
	hide flare2;
	Gun_1 = 0;
	return (0);
//	}
}
FireTertiary()
{
	delay_6 = 1;
	aa_5 = 0;
	sleep 1900;
	delay_6 = 0;
}

FireSecondary()
{
	delay_6 = 1;
	sleep 1900;
	delay_6 = 0;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = misturret;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = misturret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !Gun_1 )
	{
		piecenum = flare1;
	}
	if( Gun_1 )
	{
		piecenum = flare2;
	}
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = flare3;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare3;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide wake1;
	hide wake2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode misturret type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode misturret type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode misturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}