#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, base, turret, wake1, wake2, barrel1,
       barrel2;

static-var  gun_1, Restore_2, Reset_3;

// Signal definitions
#define SIG_MOVE			8


RestoreAfterDelay()
{
	sleep 5000;
	if( !Restore_2 )
	{
		turn turret to y-axis <0> speed <35>;
		turn turret to x-axis <0> speed <15>;
		signal 2;
		signal 4;
	}
	Reset_3 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Restore_2 AND ( !Reset_3 ) )
		{
			Restore_2 = FALSE;
			Reset_3 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	gun_1 = flare1;
	Restore_2 = 0;
	Reset_3 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	return (0);
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	Restore_2 = TRUE;
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = base;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = base;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <70>;
	turn turret to x-axis <0> - pitch speed <30>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	Restore_2 = TRUE;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		move barrel1 to z-axis [-2.400000] speed [500];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0] speed [3];
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_1 )
	{
		move barrel2 to z-axis [-2.400000] speed [500];
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0] speed [3];
		show flare2;
		sleep 150;
		hide flare2;
	}
	gun_1 = !gun_1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide wake1;
	hide wake2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type FALL | BITMAP3;
		explode barrel2 type FALL | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
