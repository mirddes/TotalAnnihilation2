#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  flare1, flare2, base, launcher, turret;

static-var  gun_1, aa_2, delay_3, hit_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( hit_4 )
	{
		return (0);
	}
	hit_4 = 1;
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	sleep 100;
	hit_4 = 0;
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	gun_1 = 0;
	aa_2 = 0;
	delay_3 = 0;
	hit_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 5000;
	aa_2 = 0;
	set-signal-mask 0;
	turn turret to y-axis <0> speed <120>;
	turn launcher to x-axis <0> speed <50>;
	return (0);
}

AimTertiary(heading, pitch)
{
	aa_2 = 1;
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	while( delay_3 )
	{
		sleep 200;
	}
	turn turret to y-axis heading speed <360>;
	turn launcher to x-axis <0> - pitch speed <240>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	while( aa_2 OR delay_3 )
	{
		sleep 200;
	}
	turn turret to y-axis heading speed <360>;
	turn launcher to x-axis <0> - pitch speed <240>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	delay_3 = 1;
	aa_2 = 0;
	if( !gun_1 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		sleep 1800;
	}
	if( gun_1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		sleep 2600;
	}
	gun_1 = !gun_1;
	delay_3 = 0;
	return (0);
}

FirePrimary()
{
	delay_3 = 1;
	if( !gun_1 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		sleep 1800;
	}
	if( gun_1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		sleep 2600;
	}
	gun_1 = !gun_1;
	delay_3 = 0;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = launcher;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type SHATTER | BITMAP2;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type SHATTER | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}
