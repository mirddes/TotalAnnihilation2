#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, sonar1, sonar2, lwing, rwing, sonarholder1, sonarholder2;

static-var  WaterDepth_1, Flying_2;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	flying_2 = 0;
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	flying_2 = 1;
	move rwing to x-axis [0] now;
	move rwing to x-axis [4.60] speed [6.81];
	move lwing to x-axis [-0.20] now;
	move lwing to x-axis [-4.60] speed [6.52];
	sleep 1356;
	if( flying_2 )
	{
		move sonarholder1 to z-axis [4.30] speed [6.33];
		move sonarholder2 to z-axis [4.40] speed [6.48];
		sleep 679;
	}
	if( flying_2 )
	{
		move sonarholder1 to z-axis [4.30] speed [0];
		move sonarholder2 to z-axis [4.40] speed [0];
//		sleep 1360;
		spin sonar1 around y-axis speed <90>;
		spin sonar2 around y-axis speed <90>;
	}
	return (0);
}

Deactivate()
{
	flying_2 = 0;
	move rwing to x-axis [4.60] now;
	move lwing to x-axis [-4.60] now;
	move sonarholder1 to z-axis [4.30] now;
	move sonarholder1 to z-axis [4.30] speed [0];
	move sonarholder2 to z-axis [4.40] now;
	move sonarholder2 to z-axis [4.40] speed [0];
	sleep 620;
	if( !flying_2 )
	{
		move sonarholder1 to z-axis [0] speed [6.86];
		move sonarholder2 to z-axis [0] speed [7];
		sleep 1255;
	}
	if( !flying_2 )
	{
		move rwing to x-axis [0] speed [7.32];
		move lwing to x-axis [-0.20] speed [7];
//		sleep 1259;
		spin sonar1 around y-axis speed <0>;
		spin sonar2 around y-axis speed <0>;
	}
	return (0);
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( WaterDepth_1 == 3 )
		{
			emit-sfx 256 | 3 from sonarholder1;
			emit-sfx 256 | 3 from sonarholder2;
			emit-sfx 256 | 3 from base;
			emit-sfx 256 | 3 from sonar1;
			emit-sfx 256 | 3 from lwing;
			emit-sfx 256 | 3 from sonar2;
			emit-sfx 256 | 3 from rwing;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	signal 2;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	WaterDepth_1 = Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode lwing type BITMAPONLY | BITMAP2;
		explode rwing type BITMAPONLY | BITMAP3;
		explode sonar1 type BITMAPONLY | BITMAP4;
		explode sonar2 type BITMAPONLY | BITMAP5;
		explode sonarholder1 type BITMAPONLY | BITMAP1;
		explode sonarholder2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode lwing type BITMAPONLY | BITMAP2;
		explode rwing type BITMAPONLY | BITMAP3;
		explode sonar1 type SHATTER | BITMAP4;
		explode sonar2 type BITMAPONLY | BITMAP5;
		explode sonarholder1 type FALL | BITMAP1;
		explode sonarholder2 type FALL | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode lwing type BITMAPONLY | BITMAP2;
		explode rwing type BITMAPONLY | BITMAP3;
		explode sonar1 type SHATTER | BITMAP4;
		explode sonar2 type BITMAPONLY | BITMAP5;
		explode sonarholder1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode sonarholder2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode lwing type BITMAPONLY | BITMAP2;
	explode rwing type BITMAPONLY | BITMAP3;
	explode sonar1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode sonar2 type BITMAPONLY | BITMAP5;
	explode sonarholder1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode sonarholder2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}