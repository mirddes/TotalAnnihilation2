#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  weapon1, weapon2, base, wake1, wake2, LWing, RWing;

static-var  Static_Var_2, Static_Var_3;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MoveRate2()
{
	if( ( Rand(1,10) == 1 ) AND ( !Static_Var_3 ) )
	{
		Static_Var_3 = 1;
		turn base to z-axis <240> speed <120>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120> speed <180>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0> speed <120>;
		Static_Var_3 = 0;
	}
	return (0);
}


Create()
{
	start-script SmokeUnit();
	return (0);
}

Activate()
{
//		turn LWing to y-axis <0> now;
		turn LWing to y-axis <41.36> speed <59.94>;
//		turn RWing to y-axis <0> now;
		turn RWing to y-axis <-41.36> speed <59.94>;
//		sleep 700;
	return (0);
}

Deactivate()
{
//		turn LWing to y-axis <41.36> now;
		turn LWing to y-axis <0> speed <41.77>;
//		turn RWing to y-axis <-41.36> now;
		turn RWing to y-axis <0> speed <41.77>;
//		sleep 1000;
	return (0);
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( Static_Var_2 == 3 )
		{
			emit-sfx 256 | 3 from wake1;
			emit-sfx 256 | 3 from wake2;
			emit-sfx 256 | 3 from weapon1;
			emit-sfx 256 | 3 from weapon2;
			emit-sfx 256 | 3 from LWing;
			emit-sfx 256 | 3 from RWing;
			emit-sfx 256 | 3 from base;
		}
		sleep 200;
	}
	return (0);
}

StopMoving()
{
	signal 2;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = weapon1;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = weapon2;
	return (0);
}

//QueryTertiary(piecenum)
//{
//	piecenum = weapon2;
//	return (0);
//}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode weapon1 type BITMAPONLY | BITMAP1;
		explode weapon2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode LWing type BITMAPONLY | BITMAP4;
		explode RWing type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode weapon1 type FALL | BITMAP1;
		explode weapon2 type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode LWing type BITMAPONLY | BITMAP4;
		explode RWing type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode weapon1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode weapon2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode LWing type BITMAPONLY | BITMAP4;
	explode RWing type BITMAPONLY | BITMAP5;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	return (0);
}