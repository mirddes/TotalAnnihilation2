#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  gp, base, flare, turret, counteraim, wake1, wake2, wake3, wake4, 
       wake5, wake6, wake7, wake8;

static-var  WaterDepth_1, Hit_2, aiming_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( !Hit_2 )
	{
		Hit_2 = 1;
		turn base to z-axis Func_Var_2 speed <105>;
		turn base to x-axis Func_Var_1 speed <105>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0> speed <30>;
		turn base to x-axis <0> speed <30>;
		sleep 100;
		Hit_2 = 0;
	}
}	

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( WaterDepth_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <60>;
			turn counteraim to y-axis get XZ_ATAN(0) speed <60>;
			if (!aiming_3)
			{
				turn turret to y-axis (0 - get XZ_ATAN(0)) speed <60>;
			}
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	WaterDepth_1 = Func_Var_1;
}

Create()
{
	hide flare;
	Hit_2 = 0;
	aiming_3 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
		turn counteraim to y-axis get XZ_ATAN(0) NOW;
		turn turret to y-axis (0 - get XZ_ATAN(0)) NOW;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	set-signal-mask 2;
	sleep 3000;
	set-signal-mask 0;
	aiming_3 = 0;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	aiming_3 = 1;
	turn turret to y-axis ( heading - get XZ_ATAN(0)) speed <150>;
	wait-for-move turret along z-axis;
	wait-for-move flare along z-axis;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	move turret to z-axis [-0.12] NOW;
	move turret to z-axis [0] speed [0.5];
	sleep 100;
	hide flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	hide wake1;
	hide wake2;
	hide wake3;
	hide wake4;
	hide wake5;
	hide wake6;
	hide wake7;
	hide wake8;
	if( WaterDepth_1 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode turret type BITMAPONLY | BITMAP2;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
