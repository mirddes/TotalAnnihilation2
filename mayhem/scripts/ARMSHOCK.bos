#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, barrel, sleeve, turret, lupleg1, lupleg2, lupleg3, rupleg1,
       rupleg2, rupleg3, rleg1, rleg2, rleg3, lleg1, lleg2, lleg3,
       head, body, base;

static-var  Moving_1, Reload_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	turn body to x-axis anglex speed <50>;
	turn body to z-axis anglez speed <50>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn body to z-axis <0> speed <8>;
	turn body to x-axis <0> speed <8>;
}

Create()
{
	hide flare;
	dont-cache flare;
	Moving_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

StartMoving()
{
	if( Moving_1 )
	{
		return(0);
	}
	Moving_1 = 1;
	while( Moving_1 )
	{
		move rupleg1 to y-axis [0] speed [6];
		move rupleg3 to y-axis [0] speed [6];
		move lupleg2 to y-axis [0] speed [6];
		turn head to x-axis <-8> speed <18>;
		turn lupleg1 to y-axis <15> speed <72>;
		turn lupleg2 to y-axis <-15> speed <115>;
		turn lupleg3 to y-axis <15> speed <72>;
		turn rupleg1 to y-axis <15> speed <115>;
		turn rupleg2 to y-axis <-15> speed <76>;
		turn rupleg3 to y-axis <15> speed <115>;
		turn lleg2 to x-axis <0> speed <154>;
		turn rleg1 to x-axis <0> speed <154>;
		turn rleg3 to x-axis <0> speed <154>;
		sleep 260;
		if( Moving_1 )
		{
			move rupleg2 to y-axis [1] speed [3];
			move lupleg1 to y-axis [1] speed [3];
			move lupleg3 to y-axis [1] speed [3];
			turn head to x-axis <8> speed <18>;
			turn lupleg1 to y-axis <-10> speed <96>;
			turn lupleg2 to y-axis <5> speed <42>;
			turn lupleg3 to y-axis <-10> speed <96>;
			turn rupleg1 to y-axis <-5> speed <42>;
			turn rupleg2 to y-axis <10> speed <96>;
			turn rupleg3 to y-axis <-5> speed <42>;
			turn lleg1 to x-axis <-15> speed <72>;
			turn lleg3 to x-axis <-15> speed <72>;
			turn rleg2 to x-axis <15> speed <72>;
			sleep 330;
		}
		if( Moving_1 )
		{
			move rupleg2 to y-axis [0] speed [6];
			move lupleg1 to y-axis [0] speed [6];
			move lupleg3 to y-axis [0] speed [6];
			turn head to x-axis <-8> speed <18>;
			turn lupleg1 to y-axis <-15> speed <115>;
			turn lupleg2 to y-axis <15> speed <72>;
			turn lupleg3 to y-axis <-15> speed <115>;
			turn rupleg1 to y-axis <-15> speed <72>;
			turn rupleg2 to y-axis <15> speed <115>;
			turn rupleg3 to y-axis <-15> speed <72>;
			turn lleg1 to x-axis <0> speed <154>;
			turn lleg3 to x-axis <0> speed <154>;
			turn rleg2 to x-axis <0> speed <154>;
			sleep 260;
		}
		if( Moving_1 )
		{
			move rupleg1 to y-axis [1] speed [3];
			move rupleg2 to y-axis [1] speed [3];
			move rupleg1 to y-axis [1] speed [3];
			turn head to x-axis <8> speed <18>;
			turn lupleg1 to y-axis <5> speed <42>;
			turn lupleg2 to y-axis <-10> speed <96>;
			turn lupleg3 to y-axis <5> speed <42>;
			turn rupleg1 to y-axis <10> speed <96>;
			turn rupleg2 to y-axis <-5> speed <42>;
			turn rupleg3 to y-axis <10> speed <96>;
			turn lleg2 to x-axis <15> speed <72>;
			turn rleg1 to x-axis <-15> speed <72>;
			turn rleg3 to x-axis <-15> speed <72>;
			sleep 330;
		}
	}
	move lupleg1 to y-axis [0] speed [2.5];
	move lupleg2 to y-axis [0] speed [2.5];
	move lupleg3 to y-axis [0] speed [2.5];
	move rupleg1 to y-axis [0] speed [2.5];
	move rupleg2 to y-axis [0] speed [2.5];
	move rupleg3 to y-axis [0] speed [2.5];
	turn head to x-axis <0> speed <50>;
	turn lupleg1 to y-axis <0> speed <50>;
	turn lupleg2 to y-axis <0> speed <50>;
	turn lupleg3 to y-axis <0> speed <50>;
	turn rupleg1 to y-axis <0> speed <50>;
	turn rupleg2 to y-axis <0> speed <50>;
	turn rupleg3 to y-axis <0> speed <50>;
	turn rleg1 to x-axis <0> speed <50>;
	turn rleg2 to x-axis <0> speed <50>;
	turn rleg3 to x-axis <0> speed <50>;
	turn lleg1 to x-axis <0> speed <50>;
	turn lleg2 to x-axis <0> speed <50>;
	turn lleg3 to x-axis <0> speed <50>;
}

StopMoving()
{
	Moving_1 = 0;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

RestoreAfterDelay()
{
	sleep 8000;
	set-signal-mask 0;
	turn turret to y-axis <0> speed <40>;
	turn sleeve to x-axis <0> speed <25>;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <45>;
	turn sleeve to x-axis <0> - pitch speed <25>;
	wait-for-move barrel along z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	move barrel to z-axis [-3.3] speed [500];
	move sleeve to z-axis [-1] speed [400];
	sleep 50;
	move barrel to z-axis [0] speed [0.6];
	sleep 100;
	hide flare;
	move sleeve to z-axis [0] speed [1];
	wait-for-move barrel along z-axis;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode barrel type BITMAPONLY | BITMAP3;
		explode sleeve type FALL | BITMAP5;
		explode rupleg1 type BITMAPONLY | BITMAP2;
		explode rupleg2 type BITMAPONLY | BITMAP3;
		explode rupleg3 type BITMAPONLY | BITMAP4;
		explode lupleg1 type BITMAPONLY | BITMAP3;
		explode lupleg2 type BITMAPONLY | BITMAP4;
		explode lupleg3 type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP2;
		explode head type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP4;
		explode body type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | BITMAP4;
		explode sleeve type FALL | BITMAP5;
		explode rupleg1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode rupleg2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode rupleg3 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode lupleg1 type BITMAPONLY | BITMAP3;
		explode lupleg2 type BITMAPONLY | BITMAP4;
		explode lupleg3 type BITMAPONLY | BITMAP2;
		explode rleg1 type BITMAPONLY | BITMAP3;
		explode rleg2 type BITMAPONLY | BITMAP3;
		explode rleg3 type BITMAPONLY | BITMAP3;
		explode lleg1 type BITMAPONLY | BITMAP3;
		explode lleg2 type BITMAPONLY | BITMAP3;
		explode lleg3 type BITMAPONLY | BITMAP3;
		explode turret type SHATTER | BITMAP2;
		explode head type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode sleeve type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode rupleg1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rupleg2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rupleg3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lupleg1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lupleg2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lupleg3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg1 type BITMAPONLY | BITMAP3;
		explode rleg2 type BITMAPONLY | BITMAP3;
		explode rleg3 type BITMAPONLY | BITMAP3;
		explode lleg1 type BITMAPONLY | BITMAP3;
		explode lleg2 type BITMAPONLY | BITMAP3;
		explode lleg3 type BITMAPONLY | BITMAP3;
		explode turret type SHATTER | SMOKE | BITMAP2;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP4;
	explode body type BITMAPONLY | BITMAP1;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rupleg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rupleg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rupleg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lupleg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lupleg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lupleg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rleg3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lleg1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lleg2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
