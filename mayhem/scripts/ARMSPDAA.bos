#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, turret1, turret2, leg1, leg2, leg3, leg4,
       leg5, leg6, base;

static-var  bMoving, restore_delay, walking_3, gun_1, gun_2;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	hide flare1;
	hide flare2;
	bMoving = FALSE;
	walking_3 = FALSE;
	gun_1 = 0;
	gun_2 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	restore_delay = 3000;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0> speed <250>;
	turn turret1 to x-axis <0> speed <90>;
	turn turret2 to y-axis <0> speed <250>;
	turn turret2 to x-axis <0> speed <90>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
}

StartMoving()
{
	bMoving = TRUE;
	if( walking_3 )
	{
		return(0);
	}
	walking_3 = 1;
	while( bMoving )
	{
		turn leg1 to y-axis <43.791209> now;
		turn leg1 to y-axis <0> speed <218.956044>;
		turn leg1 to z-axis <0.604396> now;
		turn leg1 to z-axis <0> speed <3.027473>;
		turn leg2 to z-axis <0> now;
		turn leg2 to z-axis <31.005495> speed <155.104396>;
		turn leg3 to y-axis <34.670330> now;
		turn leg3 to y-axis <34.060440> speed <3.027473>;
		turn leg3 to z-axis <31.615385> now;
		turn leg3 to z-axis <0.604396> speed <155.104396>;
		turn leg4 to y-axis <-40.137363> now;
		turn leg4 to y-axis <-40.137363> speed <0>;
		turn leg4 to z-axis <-31.005495> now;
		turn leg4 to z-axis <-0.604396> speed <152.060440>;
		turn leg5 to y-axis <-37.093407> now;
		turn leg5 to y-axis <0> speed <185.505495>;
		turn leg5 to z-axis <0> now;
		turn leg5 to z-axis <0> speed <0>;
		turn leg6 to y-axis <0> now;
		turn leg6 to y-axis <-30.412088> speed <152.060440>;
		turn leg6 to z-axis <-45.005495> now;
		sleep 200;
		if( bMoving )
		{
			turn leg1 to z-axis <31.615385> speed <158.126374>;
			turn leg2 to y-axis <34.670330> speed <173.346154>;
			turn leg2 to z-axis <31.005495> speed <0>;
			turn leg3 to y-axis <0> speed <170.302198>;
			turn leg3 to z-axis <0> speed <3.027473>;
			turn leg4 to y-axis <0> speed <200.714286>;
			turn leg5 to z-axis <-31.005495> speed <155.104396>;
			turn leg6 to z-axis <2.423077> speed <237.214286>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.945055> speed <279.780220>;
			turn leg1 to z-axis <31.005495> speed <3.027473>;
			turn leg2 to y-axis <34.670330> speed <0>;
			turn leg2 to z-axis <0.604396> speed <152.060440>;
			turn leg3 to z-axis <31.615385> speed <158.126374>;
			turn leg4 to y-axis <-0.604396> speed <3.027473>;
			turn leg4 to z-axis <-31.005495> speed <152.060440>;
			turn leg5 to y-axis <-31.615385> speed <158.126374>;
			turn leg5 to z-axis <-31.005495> speed <0>;
			turn leg6 to y-axis <3.027473> speed <167.258242>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <43.791209> speed <60.824176>;
			turn leg1 to z-axis <0.604396> speed <152.060440>;
			turn leg2 to y-axis <0> speed <173.346154>;
			turn leg2 to z-axis <0> speed <3.027473>;
			turn leg3 to y-axis <34.670330> speed <173.346154>;
			turn leg3 to z-axis <31.615385> speed <0>;
			turn leg4 to y-axis <-40.137363> speed <197.681319>;
			turn leg4 to z-axis <-31.005495> speed <0>;
			turn leg5 to y-axis <-37.093407> speed <27.368132>;
			turn leg5 to z-axis <0> speed <155.104396>;
			turn leg6 to y-axis <0> speed <15.203297>;
			turn leg6 to z-axis <-45.005495> speed <237.214286>;
			sleep 200;
		}
	}
	walking_3 = 0;
	turn leg1 to y-axis <0> speed <100>;
	turn leg1 to z-axis <0> speed <150>;
	turn leg2 to y-axis <0> speed <100>;
	turn leg2 to z-axis <0> speed <150>;		
	turn leg3 to y-axis <0> speed <100>;
	turn leg3 to z-axis <0> speed <150>;		
	turn leg4 to y-axis <0> speed <100>;
	turn leg4 to z-axis <0> speed <150>;
	turn leg5 to y-axis <0> speed <100>;
	turn leg5 to z-axis <0> speed <150>;	
	turn leg6 to y-axis <0> speed <100>;
	turn leg6 to z-axis <0> speed <150>;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	if( !gun_1 OR (gun_1 == 2) OR (gun_1 == 4) )
	{
		turn turret1 to y-axis heading speed <300>;
		turn turret1 to x-axis <0> - pitch speed <150>;
		wait-for-move flare1 along x-axis;
		wait-for-turn turret1 around y-axis;
		wait-for-turn turret1 around x-axis;
	}
	if( gun_1 == 1 OR (gun_1 == 3) OR (gun_1 > 4 ))
	{
		turn turret2 to y-axis heading speed <300>;
		turn turret2 to x-axis <0> - pitch speed <150>;
		wait-for-move flare2 along x-axis;
		wait-for-turn turret2 around y-axis;
		wait-for-turn turret2 around x-axis;
	}	
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		move flare1 to x-axis [1] speed [0.375];
	}
	if( gun_1 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		move flare2 to x-axis [1] speed [0.375];
	}
	if( gun_1 == 2 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		move flare1 to x-axis [-1] speed [0.375];
	}
	if( gun_1 == 3 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		move flare2 to x-axis [-1] speed [0.375];
	}
	if( gun_1 == 4 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		move flare1 to x-axis [0] speed [0.375];
	}
	++gun_1;
	if( gun_1 > 5 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		move flare2 to x-axis [0] speed [0.375];
		gun_1 = 0;
	}
	
	return(0);
}

FireSecondary()
{
	return(0);
}


AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

Killed(severity, corpsetype)
{
	hide flare1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode leg1 type BITMAPONLY | BITMAP1;
		explode leg2 type BITMAPONLY | BITMAP2;
		explode leg3 type BITMAPONLY | BITMAP3;
		explode leg4 type BITMAPONLY | BITMAP4;
		explode leg5 type BITMAPONLY | BITMAP5;
		explode leg6 type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | BITMAP4;
		explode leg1 type FALL | BITMAP1;
		explode leg2 type FALL | BITMAP2;
		explode leg3 type FALL | BITMAP3;
		explode leg4 type FALL | BITMAP4;
		explode leg5 type FALL | BITMAP5;
		explode leg6 type FALL | BITMAP1;
		explode turret1 type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret1 type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
