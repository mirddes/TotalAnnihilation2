#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, post, nano, lathe, beam, leg1, leg2, leg3, leg4, leg5, leg6;

static-var  bMoving, heading_2, request_3, busy_4, state_5; //buildingid, buildingpos, buildingtype, buildingcrc;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	while( !busy_4 AND ( request_3 != state_5 ) )
	{
		busy_4 = 1;
		if( request_3 AND !state_5 )
		{
			move post to y-axis [3.1] speed [6.2];
			sleep 250;
			turn nano to x-axis <120> speed <270>;
			sleep 450;
			move lathe to z-axis [-4] speed [8];
			turn nano to x-axis <179.9> speed <120>;
			sleep 500;	
			turn turret to y-axis heading_2 speed <160>;
			wait-for-turn turret around y-axis;
			set INBUILDSTANCE to 1;
			state_5 = 1;
		}
		if( !request_3 AND state_5 )
		{
			state_5 = 0;
			set INBUILDSTANCE to 0;
			turn turret to y-axis <0> speed <160>;
			move lathe to z-axis [0] speed [8];
			sleep 500;
			turn nano to x-axis <60> speed <270>;
			sleep 450;
			turn nano to x-axis <0> speed <120>;
			move post to y-axis [0] speed [6.2];
			sleep 500;
		}
	}
	busy_4 = 0;
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;*/
	bMoving = FALSE;
	heading_2 = 0;
	request_3 = 1;
	busy_4 = 0;
	state_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	heading_2 = Func_Var_1;
	request_3 = 1;
	start-script RequestState();
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 25)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}*/
	return (0);
}

StopBuilding()
{
	/*if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - (get GROUND_HEIGHT(get UNIT_XZ(buildingid)) / 131072);
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(25,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}*/
	request_3 = 0;
	sleep 3000;
	if ( !request_3 )
	{
		start-script RequestState();
	}
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	bMoving = TRUE;
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <43> now;
			turn leg1 to y-axis <0> speed <218>;
			turn leg1 to z-axis <0> now;
			turn leg1 to z-axis <0> speed <3>;
			turn leg2 to z-axis <0> now;
			turn leg2 to z-axis <29.005495> speed <155>;
			turn leg3 to y-axis <21> now;
			turn leg3 to y-axis <12> speed <12>;
			turn leg3 to x-axis <-25.005495> now;
			turn leg3 to x-axis <0> speed <185>;
			turn leg4 to y-axis <-40> now;
			turn leg4 to y-axis <-39> speed <1>;
			turn leg4 to z-axis <-30.005495> now;
			turn leg4 to z-axis <0> speed <152>;
			turn leg5 to y-axis <-39> now;
			turn leg5 to y-axis <5> speed <185>;
			turn leg5 to z-axis <0> now;
			turn leg5 to z-axis <0> speed <1>;
			turn leg6 to y-axis <0> now;
			turn leg6 to y-axis <-52.010989> speed <80>;
			turn leg6 to x-axis <-30.005495> now;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <31.005495> speed <158>;
			turn leg2 to y-axis <13> speed <198>;
			turn leg2 to z-axis <31.005495> speed <1>;
			turn leg3 to y-axis <0> speed <246>;
			turn leg3 to x-axis <0> speed <3>;
			turn leg4 to y-axis <0> speed <200>;
			turn leg5 to z-axis <-31.005495> speed <155>;
			turn leg6 to x-axis <4> speed <140>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.010989> speed <279>;
			turn leg1 to z-axis <31.005495> speed <3>;
			turn leg2 to y-axis <14> speed <1>;
			turn leg2 to z-axis <0> speed <152>;
			turn leg3 to x-axis <-25.005495> speed <185>;
			turn leg4 to y-axis <0> speed <3>;
			turn leg4 to z-axis <-31.005495> speed <152>;
			turn leg5 to y-axis <-34> speed <158>;
			turn leg5 to z-axis <-31.005495> speed <1>;
			turn leg6 to y-axis <12> speed <133>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <43> speed <60>;
			turn leg1 to z-axis <0> speed <152>;
			turn leg2 to y-axis <0> speed <200>;
			turn leg2 to z-axis <0> speed <3>;
			turn leg3 to y-axis <21> speed <244>;
			turn leg3 to x-axis <-25.005495> speed <0>;
			turn leg4 to y-axis <-40> speed <197>;
			turn leg4 to z-axis <-31.005495> speed <0>;
			turn leg5 to y-axis <-39> speed <27>;
			turn leg5 to z-axis <0> speed <155>;
			turn leg6 to y-axis <0> speed <7>;
			turn leg6 to x-axis <-30.005495> speed <160>;
			sleep 200;
		}
	}
}

StopMoving()
{
	bMoving = FALSE;
	/*if ((get CURRENT_ORDER_TYPE) == 25 AND (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2))
	{
		sleep 1000;
		if (!bMoving AND !Request_3)
		{
			get ORDER_SELF(45,0);
		}
	}*/
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	heading_2 = 0 - Func_Var_1;
}

Killed(severity, corpsetype)
{
	hide nano;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode nano type BITMAPONLY | BITMAP4;
		explode lathe type BITMAPONLY | BITMAP5;
		explode leg1 type BITMAPONLY | BITMAP1;
		explode leg2 type BITMAPONLY | BITMAP2;
		explode leg3 type BITMAPONLY | BITMAP3;
		explode leg4 type BITMAPONLY | BITMAP4;
		explode leg5 type BITMAPONLY | BITMAP5;
		explode leg6 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode nano type SHATTER | BITMAP4;
		explode lathe type BITMAPONLY | BITMAP5;
		explode leg1 type FALL | BITMAP1;
		explode leg2 type FALL | BITMAP2;
		explode leg3 type FALL | BITMAP3;
		explode leg4 type FALL | BITMAP4;
		explode leg5 type FALL | BITMAP5;
		explode leg6 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode nano type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lathe type BITMAPONLY | BITMAP5;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode nano type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lathe type BITMAPONLY | BITMAP5;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
