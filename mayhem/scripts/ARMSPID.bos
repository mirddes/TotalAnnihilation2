#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel1, barrel2, flare1, flare2, leg1, leg2,
       leg3, leg4, leg5, leg6;

static-var  Moving_1, Gun_2;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	hide flare1;
	hide flare2;
	Moving_1 = 0;
	Gun_2 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
//	start-script MotionControl();
	start-script SmokeUnit();
	/*if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var target,lasttarget;
		lasttarget=0;
		while (1)
		{
			if ((get CURRENT_ORDER_TYPE) == 6)
			{
				target=get CURRENT_ORDER_TARGET_ID;
				while ((get CURRENT_ORDER_TYPE) == 6)
				{
					target=get CURRENT_ORDER_TARGET_ID;
					if (target != lasttarget)
					{
						get LOCAL_SHARED_DATA(1,20 + (get UNIT_TEAM(get MY_ID)),target);
					}
					lasttarget=target;
					sleep 500;
				}
				if ((get CURRENT_ORDER_TYPE) == 41)
				{
					target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					while (!(get UNIT_XZ(target)))
					{
						sleep 500;
						target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					}
					get ORDER_UNIT_UNIT(6,get MY_ID,target,0);
				}
			}
			sleep 500;
		}
	}*/
}

StartMoving()
{
	signal 8;
//	set-signal-mask 0;
	set-signal-mask 8;
	Moving_1 = 1;
	while( Moving_1 )
	{
			turn leg1 to y-axis <43.79> now;
			turn leg1 to y-axis <0> speed <218.97>;
			turn leg1 to z-axis <0.60> now;
			turn leg1 to z-axis <0> speed <3>;
			turn leg2 to z-axis <0> now;
			turn leg2 to z-axis <31> speed <155.10>;
			turn leg3 to y-axis <34.67> now;
			turn leg3 to y-axis <34.06> speed <3>;
			turn leg3 to z-axis <31.63> now;
			turn leg3 to z-axis <0.60> speed <155.10>;
			turn leg4 to y-axis <-40.14> now;
			turn leg4 to y-axis <-40.14> speed <0>;
			turn leg4 to z-axis <-31> now;
			turn leg4 to z-axis <-0.60> speed <152.06>;
			turn leg5 to y-axis <-37.10> now;
			turn leg5 to y-axis <0> speed <185.52>;
			turn leg5 to z-axis <0> now;
			turn leg5 to z-axis <0> speed <0>;
			turn leg6 to y-axis <0> now;
			turn leg6 to y-axis <-30.41> speed <152.06>;
			turn leg6 to z-axis <-45> now;
			sleep 200;
		if( Moving_1 )
		{
			turn leg1 to z-axis <31.63> speed <158.14>;
			turn leg2 to y-axis <34.67> speed <173.35>;
			turn leg2 to z-axis <31> speed <0>;
			turn leg3 to y-axis <0> speed <170.31>;
			turn leg3 to z-axis <0> speed <3>;
			turn leg4 to y-axis <0> speed <200.72>;
			turn leg5 to z-axis <-31> speed <155.10>;
			turn leg6 to z-axis <2.43> speed <237.22>;
			sleep 200;
		}
		if( Moving_1 )
		{
			turn leg1 to y-axis <55.96> speed <279.80>;
			turn leg1 to z-axis <31> speed <3>;
			turn leg2 to y-axis <34.67> speed <0>;
			turn leg2 to z-axis <0.60> speed <152.06>;
			turn leg3 to z-axis <31.63> speed <158.14>;
			turn leg4 to y-axis <-0.60> speed <3>;
			turn leg4 to z-axis <-31> speed <152.06>;
			turn leg5 to y-axis <-31.63> speed <158.14>;
			turn leg5 to z-axis <-31> speed <0>;
			turn leg6 to y-axis <3> speed <167.27>;
			sleep 200;
		}
		if( Moving_1 )
		{
			turn leg1 to y-axis <43.79> speed <60.82>;
			turn leg1 to z-axis <0.60> speed <152.06>;
			turn leg2 to y-axis <0> speed <173.35>;
			turn leg2 to z-axis <0> speed <3>;
			turn leg3 to y-axis <34.67> speed <173.35>;
			turn leg3 to z-axis <31.63> speed <0>;
			turn leg4 to y-axis <-40.14> speed <197.68>;
			turn leg4 to z-axis <-31> speed <0>;
			turn leg5 to y-axis <-37.10> speed <27.37>;
			turn leg5 to z-axis <0> speed <155.10>;
			turn leg6 to y-axis <0> speed <15.20>;
			turn leg6 to z-axis <-45> speed <237.22>;
		}
		sleep 200;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	Moving_1 = 0;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	turn turret to y-axis <0> speed <90>;
	turn turret to x-axis <0> speed <90>;
//	wait-for-turn turret around y-axis;
//	wait-for-turn turret around x-axis;
//	signal 2;
//	set-signal-mask 0;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
//	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <180>;
	turn turret to x-axis ( <0> - pitch ) speed <90>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( !Gun_2 )
	{
		move barrel1 to z-axis [-1.25] speed [500];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0] speed [3];
		Gun_2 = 1;
		return (0);
	}
//	if( Gun_2 )
//	{
		move barrel2 to z-axis [-1.25] speed [500];
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0] speed [3];
		Gun_2 = 0;
		return (0);
//	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !Gun_2 )
	{
		piecenum = flare1;
		return (0);
	}
//	if( Gun_2 == 1 )
//	{
		piecenum = flare2;
		return (0);
//	}
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode leg1 type BITMAPONLY | BITMAP5;
		explode leg2 type BITMAPONLY | BITMAP1;
		explode leg3 type BITMAPONLY | BITMAP2;
		explode leg4 type BITMAPONLY | BITMAP3;
		explode leg5 type BITMAPONLY | BITMAP4;
		explode leg6 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode barrel1 type FALL | BITMAP3;
		explode barrel2 type FALL | BITMAP4;
		explode leg1 type FALL | BITMAP5;
		explode leg2 type FALL | BITMAP1;
		explode leg3 type FALL | BITMAP2;
		explode leg4 type FALL | BITMAP3;
		explode leg5 type FALL | BITMAP4;
		explode leg6 type FALL | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}