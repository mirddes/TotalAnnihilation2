#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rflare, lflare, lbarrel, rbarrel, barrelcon, turret2, arc1, flare1,
       flash1, zap1, turret1, counteraim, wake1, wake2, wake3, wake4, 
       wake5, wake6, wake7, wake8, base, GP;

static-var  gun_1, water_2, gun_3, busy_4, delay_5, reset_6, aiming_7;

RestoreAfterDelay()
{
	sleep 4000;
	if( !reset_6 )
	{
		signal 2;
		signal 4;
		aiming_7 = 0;
		set-signal-mask 0;
		turn barrelcon to x-axis <0.00> speed <50>;
		cache turret1;
		cache zap1;
	}
	busy_4 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( reset_6 AND !busy_4 )
		{
			reset_6 = 0;
			busy_4 = 1;
			start-script RestoreAfterDelay();
		}
	}
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( water_2 <= 3 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <28>;
			turn counteraim to y-axis get XZ_ATAN(0) speed <28>;
			if( !aiming_7 )
			{
				turn turret1 to y-axis (0 - get XZ_ATAN(0)) speed <28>;
			}
			if( aiming_7 < 2 )
			{
				turn turret2 to y-axis (0 - get XZ_ATAN(0)) speed <28>;
			}
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	water_2 = Func_Var_1;
}

Create()
{
	hide lflare;
	hide rflare;
	hide flare1;
	hide flash1;
	hide arc1;
	spin arc1 around z-axis speed <700>;
	dont-cache  flare1;
	dont-cache  flash1;
	dont-cache  arc1;
	reset_6 = 0;
	gun_1 = 0;
	gun_3 = 0;
	busy_4 = 0;
	delay_5 = 0;
	reset_6 = 0;
	aiming_7 = 0;
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
		turn counteraim to y-axis get XZ_ATAN(0) NOW;
		turn turret1 to y-axis (0 - get XZ_ATAN(0)) NOW;
		turn turret2 to y-axis (0 - get XZ_ATAN(0)) NOW;
		
	}
	start-script SmokeUnit();
	reset_6 = 1;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	aiming_7 = 1;
	dont-cache turret1;
	dont-cache zap1;
	turn turret1 to y-axis ( heading - get XZ_ATAN(0)) speed <120>;
	wait-for-turn turret1 around y-axis;
	reset_6 = 1;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	aiming_7 = 2;
	turn turret2 to y-axis ( heading - get XZ_ATAN(0)) speed <160>;
	turn barrelcon to x-axis <0.00> - pitch speed <70>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn barrelcon around x-axis;
	reset_6 = 1;
	return (1);
}

FirePrimary()
{
	show flash1;
	sleep 60;
	show flare1;
	sleep 60;
	show arc1;
	sleep 60;
	hide flash1;
	sleep 60;
	hide flare1;
	sleep 120;
	hide arc1;
	return (0);
}

FireSecondary()
{
	if( !gun_1 )
	{
		gun_1 = 1;
		show rflare;
		move rbarrel to z-axis [-2] now;
		sleep 150;
		hide rflare;
		move rbarrel to z-axis [0] speed [3];
		return (0);
	}
	gun_1 = 0;
	show lflare;
	move lbarrel to z-axis [-2] now;
	sleep 150;
	hide lflare;
	move lbarrel to z-axis [0] speed [3];
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;
	hide flare1;
	hide arc1;
	hide flash1;
	if( water_2 >= 4 AND severity <= 25 )
	{
		corpsetype = 1;
		explode lbarrel type BITMAPONLY | BITMAP1;
		explode rbarrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode zap1 type BITMAPONLY | BITMAP3;
		explode turret2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lbarrel type FALL | SMOKE | BITMAP1;
		explode rbarrel type FALL | SMOKE | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode zap1 type SHATTER | BITMAP3;
		explode turret2 type FALL | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode zap1 type SHATTER | BITMAP3;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode zap1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
