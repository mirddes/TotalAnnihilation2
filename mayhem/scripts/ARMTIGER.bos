#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, arc1, arc2, zap1, zap2, turret1, turret2,
       fb1, ff1, fb2, ff2, fb3, ff3, fb4, ff4,
       flash1, flash2, fturret, fsleeve, body, base;

static-var  reset_1, busy_2, gun_3;


RestoreAfterDelay()
{
	sleep 5000;
	if( !reset_1 )
	{
		signal 2;
		signal 4;
		signal 16;
		turn turret1 to y-axis <0> speed <50>;
		turn turret2 to y-axis <0> speed <50>;
		turn fturret to y-axis <0> speed <120>;
		turn fsleeve to x-axis <0> speed <90>;
		cache turret1;
		cache zap1;
		cache turret2;
		cache zap2;
	}
	busy_2 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( reset_1 AND !busy_2 )
		{
			reset_1 = 0;
			busy_2 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	hide flare1;
	hide flash1;
	hide arc1;
	hide flare2;
	hide flash2;
	hide arc2;
	spin arc1 around z-axis speed <700>;
	spin arc2 around z-axis speed <700>;
	dont-cache  flare1;
	dont-cache  flash1;
	dont-cache  arc1;
	dont-cache  flare2;
	dont-cache  flash2;
	dont-cache  arc2;
	gun_3 = 0;
	busy_2 = 0;
	set ARMORED to TRUE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	reset_1 = 1;
	/*if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var target,lasttarget;
		lasttarget=0;
		while (1)
		{
			if ((get CURRENT_ORDER_TYPE) == 6)
			{
				target=get CURRENT_ORDER_TARGET_ID;
				while ((get CURRENT_ORDER_TYPE) == 6)
				{
					target=get CURRENT_ORDER_TARGET_ID;
					if (target != lasttarget)
					{
						get LOCAL_SHARED_DATA(1,20 + (get UNIT_TEAM(get MY_ID)),target);
					}
					lasttarget=target;
					sleep 500;
				}
				if ((get CURRENT_ORDER_TYPE) == 41)
				{
					target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					while (!(get UNIT_XZ(target)))
					{
						sleep 500;
						target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					}
					get ORDER_UNIT_UNIT(6,get MY_ID,target,0);
				}
			}
			sleep 500;
		}
	}*/
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	dont-cache turret1;
	dont-cache zap1;
	turn turret1 to y-axis heading speed <150>;
	wait-for-turn turret1 around y-axis;
	reset_1 = 1;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	dont-cache turret2;
	dont-cache zap2;
	turn turret2 to y-axis heading speed <150>;
	wait-for-turn turret2 around y-axis;
	reset_1 = 1;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 16;
	set-signal-mask 0;
	set-signal-mask 16;
	turn fturret to y-axis heading speed <660>;
	turn fsleeve to x-axis <0> - pitch speed <600>;
	wait-for-turn fturret around y-axis;
	wait-for-turn fsleeve around x-axis;
	reset_1 = 1;
	return (1);
}

FirePrimary()
{
	show flash1;
	sleep 60;
	show flare1;
	sleep 60;
	show arc1;
	sleep 60;
	hide flash1;
	sleep 60;
	hide flare1;
	sleep 120;
	hide arc1;
	return (0);
}

FireSecondary()
{
	show flash2;
	sleep 60;
	show flare2;
	sleep 60;
	show arc2;
	sleep 60;
	hide flash2;
	sleep 60;
	hide flare2;
	sleep 120;
	hide arc2;
	return (0);
}

FireTertiary()
{
	if( !gun_3 )
	{
		move fb1 to z-axis [-3] speed [500];
		sleep 150;
		move fb1 to z-axis [0] speed [6];
		return (0);
	}
	if( gun_3 == 1 )
	{
		move fb2 to z-axis [-3] speed [500];
		sleep 150;
		move fb2 to z-axis [0] speed [6];
		return (0);
	}
	if( gun_3 == 2 )
	{
		move fb3 to z-axis [-3] speed [500];
		sleep 150;
		move fb3 to z-axis [0] speed [6];
		return (0);
	}
	++gun_3;
	if( gun_3 > 2 )
	{
		move fb4 to z-axis [-3] speed [500];
		sleep 150;
		move fb4 to z-axis [0] speed [6];
		gun_3 = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = fturret;
	return (0);
}

QueryTertiary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = ff1;
	}
	if( gun_3 == 1 )
	{
		piecenum = ff2;
	}
	if( gun_3 == 2 )
	{
		piecenum = ff3;
	}
	if( gun_3 > 2 )
	{
		piecenum = ff4;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flash1;
	hide arc1;
	hide flare2;
	hide flash2;
	hide arc2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode zap2 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode zap1 type BITMAPONLY | BITMAP3;
		explode body type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode fturret type BITMAPONLY | BITMAP2;
		explode fb1 type BITMAPONLY | BITMAP1;
		explode fb2 type BITMAPONLY | BITMAP2;
		explode fb3 type BITMAPONLY | BITMAP3;
		explode fb4 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode zap2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode zap1 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode body type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode fturret type SHATTER | BITMAP2;
		explode fb1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode fb2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode fb3 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode fb4 type FALL | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode zap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode zap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode body type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode fturret type SHATTER | BITMAP2;
		explode fb1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode fb2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode fb3 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode fb4 type FALL | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode zap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode zap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode body type BITMAPONLY | BITMAP4;
	explode base type BITMAPONLY | BITMAP5;
	explode turret1 type BITMAPONLY | BITMAP1;
	explode fturret type SHATTER | BITMAP2;
	explode fb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode fb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fb3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode fb4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
