#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, flare4, base, turret1, wake1, wake2;

static-var  gun_1, reload_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	gun_1 = 0;
	reload_2 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 6000;
	turn turret1 to y-axis <0.00> speed <90.00>;
	turn turret1 to x-axis <0.00> speed <40.00>;
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret1 to y-axis heading speed <120>;
	turn turret1 to x-axis <0.00> - pitch speed <50>;
	while( reload_2 )
	{
		wait-for-move flare1 along z-axis;
		wait-for-move flare2 along z-axis;
		wait-for-move flare3 along z-axis;
		wait-for-move flare4 along z-axis;
	}
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	reload_2 = 1;
	if( gun_1 == 0 )
	{
		show flare1;
		move flare1 to z-axis [0.36] speed [100];
		sleep 120;
		hide flare1;
		move flare1 to z-axis [0] speed [0.4];
	}
	if( gun_1 == 1 )
	{
		show flare2;
		move flare2 to z-axis [0.36] speed [100];
		sleep 120;
		hide flare2;
		move flare2 to z-axis [0] speed [0.4];
	}
	if( gun_1 == 2 )
	{
		show flare3;
		move flare3 to z-axis [0.36] speed [100];
		sleep 120;
		hide flare3;
		move flare3 to z-axis [0] speed [0.4];
	}
	++gun_1;
	if( gun_1 > 3 )
	{
		gun_1 = 0;
		show flare4;
		move flare4 to z-axis [0.36] speed [100];
		sleep 120;
		hide flare4;
		move flare4 to z-axis [0] speed [0.12];
	}
	wait-for-move flare1 along z-axis;
	wait-for-move flare2 along z-axis;
	wait-for-move flare3 along z-axis;
	wait-for-move flare4 along z-axis;
	//4 rockets every 6.18 secs
	reload_2 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode flare4 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode flare3 type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | BITMAP4;
		explode flare4 type FALL | BITMAP5;
		explode flare3 type FALL | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret1 type SHATTER | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
