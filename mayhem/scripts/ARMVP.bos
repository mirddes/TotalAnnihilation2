#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, side1, side2, doo2, door1, 
       plate2, plate1, nano2, nano1, post1, post2, back1, back2;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ReqState_3 != On_4 )
	{
		Busy_5 = 1;
		if( ReqState_3 and !On_4 )
		{
			dont-cache doo2;
			dont-cache door1;
			dont-cache nano1;
			dont-cache nano2;
			dont-cache pad;
			dont-cache plate1;
			dont-cache plate2;
			dont-cache post1;
			dont-cache post2;
			dont-cache side1;
			dont-cache side2;
			turn side1 to z-axis <-89.57> speed <116.93>;
			turn side2 to z-axis <89.57> speed <116.93>;
			turn doo2 to z-axis <90> speed <210.33>;
			turn door1 to z-axis <-90.47> speed <211.38>;
			sleep 428;
			move back1 to x-axis [9] speed [12];
			move back2 to x-axis [-8.6] speed [12];
			move doo2 to x-axis [-7] speed [16.36];
			move door1 to x-axis [7.10] speed [16.59];
			move plate2 to x-axis [5.85] speed [13.64];
			move plate1 to x-axis [-6.50] speed [15.15];
			turn nano2 to z-axis <-37.36> speed <86.68>;
			turn nano1 to z-axis <41.86> speed <97.12>;
			sleep 450;
			turn back1 to z-axis <-12> speed <20>;
			turn back2 to z-axis <12> speed <20>;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30>;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 and On_4 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			spin pad around y-axis speed <0>;
			turn back1 to z-axis <0> speed <12>;
			turn back2 to z-axis <0> speed <12>;
			turn nano2 to z-axis <0> speed <89.37>;
			turn nano1 to z-axis <0> speed <100.14>;
			move plate2 to x-axis [0] speed [13.73];
			move plate1 to x-axis [0] speed [15.26];
			move doo2 to x-axis [0] speed [16.36];
			move door1 to x-axis [0] speed [16.59];
			sleep 428;
			turn doo2 to z-axis <0> speed <209.35>;
			turn door1 to z-axis <0> speed <210.40>;
			turn side1 to z-axis <0> speed <122>;
			turn side2 to z-axis <0> speed <122>;
			move back1 to x-axis [0] speed [13.5];
			move back2 to x-axis [0] speed [13.5];
			sleep 754;
			cache doo2;
			cache door1;
			cache nano1;
			cache nano2;
			cache pad;
			cache plate1;
			cache plate2;
			cache post1;
			cache post2;
			cache side1;
			cache side2;
		}
		Busy_5 = 0;
	}
	return (0);
}

Create()
{
	dont-shade doo2;
	dont-shade door1;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade plate1;
	dont-shade plate2;
	dont-shade post1;
	dont-shade post2;
	dont-shade side1;
	dont-shade side2;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 8000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <40>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode side1 type BITMAPONLY | BITMAP3;
		explode side2 type BITMAPONLY | BITMAP4;
		explode doo2 type BITMAPONLY | BITMAP5;
		explode door1 type BITMAPONLY | BITMAP1;
		explode plate2 type BITMAPONLY | BITMAP2;
		explode plate1 type BITMAPONLY | BITMAP3;
		explode nano2 type BITMAPONLY | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP5;
		explode post1 type BITMAPONLY | BITMAP1;
		explode post2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode side1 type BITMAPONLY | BITMAP3;
		explode side2 type BITMAPONLY | BITMAP4;
		explode doo2 type FALL | BITMAP5;
		explode door1 type BITMAPONLY | BITMAP1;
		explode plate2 type BITMAPONLY | BITMAP2;
		explode plate1 type SHATTER | BITMAP3;
		explode nano2 type FALL | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP5;
		explode post1 type FALL | BITMAP1;
		explode post2 type FALL | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode side1 type BITMAPONLY | BITMAP3;
		explode side2 type BITMAPONLY | BITMAP4;
		explode doo2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door1 type BITMAPONLY | BITMAP1;
		explode plate2 type SHATTER | BITMAP2;
		explode plate1 type SHATTER | BITMAP3;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP5;
		explode post1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode post2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode pad type BITMAPONLY | BITMAP2;
	explode side1 type BITMAPONLY | BITMAP3;
	explode side2 type BITMAPONLY | BITMAP4;
	explode doo2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door1 type BITMAPONLY | BITMAP1;
	explode plate2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode plate1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode nano1 type BITMAPONLY | BITMAP5;
	explode post1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode post2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}