#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  barrel01, barrel02, barrel03, barrel04, barrel05, barrel06, barrel07, barrel08,  
       block01, block02, block03, block04, block05, block06, block07, block08,
       housing01, housing02, housing03, housing04, housing05, housing06, housing07, housing08,
       flare, spindle, neck, mover, aimpt, turret, base;

static-var  Barrel_1, Rapidfire_2, Ready_3, aimpt_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

/*NanoFrameInit()
{
	hide flare;
}

Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	hide flare;
	dont-cache flare;
	dont-cache barrel01;
	dont-cache barrel02;
	dont-cache barrel03;
	dont-cache barrel04;
	dont-cache barrel05;
	dont-cache barrel06;
	dont-cache barrel07;
	dont-cache barrel08;
	dont-cache block01;
	dont-cache block02;
	dont-cache block03;
	dont-cache block04;
	dont-cache block05;
	dont-cache block06;
	dont-cache block07;
	dont-cache block08;
	dont-cache housing01;
	dont-cache housing02;
	dont-cache housing03;
	dont-cache housing04;
	dont-cache housing05;
	dont-cache housing06;
	dont-cache housing07;
	dont-cache housing08;
	dont-cache spindle;
	dont-cache neck;
	dont-cache turret;
	Barrel_1 = 0;
	Rapidfire_2 = 1;
	Ready_3 = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	spin flare around z-axis speed <250>;
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	Rapidfire_2 = 1;
	Ready_3 = 1;
	return (0);
}

Deactivate()
{
	Rapidfire_2 = 0;
//	signal 2;
//	set-signal-mask 0;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <5>;
	turn neck to x-axis ( <0> - pitch ) speed <2>;
	wait-for-turn turret around y-axis;
	wait-for-turn neck around x-axis;
	while( !Ready_3 )
	{
		sleep 250;
	}
	return (1);
}

FirePrimary()
{
	show flare;
	spin mover around y-axis speed <112.5>;
	spin mover around z-axis speed <270>;
	spin mover around x-axis speed <337.5>;
	move flare to z-axis [-10] speed [500];
	if( !Barrel_1 )
	{
		move block01 to z-axis [-10] speed [500];
		sleep 100;
		move block01 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 1 )
	{
		show flare;
		move block02 to z-axis [-10] speed [500];
		sleep 100;
		move block02 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 2 )
	{
		show flare;
		move block03 to z-axis [-10] speed [500];
		sleep 100;
		move block03 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 3 )
	{
		show flare;
		move block04 to z-axis [-10] speed [500];
		sleep 100;
		move block04 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 4 )
	{
		move block05 to z-axis [-10] speed [500];
		sleep 100;
		move block05 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 5 )
	{
		show flare;
		move block06 to z-axis [-10] speed [500];
		sleep 100;
		move block06 to z-axis [0] speed [16];
	}
	if( Barrel_1 == 6 )
	{
		show flare;
		move block07 to z-axis [-10] speed [500];
		sleep 100;
		move block07 to z-axis [0] speed [16];
	}
	if( Barrel_1 > 6 )
	{
		show flare;
		move block08 to z-axis [-10] speed [500];
		sleep 100;
		move block08 to z-axis [0] speed [16];
	}
	Ready_3 = 0;
	hide flare;
	move flare to z-axis [0] NOW;
	++Barrel_1;
	if( barrel_1 > 7 )
	{
		barrel_1 = 0;
		spin mover around y-axis speed <0>;
		spin mover around z-axis speed <0>;
		spin mover around x-axis speed <0>;
		turn mover to y-axis <0> NOW;
		turn mover to z-axis <0> NOW;
		turn mover to x-axis <0> NOW;
	}
	sleep 80;
	turn spindle to z-axis <45> * Barrel_1 speed <400>;
	turn barrel01 to z-axis <-45> * Barrel_1 speed <400>;
	turn barrel02 to z-axis <-45> * Barrel_1 speed <400>;
	turn barrel03 to z-axis <-45> * Barrel_1 speed <400>;
	turn barrel04 to z-axis <-45> * Barrel_1 speed <400>;
	turn barrel05 to z-axis <-45> * Barrel_1 speed <400>;
	turn barrel06 to z-axis <-45> * Barrel_1 speed <400>;
	turn barrel07 to z-axis <-45> * Barrel_1 speed <400>;
	turn barrel08 to z-axis <-45> * Barrel_1 speed <400>;
	if( !Rapidfire_2 )
	{
		sleep 4000;	
	}
	Ready_3 = 1;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

AimFromPrimary(piecenum)
{
	if( Rapidfire_2 )
	{
		piecenum = aimpt;
		return (0);
	}
	piecenum = spindle;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel01 type BITMAPONLY | BITMAP1;
		explode barrel02 type BITMAPONLY | BITMAP2;
		explode barrel03 type BITMAPONLY | BITMAP3;
		explode barrel04 type BITMAPONLY | BITMAP4;
		explode barrel05 type BITMAPONLY | BITMAP1;
		explode barrel06 type BITMAPONLY | BITMAP2;
		explode barrel07 type BITMAPONLY | BITMAP3;
		explode barrel08 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode block01 type BITMAPONLY | BITMAP3;
		explode block02 type BITMAPONLY | BITMAP4;
		explode block03 type BITMAPONLY | BITMAP1;
		explode block04 type BITMAPONLY | BITMAP2;
		explode block05 type BITMAPONLY | BITMAP3;
		explode block06 type BITMAPONLY | BITMAP4;
		explode block07 type BITMAPONLY | BITMAP1;
		explode block08 type BITMAPONLY | BITMAP2;
		explode housing01 type BITMAPONLY | BITMAP2;
		explode housing02 type BITMAPONLY | BITMAP3;
		explode housing03 type BITMAPONLY | BITMAP4;
		explode housing04 type BITMAPONLY | BITMAP1;
		explode housing05 type BITMAPONLY | BITMAP2;
		explode housing06 type BITMAPONLY | BITMAP3;
		explode housing07 type BITMAPONLY | BITMAP4;
		explode housing08 type BITMAPONLY | BITMAP1;
		explode neck type BITMAPONLY | BITMAP5;
		explode spindle type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel01 type BITMAPONLY | BITMAP1;
		explode barrel02 type BITMAPONLY | BITMAP2;
		explode barrel03 type BITMAPONLY | BITMAP3;
		explode barrel04 type BITMAPONLY | BITMAP4;
		explode barrel05 type BITMAPONLY | BITMAP1;
		explode barrel06 type BITMAPONLY | BITMAP2;
		explode barrel07 type BITMAPONLY | BITMAP3;
		explode barrel08 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode block01 type FALL | BITMAP3;
		explode block02 type FALL | BITMAP4;
		explode block03 type FALL | BITMAP1;
		explode block04 type FALL | BITMAP2;
		explode housing01 type FALL | BITMAP2;
		explode housing02 type FALL | BITMAP3;
		explode housing03 type FALL | BITMAP4;
		explode housing04 type FALL | BITMAP1;
		explode housing05 type FALL | BITMAP2;
		explode housing06 type FALL | BITMAP3;
		explode housing07 type FALL | BITMAP4;
		explode housing08 type FALL | BITMAP1;
		explode neck type FALL | BITMAP5;
		explode spindle type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode barrel01 type BITMAPONLY | BITMAP1;
		explode barrel02 type BITMAPONLY | BITMAP2;
		explode barrel03 type BITMAPONLY | BITMAP3;
		explode barrel04 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode block01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode block02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode block03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode block04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode housing01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode housing02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode housing03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode housing04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode spindle type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	explode barrel01 type BITMAPONLY | BITMAP1;
	explode barrel02 type BITMAPONLY | BITMAP2;
	explode barrel03 type BITMAPONLY | BITMAP3;
	explode barrel04 type BITMAPONLY | BITMAP4;
	explode base type BITMAPONLY | BITMAP5;
	explode block01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode block02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode block03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode block04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode housing01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode housing02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode housing03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode housing04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode spindle type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	return (0);
}