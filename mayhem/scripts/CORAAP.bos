#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, head2, conduit2, head1, conduit1,
       block1, block2, pedistal, sleeve1, sleeve2, bump2, bump1, gun2, 
       gun1, dish, blinks;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ( ReqState_3 != On_4 ) )
	{
		Busy_5 = 1;
		if( ReqState_3 )
		{
			dont-cache beam1;
			dont-cache beam2;
			dont-cache block1;
			dont-cache block2;
			dont-cache bump1;
			dont-cache bump2;
			dont-cache conduit1;
			dont-cache conduit2;
			dont-cache gun1;
			dont-cache gun2;
			dont-cache head1;
			dont-cache head2;
			dont-cache pedistal;
			dont-cache sleeve1;
			dont-cache sleeve2;
			move head2 to x-axis [0] now;
			move head2 to x-axis [-0.75] speed [0.95];
			move head2 to z-axis [0] now;
			move conduit2 to x-axis [0] now;
			move conduit2 to z-axis [0] now;
			move head1 to x-axis [0] now;
			move head1 to x-axis [0.80] speed [1.01];
			move head1 to z-axis [0] now;
			move conduit1 to x-axis [0] now;
			move conduit1 to z-axis [0] now;
			turn block1 to x-axis <0> now;
			turn block1 to x-axis <0> speed <0>;
			turn block1 to y-axis <0> now;
			turn block1 to y-axis <0> speed <0>;
			turn block1 to z-axis <0> now;
			turn block1 to z-axis <-90.25> speed <113.95>;
			turn block2 to z-axis <0> now;
			turn block2 to z-axis <90.25> speed <113.95>;
			turn head1 to x-axis <0> now;
			turn head1 to x-axis <0> speed <0>;
			sleep 792;
			turn block1 to x-axis <0> speed <0>;
			turn block1 to y-axis <0> speed <0>;
			turn block1 to z-axis <-180.27> speed <360.09>;
			turn block2 to z-axis <180.27> speed <360.09>;
	//		sleep 250;
			move pedistal to y-axis [5] speed [20];
	//		sleep 250;
			move sleeve1 to x-axis [3.70] speed [12.05];
			move sleeve2 to x-axis [-3.65] speed [11.89];
			move head2 to y-axis [-2.85] speed [9.28];
			move head1 to y-axis [-2.85] speed [9.28];
			sleep 307;
			move head2 to x-axis [-0.80] speed [0.14];
			move head2 to y-axis [-2.85] speed [0];
			move bump2 to x-axis [2.40] speed [6.67];
			move bump2 to y-axis [0.40] speed [1.11];
			move conduit2 to x-axis [-3.75] speed [10.42];
			move head1 to y-axis [-2.85] speed [0];
			move bump1 to x-axis [-2.40] speed [6.67];
			move bump1 to y-axis [0.40] speed [1.11];
			move conduit1 to x-axis [3.70] speed [10.28];
			move conduit1 to z-axis [-0.05] speed [0.14];
			turn conduit1 to z-axis <0> speed <0>;
			sleep 360;
			move conduit1 to z-axis [-0.30] speed [0.34];
			turn gun2 to x-axis <179.81> speed <241.68>;
			turn gun1 to x-axis <179.81> speed <241.68>;
			turn conduit1 to z-axis <0> speed <0>;
			sleep 752;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30>;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			spin pad around y-axis speed <0>;
			move pedistal to y-axis [5] now;
			move sleeve1 to x-axis [3.70] now;
			move sleeve2 to x-axis [-3.65] now;
			move head2 to x-axis [-0.80] now;
			move head2 to y-axis [-2.85] now;
			move head2 to z-axis [0] now;
			move bump2 to x-axis [2.40] now;
			move bump2 to y-axis [0.40] now;
			move conduit2 to x-axis [-3.75] now;
			move conduit2 to z-axis [0] now;
			move head1 to x-axis [0.80] now;
			move head1 to y-axis [-2.85] now;
			move head1 to z-axis [0] now;
			move bump1 to x-axis [-2.40] now;
			move bump1 to y-axis [0.40] now;
			move conduit1 to x-axis [3.70] now;
			move conduit1 to z-axis [-0.30] now;
			move conduit1 to z-axis [-0.05] speed [0.47];
			turn block1 to z-axis <-180.27> now;
			turn block2 to z-axis <180.27> now;
			turn gun2 to x-axis <179.81> now;
			turn gun2 to x-axis <0> speed <337.99>;
			turn gun1 to x-axis <179.81> now;
			turn gun1 to x-axis <0> speed <337.99>;
			turn head1 to x-axis <0> now;
			turn conduit1 to z-axis <0> now;
			turn conduit1 to z-axis <0> speed <0>;
			sleep 532;
			move head2 to x-axis [-0.75] speed [0.13];
			move head2 to y-axis [-2.85] speed [0];
			move bump2 to x-axis [0] speed [6.19];
			move bump2 to y-axis [0] speed [1.03];
			move conduit2 to x-axis [0] speed [9.66];
			move head1 to y-axis [-2.85] speed [0];
			move bump1 to x-axis [0] speed [6.19];
			move bump1 to y-axis [0] speed [1.03];
			move conduit1 to x-axis [0] speed [9.54];
			move conduit1 to z-axis [0] speed [0.13];
			turn conduit1 to z-axis <0> speed <0>;
			sleep 388;
			move sleeve1 to x-axis [0] speed [9.51];
			move sleeve2 to x-axis [0] speed [9.38];
			move head2 to y-axis [0] speed [7.33];
			move head1 to y-axis [0] speed [7.33];
	//		sleep 389;
			move pedistal to y-axis [0] speed [8.40];
	//		sleep 595;
			turn block1 to x-axis <0> speed <0>;
			turn block1 to y-axis <0> speed <0>;
			turn block1 to z-axis <-90.25> speed <223.93>;
			turn block2 to z-axis <90.25> speed <223.93>;
			sleep 402;
			move head2 to x-axis [0] speed [1.87];
			move head1 to x-axis [0] speed [1.99];
			turn block1 to x-axis <0> speed <0>;
			turn block1 to y-axis <0> speed <0>;
			turn block1 to z-axis <0> speed <224.51>;
			turn block2 to z-axis <0> speed <224.51>;
			turn head1 to x-axis <0> speed <0>;
			sleep 415;
			cache beam1;
			cache beam2;
			cache block1;
			cache block2;
			cache bump1;
			cache bump2;
			cache conduit1;
			cache conduit2;
			cache gun1;
			cache gun2;
			cache head1;
			cache head2;
			cache pedistal;
			cache sleeve1;
			cache sleeve2;
		}
		Busy_5 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade dish;
	dont-cache dish;
	dont-shade blinks;
	dont-cache blinks;
	dont-cache pad;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade block1;
	dont-shade block2;
	dont-shade bump1;
	dont-shade bump2;
	dont-shade conduit1;
	dont-shade conduit2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade head1;
	dont-shade head2;
	dont-shade pad;
	dont-shade pedistal;
	dont-shade sleeve1;
	dont-shade sleeve2;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	spin dish around y-axis speed <150>;
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 5000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode block1 type BITMAPONLY | BITMAP4;
		explode block2 type BITMAPONLY | BITMAP5;
		explode conduit2 type BITMAPONLY | BITMAP1;
		explode blinks type BITMAPONLY | BITMAP2;
		explode dish type BITMAPONLY | BITMAP3;
		explode gun1 type BITMAPONLY | BITMAP4;
		explode gun2 type BITMAPONLY | BITMAP5;
		explode head1 type BITMAPONLY | BITMAP1;
		explode head2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode pedistal type BITMAPONLY | BITMAP4;
		explode sleeve1 type BITMAPONLY | BITMAP5;
		explode sleeve2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode block1 type BITMAPONLY | BITMAP4;
		explode block2 type BITMAPONLY | BITMAP5;
		explode bump1 type FALL | BITMAP1;
		explode bump2 type FALL | BITMAP2;
		explode conduit1 type FALL | BITMAP3;
		explode conduit2 type FALL | BITMAP4;
		explode blinks type FALL | BITMAP5;
		explode dish type FALL | BITMAP1;
		explode gun1 type FALL | BITMAP2;
		explode gun2 type FALL | BITMAP3;
		explode head1 type SHATTER | BITMAP4;
		explode head2 type SHATTER | BITMAP5;
		explode pad type BITMAPONLY | BITMAP1;
		explode pedistal type BITMAPONLY | BITMAP2;
		explode sleeve1 type FALL | BITMAP3;
		explode sleeve2 type FALL | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode block1 type BITMAPONLY | BITMAP4;
		explode block2 type BITMAPONLY | BITMAP5;
		explode bump1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bump2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode conduit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode conduit2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode blinks type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode head1 type SHATTER | BITMAP4;
		explode head2 type SHATTER | BITMAP5;
		explode pad type BITMAPONLY | BITMAP1;
		explode pedistal type BITMAPONLY | BITMAP2;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode block1 type BITMAPONLY | BITMAP4;
	explode block2 type BITMAPONLY | BITMAP5;
	explode bump1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bump2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode conduit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode conduit2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode blinks type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode head1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode head2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode pad type BITMAPONLY | BITMAP1;
	explode pedistal type BITMAPONLY | BITMAP2;
	explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}