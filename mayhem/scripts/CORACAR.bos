#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1, box2, emit, pad1, pad2, pad3, pad4, 
       radar, dish, silo, collar, wedge, anti, wake1, wake2, 
       wake3, wake4;

static-var  Pad_1, busy_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RestoreAfterDelay()
{
	sleep 3000;
	turn turret1 to y-axis <0.00> speed <100.00>;
	turn box2 to x-axis <0.00> speed <75.02>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
}

Create()
{
	Pad_1 = 0;
	busy_2 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
}

Activate()
{
	spin radar around y-axis speed <40.00>;
	spin dish around x-axis speed <-200.00>;
}

Deactivate()
{
	spin radar around y-axis speed <0.00>;
	spin dish around x-axis speed <0.00>;
	turn dish to x-axis <0> speed <-100>;
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 4 from wake3;
		emit-sfx 2 from wake4;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
}

AimSecondary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret1 to y-axis heading speed <300.00>;
	turn box2 to x-axis <0.00> - pitch speed <200.00>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	sleep 250;
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = box2;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

QuerySecondary(piecenum)
{
	piecenum = emit;
}

QueryTertiary(piecenum)
{
	piecenum = base;
}

RestorePrimary()
{
	sleep 5000;
	if( !busy_2 )
	{
		move wedge to x-axis <0> speed <8>;
	}
}

AimPrimary(heading, pitch)
{
	busy_2 = 1;
	move wedge to x-axis <2> speed <9>;
	wait-for-move wedge along x-axis;
	busy_2 = 0;
	signal 4;
	set-signal-mask 4;
	start-script RestorePrimary();
	return (1);
}

FirePrimary()
{
	sleep 500;
	move wedge to x-axis <0> speed <8>;	
}

AimFromPrimary(piecenum)
{
	piecenum = silo;
}

QueryPrimary(piecenum)
{
	piecenum = anti;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
{
	Func_Var_1 = 4;
	Func_Var_2 = 5;
	Func_Var_3 = 6;
	Func_Var_4 = 7;
	++pad_1;
	if( pad_1 == 1 )
	{
		Func_Var_1 = 5;
		Func_Var_2 = 6;
		Func_Var_3 = 7;
		Func_Var_4 = 4;
	}
	if( pad_1 == 2 )
	{
		Func_Var_1 = 6;
		Func_Var_2 = 7;
		Func_Var_3 = 4;
		Func_Var_4 = 5;
	}
	if( pad_1 == 3 )
	{
		Func_Var_1 = 7;
		Func_Var_2 = 4;
		Func_Var_3 = 5;
		Func_Var_4 = 6;
		pad_1 = 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type FALL | EXPLODE_ON_HIT | BITMAPNUKE;
		explode pad1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode pad2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode pad3 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode radar type SHATTER | FIRE | BITMAP4;
		explode pad4 type FALL | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | EXPLODE_ON_HIT | BITMAPNUKE;
		explode pad1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode pad2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode pad3 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode radar type SHATTER | FIRE | BITMAP4;
		explode pad4 type FALL | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | EXPLODE_ON_HIT | BITMAPNUKE;
		explode pad1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode pad2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode pad3 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode radar type SHATTER | FIRE | BITMAP4;
		explode pad4 type FALL | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode pad1 type FALL | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode pad2 type FALL | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode pad3 type FALL | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode radar type SHATTER | FIRE | BITMAPNUKE;
	explode pad4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
}
