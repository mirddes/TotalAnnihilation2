#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  GP, base, beam, door1, door2, boom, neck, gun, wake1,
       wake2, wake3, wake4, wake5, wake6, wake7, wake8;

static-var  Depth_1, Heading_2, Request_3, Busy_4, State_5; //moving, buildingid, buildingpos, buildingtype, buildingcrc;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(sleeptime)
{
	while( ( !Busy_4 ) AND ( Request_3 != State_5 ) )
	{
		Busy_4 = 1;
		if( Request_3 )
		{
			turn door1 to z-axis <0> now;
			turn door1 to z-axis <-211> speed <309>;
			turn door2 to z-axis <0> now;
			turn door2 to z-axis <210> speed <308>;
			sleep 683;
			turn boom to x-axis <43> speed <62>;
			turn neck to x-axis <-43> speed <62>;
			sleep 700;
			turn gun to y-axis Heading_2 speed <160>;
			wait-for-turn gun around y-axis;
			sleeptime = Rand(1,500);
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			State_5 = 1;
		}
		if( !Request_3 )
		{
			State_5 = 0;
			set INBUILDSTANCE to 0;
			turn gun to y-axis <0> speed <160>;
			turn door1 to z-axis <-211> now;
			turn door2 to z-axis <210.439560> now;
			turn boom to x-axis <43.164835> now;
			turn boom to x-axis <0> speed <64>;
			turn neck to x-axis <-43.164835> now;
			turn neck to x-axis <0> speed <64>;
			sleep 672;
			wait-for-turn gun around y-axis;
			turn door1 to z-axis <0> speed <306>;
			turn door2 to z-axis <0> speed <305>;
			sleep 701;
		}
		Busy_4 = 0;
	}
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	//moving = 1;
	count = 0;
	while ( TRUE )
	{
		if( Depth_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <40>;
			++count;
			sleep 33;
		}
		count = 0;
	}
}

StopMoving()
{
	/*moving=0;
	if ((get CURRENT_ORDER_TYPE) == 25 AND (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2))
	{
		sleep 1000;
		if (!moving AND !request_3)
		{
			get ORDER_SELF(45,0);
		}
	}*/
}

setSFXoccupy(Func_Var_1)
{
	Depth_1 = Func_Var_1;
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	var bcheck;
	bcheck = get BUILD_PERCENT_LEFT;
	moving = 0;*/
	Heading_2 = 0;
	Request_3 = 0;
	Busy_4 = 0;
	State_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
	}
	/*if( bcheck != 0 )
	{
		{
			if (get LOCAL_SHARED_DATA(0,get UNIT_TEAM(get MY_ID)) < 2)
			{
		    	get LOCAL_SHARED_DATA(1,get UNIT_TEAM(get MY_ID),2);
		    }
		}
	}*/
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	Heading_2 = Func_Var_1;
	Request_3 = 1;
	start-script RequestState();
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 25)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}*/
	return (0);
}

StopBuilding()
{
	/*if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - (get GROUND_HEIGHT(get UNIT_XZ(buildingid)) / 131072);
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(25,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}*/
	Request_3 = 0;
	sleep 5000;
	if( !Request_3 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Heading_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide wake1;
	hide wake2;
	hide wake3;
	hide wake4;
	hide wake5;
	hide wake6;
	hide wake7;
	hide wake8;
	if( Depth_1 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode beam type BITMAPONLY | BITMAP2;
			explode door1 type BITMAPONLY | BITMAP3;
			explode door2 type BITMAPONLY | BITMAP4;
			explode boom type BITMAPONLY | BITMAP5;
			explode neck type BITMAPONLY | BITMAP1;
			explode gun type BITMAPONLY | BITMAP2;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode boom type FALL | BITMAP5;
		explode neck type FALL | BITMAP1;
		explode gun type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode boom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun type SHATTER | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP4;
	explode boom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
