#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, exhaust, door1, door2, boom, neck, gun;

static-var  Nano_1, ReqState_2, Busy_3, On_4, moving;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 3;
			emit-sfx smoketype from base;
			if( Rand( 1, 66 ) < healthpercent )
			{
				emit-sfx smoketype from base;
				emit-sfx smoketype from base;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 1000 )
		{
			sleeptime = 1000;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	moving=1;
	while (moving)
	{
		emit-sfx 256 | 3 from exhaust;
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	moving=0;
}

Create()
{
	Nano_1 = 0;
	ReqState_2 = 0;
	Busy_3 = 0;
	On_4 = 0;
	moving=0;
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	return (0);
}

RequestState(sleeptime)
{
	while( !Busy_3 AND ( ReqState_2 != On_4 ) )
	{
		Busy_3 = 1;
		if( ReqState_2 )
		{
			move exhaust to y-axis [-0.40] now;
			move exhaust to z-axis [3.78] now;
			move flare to y-axis [0.17] now;
			move flare to z-axis [-1.38] now;
			turn door1 to z-axis <0> now;
			turn door1 to z-axis <-227.87> speed <209.24>;
			turn door2 to z-axis <0> now;
			turn door2 to z-axis <227.52> speed <208.92>;
			sleep 1089;
			turn boom to x-axis <39.38> speed <42.99>;
			turn neck to x-axis <-39> speed <42.61>;
			turn neck to y-axis Nano_1 speed <160>;
			sleep 800;
			wait-for-turn neck around y-axis;
			sleeptime = Rand(1,500);
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_2 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			turn neck to y-axis <0> speed <160>;
			move exhaust to y-axis [-0.40] now;
			move exhaust to z-axis [3.78] now;
			move flare to y-axis [0.17] now;
			move flare to z-axis [-1.38] now;
			turn boom to x-axis <39.38> now;
			turn boom to x-axis <0> speed <51.82>;
			turn door1 to z-axis <-227.87> now;
			turn door2 to z-axis <227.52> now;
			turn neck to x-axis <-39> now;
			turn neck to x-axis <0> speed <51.36>;
			sleep 760;
			wait-for-turn neck around y-axis;
			turn door1 to z-axis <0> speed <185.26>;
			turn door2 to z-axis <0> speed <184.97>;
			sleep 1242;
		}
		Busy_3 = 0;
	}
	return (0);
}

StartBuilding(Func_Var_1)
{
	Nano_1 = Func_Var_1;
	ReqState_2 = 1;
	start-script RequestState();
	return (0);
}

StopBuilding()
{
	ReqState_2 = 0;
	sleep 7000;
	if( !ReqState_2 )
	{
		start-script RequestState();
	}
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = flare;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Nano_1 = ( 0 - Func_Var_1 );
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode exhaust type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode boom type BITMAPONLY | BITMAP5;
		explode neck type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode exhaust type FALL | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode boom type FALL | BITMAP5;
		explode neck type FALL | BITMAP1;
		explode gun type FALL | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode exhaust type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode boom type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode neck type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode gun type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode exhaust type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP4;
	explode boom type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode neck type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode gun type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}