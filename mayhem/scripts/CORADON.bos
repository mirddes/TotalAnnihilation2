#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rmis, lmis, flare, barrel, turret, lights, glow, inside,
       wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8, 
       counteraim, base, gp;

static-var  water_1, restore_2, gun_3, reset_4, hit_5, bAiming;


RestoreAfterDelay()
{
	sleep 8000;
	if( !restore_2 )
	{
		signal 2;
		signal 4;
		bAiming = 0;
		turn turret to x-axis <0> speed <50>;
		move glow to z-axis [0] speed [5.6];
	}
	reset_4 = 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( restore_2 and !reset_4 )
		{
			restore_2 = 0;
			reset_4 = 1;
			Start-script RestoreAfterDelay();
		}
	}
}

HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3)
{
	if( hit_5 )
	{
		return(0);
	}
	hit_5 = 1;
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	sleep 200;
	hit_5 = 0;
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	dont-cache base;
	while( TRUE )
	{
		count = 0;
		if( water_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <23>;
			turn counteraim to y-axis get XZ_ATAN(0) speed <23>;
			if( !bAiming )
			{
				turn turret to y-axis (0 - get XZ_ATAN(0)) speed <23>;
			}
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
	cache base;
}

setSFXoccupy(Func_Var_1)
{
	water_1 = Func_Var_1;
}

Create()
{
	hide flare;
	hide rmis;
	hide lmis;
	dont-cache lights;
	dont-cache turret;
	dont-cache barrel;
	dont-cache glow;
	dont-cache inside;
	dont-cache flare;
	restore_2 = 0;
	gun_3 = 0;
	reset_4 = 0;
	hit_5 = 0;
	bAiming = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
		turn counteraim to y-axis get XZ_ATAN(0) NOW;
		turn turret to y-axis (0 - get XZ_ATAN(0)) NOW;
	}
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	bAiming = 1;
	move glow to z-axis [5.6] speed [1.4];
	turn turret to y-axis ( heading - get XZ_ATAN(0)) speed <120>;
	turn turret to x-axis <0> - pitch speed <80>;
	wait-for-move glow along z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	restore_2 = 1;
	return (1);
}

FirePrimary()
{
	show flare;
	move barrel to z-axis [-3.6] speed [500];
	move glow to z-axis [0] speed [500];
	sleep 150;
	hide flare;
	move barrel to z-axis [0] speed [3.6];
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

QueryTertiary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = rmis;
	}
	if( gun_3 )
	{
		piecenum = lmis;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

FireTertiary()
{
	move base to y-axis [-0.24] NOW;
	move base to y-axis [0] speed [0.1];
	gun_3 = !gun_3;
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	wait-for-move base along y-axis;
	restore_2 = 1;
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	hide rmis;
	hide lmis;
	if( water_1 >= 4 AND severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode inside type BITMAPONLY | BITMAP3;
		explode rmis type BITMAPONLY | BITMAP3;
		explode lmis type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode inside type BITMAPONLY | BITMAP3;
		explode rmis type BITMAPONLY | BITMAP3;
		explode lmis type BITMAPONLY | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode inside type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rmis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lmis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode glow type SHATTER | BITMAP5;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode inside type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rmis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lmis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode glow type SHATTER | BITMAP5;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
