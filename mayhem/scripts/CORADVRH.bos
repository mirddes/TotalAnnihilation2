#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rocket1, rocket2, rocket3, rocket4, door1a, door1b, door2a, door2b,
       door3a, door3b, door4a, door4b, rocketleft, rocketright, spinner, dp, 
       wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8,
       knob, body, base;

static-var  gun_1, terrain_2, hit_3, busy_4, reload_5, ready_6;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(angleX, angleZ)
{
	if( hit_3 )
	{
		return(0);
	}
	hit_3 = 1;
	turn base to z-axis ( AngleZ / 2 ) speed <50.00>;
	turn base to x-axis ( AngleX / 2 ) speed <50.00>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.00> speed <30.00>;
	turn base to x-axis <0.00> speed <30.00>;
	sleep 200;
	hit_3 = 0;
}

StartMoving(count)
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		count = 0;
		if( terrain_2 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		while( count < 9 )
		{
			turn base to y-axis get XZ_ATAN(0) now;
			turn body to y-axis (0 - get XZ_ATAN(0)) speed <32>;
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	terrain_2 = Func_Var_1;
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-cache knob;
	gun_1 = 0;
	hit_3 = 0;
	busy_4 = 0;
	reload_5 = 0;
	ready_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn base to y-axis get XZ_ATAN(0) now;
		turn body to y-axis (0 - get XZ_ATAN(0)) now;
	}
	start-script SmokeUnit();
	/*if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var target,lasttarget;
		lasttarget=0;
		while (1)
		{
			if ((get CURRENT_ORDER_TYPE) == 6)
			{
				target=get CURRENT_ORDER_TARGET_ID;
				while ((get CURRENT_ORDER_TYPE) == 6)
				{
					target=get CURRENT_ORDER_TARGET_ID;
					if (target != lasttarget)
					{
						get LOCAL_SHARED_DATA(1,20 + (get UNIT_TEAM(get MY_ID)),target);
					}
					lasttarget=target;
					sleep 500;
				}
				if ((get CURRENT_ORDER_TYPE) == 41)
				{
					target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					while (!(get UNIT_XZ(target)))
					{
						sleep 500;
						target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					}
					get ORDER_UNIT_UNIT(6,get MY_ID,target,0);
				}
			}
			sleep 500;
		}
	}*/
}

RestoreAfterDelay()
{
	sleep 6000;
	move rocket1 to y-axis [0] speed [15];
	move rocket2 to y-axis [0] speed [15];
	move rocket3 to y-axis [0] speed [15];
	move rocket4 to y-axis [0] speed [15];
	turn door1a to x-axis <0> speed <80>;
	turn door1b to x-axis <0> speed <80>;
	turn door2a to x-axis <0> speed <80>;
	turn door2b to x-axis <0> speed <80>;
	turn door3a to x-axis <0> speed <80>;
	turn door3b to x-axis <0> speed <80>;
	turn door4a to x-axis <0> speed <80>;
	turn door4b to x-axis <0> speed <80>;
	Return (0);
}

GetReady()
{
	set-signal-mask 0;
	if( busy_4 )
	{
		return(0);
	}
	busy_4 = 1;
	show rocket1;
	show rocket2;
	show rocket3;
	show rocket4;
	turn door1a to x-axis <80> speed <250>;
	turn door1b to x-axis <-80> speed <250>;
	sleep 100;
	turn door2a to x-axis <80> speed <250>;
	turn door2b to x-axis <-80> speed <250>;
	sleep 100;
	turn door3a to x-axis <80> speed <250>;
	turn door3b to x-axis <-80> speed <250>;
	sleep 100;
	turn door4a to x-axis <80> speed <250>;
	turn door4b to x-axis <-80> speed <250>;
	move rocket1 to y-axis [5] speed [12.5];
	sleep 100;
	move rocket2 to y-axis [5] speed [12.5];
	sleep 100;
	move rocket3 to y-axis [5] speed [12.5];
	sleep 100;
	move rocket4 to y-axis [5] speed [12.5];
	sleep 100;
	ready_6 = 1;
	busy_4 = 0;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	while( reload_5 OR busy_4 OR !ready_6 )
	{
		if( !ready_6 )
		{
			start-script GetReady();
		}
		sleep 200;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 1 )
	{
		hide rocket1;
		move rocket1 to y-axis [0] now;
		sleep 500;
		turn door1a to x-axis <0> speed <80>;
		turn door1b to x-axis <0> speed <80>;
		return(0);
	}
	if( gun_1 == 2 )
	{
		hide rocket2;
		move rocket2 to y-axis [0] now;
		sleep 500;
		turn door2a to x-axis <0> speed <80>;
		turn door2b to x-axis <0> speed <80>;
		return(0);
	}
	if( gun_1 == 3 )
	{
		hide rocket3;
		move rocket3 to y-axis [0] now;
		sleep 500;
		turn door3a to x-axis <0> speed <80>;
		turn door3b to x-axis <0> speed <80>;
		return(0);
	}
	if( gun_1 > 3 )
	{
		reload_5 = 1;
		gun_1 = 0;
		hide rocket4;
		move rocket4 to y-axis [0] now;
		sleep 500;
		turn door4a to x-axis <0> speed <80>;
		turn door4b to x-axis <0> speed <80>;
		sleep 1400;
		ready_6 = 0;
		reload_5 = 0;
		return(0);
	}
}

QueryPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = rocket1;
	}
	if( gun_1 == 1 )
	{
		piecenum = rocket2;
	}
	if( gun_1 == 2 )
	{
		piecenum = rocket3;
	}
	if( gun_1 > 2 )
	{
		piecenum = rocket4;
	}
}

AimTertiary(heading, pitch)
{
	while( terrain_2 >= 4 )
	{
		sleep 250;
	}
	signal 4;
	set-signal-mask 4;
	turn spinner to y-axis heading speed <200>;
	turn spinner to x-axis 0 - pitch speed <100>;
	wait-for-turn spinner around y-axis;
	wait-for-turn spinner around x-axis;
	Return (1);
}

AimFromTertiary(piecenum)
{
	piecenum = spinner;
}

QueryTertiary(piecenum)
{
	piecenum = dp;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( terrain_2 >= 4 AND severity <= 25 )
	{
		corpsetype = 1;
		explode rocket1 type BITMAPONLY | BITMAP1;
		explode rocket2 type BITMAPONLY | BITMAP1;
		explode rocket3 type BITMAPONLY | BITMAP1;
		explode rocket4 type BITMAPONLY | BITMAP1;
		explode door1a type BITMAPONLY | BITMAP5;
		explode door2a type BITMAPONLY | BITMAP5;
		explode door1b type BITMAPONLY | BITMAP5;
		explode door2b type BITMAPONLY | BITMAP5;
		explode door3a type BITMAPONLY | BITMAP5;
		explode door4a type BITMAPONLY | BITMAP5;
		explode door3b type BITMAPONLY | BITMAP5;
		explode door4b type BITMAPONLY | BITMAP5;
		explode knob type BITMAPONLY | BITMAP3;
		explode base type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP1;
		explode wake3 type BITMAPONLY | BITMAP1;
		explode wake4 type BITMAPONLY | BITMAP1;
		explode wake5 type BITMAPONLY | BITMAP1;
		explode wake6 type BITMAPONLY | BITMAP1;
		explode wake7 type BITMAPONLY | BITMAP1;
		explode wake8 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rocket1 type BITMAPONLY | BITMAP1;
		explode rocket2 type BITMAPONLY | BITMAP1;
		explode rocket3 type BITMAPONLY | BITMAP1;
		explode rocket4 type BITMAPONLY | BITMAP1;
		explode door1a type FALL | BITMAP5;
		explode door2a type FALL | BITMAP5;
		explode door1b type FALL | BITMAP5;
		explode door2b type FALL | BITMAP5;
		explode door3a type FALL | BITMAP5;
		explode door4a type FALL | BITMAP5;
		explode door3b type FALL | BITMAP5;
		explode door4b type FALL | BITMAP5;
		explode knob type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode base type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | FIRE | BITMAP1;
		explode wake2 type FALL | FIRE | BITMAP1;
		explode wake3 type FALL | FIRE | BITMAP1;
		explode wake4 type FALL | FIRE | BITMAP1;
		explode wake5 type FALL | FIRE | BITMAP1;
		explode wake6 type FALL | FIRE | BITMAP1;
		explode wake7 type FALL | FIRE | BITMAP1;
		explode wake8 type FALL | FIRE | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode rocket1 type BITMAPONLY | BITMAP1;
		explode rocket2 type BITMAPONLY | BITMAP1;
		explode rocket3 type BITMAPONLY | BITMAP1;
		explode rocket4 type BITMAPONLY | BITMAP1;
		explode door1a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode door2a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode door1b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode door2b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode door3a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode door4a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode door3b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode door4b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode knob type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode base type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake3 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake4 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake5 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake6 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake7 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake8 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode rocket1 type BITMAPONLY | BITMAP1;
	explode rocket2 type BITMAPONLY | BITMAP1;
	explode rocket3 type BITMAPONLY | BITMAP1;
	explode rocket4 type BITMAPONLY | BITMAP1;
	explode door1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door4a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door4b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode knob type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode base type BITMAPONLY | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
