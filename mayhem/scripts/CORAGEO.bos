#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, vent1, vent2, fan, turret, sleeve, barrel1,
       flare1, barrel2, flare2, barrel3, flare3;

static-var  gun_1, on_2, Delay_3; //dead, constructor_id, buildangle;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

/*NanoFrameInit()
{
	hide flare1;
	hide flare2;
	hide flare3;
}

Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}

Upgrade(callerID, angle)
{
	constructor_id = callerID;
	buildangle = angle;
	set TURNZ to buildangle;
}*/

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache flare3;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-shade turret;
	dont-shade sleeve;
	dont-shade vent1;
	dont-shade vent2;
	dont-cache fan;
	dont-cache sleeve;
	gun_1 = 0;
	On_2 = 0;
	Delay_3 = 0;
	/*constructor_id=0;
	sleep 33;
	if (!constructor_id)
	{
		buildangle = Rand(-2048,2048);
	buildangle = buildangle + 32768;
		set TURNZ to buildangle;
	}
	dead=0;
	sleep 100;
	constructor_id=get UNIT_NEAREST(25,4,0);
	if (constructor_id)
	{
		buildangle = get COB_QUERY_SCRIPT(constructor_id,3,0);
	}*/
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	/*sleep 100;
	if (constructor_id)
	{
		if (!dead)
		{
			get KILL_OTHER_UNIT(constructor_id, 3);
			constructor_id=0;
		}
	}
	sleep 100;
	get UNIT_REBUILD_YARD;*/
}

SmokeVents()
{
	while( on_2 )
	{
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		sleep 1000;
	}
}

Activate()
{
	if( !on_2 )
	{
		start-script SmokeVents();
	}
	on_2 = 1;
	spin fan around y-axis speed <-250.06>;
}

Deactivate()
{
	on_2 = 0;
	stop-spin fan around y-axis;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <24>;
	turn sleeve to x-axis <0> - pitch speed <12>;
	while( Delay_3 )
	{
		sleep 200;
		wait-for-move sleeve along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		move barrel1 to z-axis [-4.5] speed [500];
		move sleeve to z-axis [-0.13] speed [500];
		sleep 150;
		hide flare1;
		move barrel1 to z-axis [0] speed [2];
		move sleeve to z-axis [0] speed [0.05];
	}
	if( gun_1 == 1 )
	{
		show flare2;
		move barrel2 to z-axis [-4.5] speed [500];
		move sleeve to z-axis [-0.26] speed [500];
		sleep 150;
		hide flare2;
		move barrel2 to z-axis [0] speed [2];
		move sleeve to z-axis [0] speed [0.05];
	}
	if( gun_1 == 2 )
	{
		Delay_3 = 1;
		show flare3;
		move barrel3 to z-axis [-4.5] speed [500];
		move sleeve to z-axis [-0.39] speed [500];
		sleep 150;
		hide flare3;
		move barrel3 to z-axis [0] speed [2];
		move sleeve to z-axis [0] speed [0.05];
		wait-for-move sleeve along z-axis;
		gun_1 = 0;
		Delay_3 = 0;
		return(0);
	}
	++gun_1;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

//TargetCleared(Func_Var_1)
//{
//	stop-spin turret around y-axis;
//	stop-spin sleeve around x-axis;
//}

/*TookDamage(dmgtype, dmgamount, attackerid)
{
	if (constructor_id AND (get BUILD_PERCENT_LEFT) AND dmgtype==dtWeapon AND (get HEALTH_VAL) == (get GET_UNITINFO(uiMaxDamage)))
	{
		get MAKE_DAMAGE(1, dmgamount, attackerid, constructor_id);
	}
}*/

Killed(severity, corpsetype)
{
	//dead=1;
	hide flare1;
	hide flare2;
	hide flare3;
	hide sleeve;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | BITMAP3;
		explode vent1 type BITMAPONLY | BITMAP1;
		explode vent2 type BITMAPONLY | BITMAP1;
		explode fan type FALL | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP2;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode barrel3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP3;
		explode vent1 type BITMAPONLY | BITMAP2;
		explode vent2 type BITMAPONLY | BITMAP2;
		explode fan type FALL | BITMAP1;
		explode turret type FALL | SMOKE | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode barrel3 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP3;
		explode vent1 type BITMAPONLY | BITMAP2;
		explode vent2 type BITMAPONLY | BITMAP2;
		explode fan type FALL | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode barrel3 type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP3;
	explode vent1 type BITMAPONLY | BITMAP2;
	explode vent2 type BITMAPONLY | BITMAP2;
	explode fan type FALL | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type BITMAPONLY | BITMAP3;
	explode barrel2 type BITMAPONLY | BITMAP3;
	explode barrel3 type BITMAPONLY | BITMAP3;
}
