#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
#define FBIMAXVELOCITY		[0.78] * 12

piece  base, pad, body, beam1, beam2, leg1, foot1,
	   leg2, foot2, leg3, foot3, leg4, foot4, g1, g2, g3, g4, hip1, hip2, hip3, hip4;

static-var  bMoving, spray, depth_3, speed1, speed2, speed3, speed4, speed5, speed6;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			if( depth_3 == 3 )
			{
				smoketype = 259;
			}
			emit-sfx smoketype from pad;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	var fbimv;
	fbimv=FBIMAXVELOCITY;
	speed1=fbimv / 22542 * <1>;
	speed2=speed1 * 2;
	speed3=fbimv / 19602 * <1>;
	speed4=speed3 * 2;
	speed5=speed4 * 2;
	speed6=fbimv;
	spray = 0;
	bMoving = FALSE;
	start-script SmokeUnit();
}

setSFXoccupy(Func_Var_1)
{
	depth_3 = Func_Var_1;
}


SweetSpot(piecenum)
{
	piecenum = body;
}

MotionControl()
	{
	//var f1limit, f2limit, f3limit, f4limit;
	bMoving=1;
	while (bMoving)
		{
		turn hip4 to y-axis <-20> speed speed1;
		turn leg4 to y-axis <40> speed speed2;
		turn foot4 to y-axis <-20> speed speed1;
		turn hip1 to y-axis <20> speed speed1;
		turn leg1 to y-axis <-40> speed speed2;
		turn foot1 to y-axis <20> speed speed1;
		turn leg2 to z-axis <30> speed <300>;
		turn foot2 to z-axis <-15> speed <167>;
		turn foot2 to x-axis <0> speed <167>;
		turn hip2 to y-axis <-20> speed speed3;
		turn leg2 to y-axis <40> speed speed4;
		turn foot2 to y-axis <-20> speed speed3;
		move foot3 to y-axis [3] speed [30];
		turn hip3 to y-axis <20> speed speed3;
		turn leg3 to y-axis <-40> speed speed5;
		turn foot3 to y-axis <20> speed speed4;
		move body to z-axis [1] speed speed6;
		wait-for-move body along z-axis;
		move body to z-axis [0] speed speed6;
		wait-for-turn leg2 around y-axis;
		turn leg2 to z-axis <0> speed <400>;
		turn foot2 to z-axis <0> speed <222>;
		turn foot2 to x-axis <25> speed <50>;
		/*f2limit = get GROUND_HEIGHT(get PIECE_XZ(foot2)) - get PIECE_Y(g2);
		f3limit = get GROUND_HEIGHT(get PIECE_XZ(foot3)) - get PIECE_Y(g3);
		if (f2limit < [-1])
			{
			f2limit = [-1];
			}
		if (f3limit < [-1])
			{
			f3limit = [-1];
			}*/
		move foot2 to y-axis 0 speed [40];
		move foot3 to y-axis 0 speed [40];
		wait-for-move foot2 along y-axis;
		sleep 100;
		if (bMoving)
			{
			turn hip2 to y-axis <20> speed speed1;
			turn leg2 to y-axis <-40> speed speed2;
			turn foot2 to y-axis <20> speed speed1;
			turn hip3 to y-axis <-20> speed speed1;
			turn leg3 to y-axis <40> speed speed2;
			turn foot3 to y-axis <-20> speed speed1;
			turn leg4 to z-axis <-30> speed <300>;
			turn foot4 to z-axis <15> speed <167>;
			turn foot4 to x-axis <0> speed <167>;
			turn hip4 to y-axis <20> speed speed3;
			turn leg4 to y-axis <-40> speed speed4;
			turn foot4 to y-axis <20> speed speed3;
			move body to z-axis [1] speed speed6;
			move foot1 to y-axis [3] speed [30];
			turn hip1 to y-axis <-20> speed speed3;
			turn leg1 to y-axis <40> speed speed5;
			turn foot1 to y-axis <-20> speed speed4;
			wait-for-move body along z-axis;
			move body to z-axis [0] speed speed6;
			wait-for-turn leg4 around y-axis;
			turn leg4 to z-axis <0> speed <400>;
			turn foot4 to z-axis <0> speed <222>;
			turn foot4 to x-axis <25> speed <50>;
			/*f4limit = get GROUND_HEIGHT(get PIECE_XZ(foot4)) - get PIECE_Y(g4);
			f1limit = get GROUND_HEIGHT(get PIECE_XZ(foot1)) - get PIECE_Y(g1);
			if (f4limit < [-1])
				{
				f4limit = [-1];
				}
			if (f1limit < [-1])
				{
				f1limit = [-1];
				}*/
			move foot4 to y-axis 0 speed [40];
			move foot1 to y-axis 0 speed [40];
			wait-for-move foot4 along y-axis;
			sleep 100;
			}
		}
	}

StartMoving()
{
	if (!bMoving)
		{
		bMoving=1;
		start-script MotionControl();
		}
}

StopMoving()
{
	bMoving = 0;
	turn hip1 to y-axis <0> speed <60>;
	turn hip2 to y-axis <0> speed <60>;
	turn hip3 to y-axis <0> speed <60>;
	turn hip4 to y-axis <0> speed <60>;
	turn leg1 to y-axis <0> speed <120>;
	turn leg2 to y-axis <0> speed <120>;
	turn leg3 to y-axis <0> speed <120>;
	turn leg4 to y-axis <0> speed <120>;
	turn foot1 to x-axis <0> speed <120>;
	turn foot2 to x-axis <0> speed <120>;
	turn foot3 to x-axis <0> speed <120>;
	turn foot4 to x-axis <0> speed <120>;
	turn foot1 to y-axis <0> speed <120>;
	turn foot2 to y-axis <0> speed <120>;
	turn foot3 to y-axis <0> speed <120>;
	turn foot4 to y-axis <0> speed <120>;
	turn foot1 to z-axis <0> speed <120>;
	turn foot2 to z-axis <0> speed <120>;
	turn foot3 to z-axis <0> speed <120>;
	turn foot4 to z-axis <0> speed <120>;
	move foot1 to y-axis 0 speed [40];
	move foot2 to y-axis 0 speed [40];
	move foot3 to y-axis 0 speed [40];
	move foot4 to y-axis 0 speed [40];
	/*move foot1 to y-axis (get GROUND_HEIGHT(get PIECE_XZ(foot1)) - get PIECE_Y(g1)) speed [40];
	move foot2 to y-axis (get GROUND_HEIGHT(get PIECE_XZ(foot2)) - get PIECE_Y(g2)) speed [40];
	move foot3 to y-axis (get GROUND_HEIGHT(get PIECE_XZ(foot3)) - get PIECE_Y(g3)) speed [40];
	move foot4 to y-axis (get GROUND_HEIGHT(get PIECE_XZ(foot4)) - get PIECE_Y(g4)) speed [40];*/
	move body to z-axis [0] now;
}

QueryLandingPad(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = 1;
	Func_Var_2 = 1;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray == 1 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Killed(severity, corpsetype)
{
	if( depth_3 == 3 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode body type BITMAPONLY | BITMAP1;
			explode foot1 type BITMAPONLY | BITMAP3;
			explode foot2 type BITMAPONLY | BITMAP3;
			explode foot3 type BITMAPONLY | BITMAP3;
			explode foot4 type BITMAPONLY | BITMAP3;
			explode pad type BITMAPONLY | BITMAP2;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode foot1 type FALL | BITMAP3;
		explode foot2 type BITMAPONLY | BITMAP3;
		explode foot3 type FALL | BITMAP3;
		explode foot4 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode foot1 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode foot2 type FALL | BITMAP3;
		explode foot3 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode foot4 type FALL | BITMAP3;
		explode pad type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode foot1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode foot2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode foot3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode foot4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pad type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}