#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beama, beamb, section1, section2, guna, gunb, dish;

static-var  Nano_1, Request_2, On_3, Busy_4;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( ( !Busy_4 ) AND Request_2 != On_3 )
	{
		Busy_4 = 1;
		if( Request_2 )
		{
			dont-cache beama;
			dont-cache beamb;
			dont-cache guna;
			dont-cache gunb;
			dont-cache pad;
			dont-cache section1;
			dont-cache section2;
			move section1 to x-axis [0] now;
			move section1 to x-axis [5.85] speed [12.61];
	//		sleep 730;
			move section2 to x-axis [4.50] speed [6.92];
			move section2 to z-axis [2.10] speed [3.23];
	//		sleep 924;
			move guna to x-axis [7.05] speed [10.73];
			move gunb to x-axis [4.85] speed [7.38];
			move gunb to z-axis [2] speed [3];
			sleep 791;
			move guna to z-axis [2.50] speed [5.20];
			move gunb to x-axis [3.65] speed [2.49];
			move gunb to z-axis [4.15] speed [4.47];
			turn gunb to y-axis <9.58> speed <19.91>;
			sleep 537;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30>;
			set INBUILDSTANCE to 1;
			On_3 = 1;
		}
		if( !Request_2 )
		{
			On_3 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			spin pad around y-axis speed <0>;
			move section1 to x-axis [5.85] now;
			move section2 to x-axis [4.50] now;
			move section2 to z-axis [2.10] now;
			move guna to x-axis [7.05] now;
			move guna to z-axis [2.50] now;
			move guna to z-axis [0] speed [5.90];
			move gunb to x-axis [3.65] now;
			move gunb to x-axis [4.85] speed [2.83];
			move gunb to z-axis [4.15] now;
			move gunb to z-axis [2] speed [5.07];
			turn gunb to y-axis <9.58> now;
			turn gunb to y-axis <0> speed <22.59>;
			sleep 852;
			move guna to x-axis [0] speed [12.86];
			move gunb to x-axis [0] speed [8.85];
			move gunb to z-axis [0] speed [3.65];
	//		sleep 700;
			move section2 to x-axis [0] speed [8.17];
			move section2 to z-axis [0] speed [3.81];
	//		sleep 700;
			move section1 to x-axis [0] speed [12.86];
			sleep 545;
			cache beama;
			cache beamb;
			cache guna;
			cache gunb;
			cache pad;
			cache section1;
			cache section2;
		}
		Busy_4 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-cache dish;
	dont-shade dish;
	dont-shade beama;
	dont-shade beamb;
	dont-shade guna;
	dont-shade gunb;
	dont-shade pad;
	dont-shade section1;
	dont-shade section2;
	Nano_1 = 0;
	Request_2 = 0;
	On_3 = 0;
	Busy_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	spin dish around y-axis speed <150>;
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beama;
	}
	if( Nano_1 )
	{
		piecenum = beamb;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	Request_2 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	Request_2 = 0;
	sleep 5000;
	set-signal-mask 0;
	if( !Request_2 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode beama type BITMAPONLY | BITMAP3;
		explode beamb type BITMAPONLY | BITMAP4;
		explode section1 type BITMAPONLY | BITMAP5;
		explode section2 type BITMAPONLY | BITMAP1;
		explode guna type BITMAPONLY | BITMAP2;
		explode gunb type BITMAPONLY | BITMAP3;
		explode dish type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode beama type FALL | BITMAP3;
		explode beamb type FALL | BITMAP4;
		explode section1 type BITMAPONLY | BITMAP5;
		explode section2 type SHATTER | BITMAP1;
		explode guna type FALL | BITMAP2;
		explode gunb type FALL | BITMAP3;
		explode dish type FALL | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode section1 type BITMAPONLY | BITMAP5;
		explode section2 type SHATTER | BITMAP1;
		explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode pad type BITMAPONLY | BITMAP2;
	explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode section1 type BITMAPONLY | BITMAP5;
	explode section2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}