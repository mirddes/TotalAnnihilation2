#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  emitA1, emitA2, emitA3, emitA4, emitB1, emitB2, emitB3, emitB4, 
       base, boxb, boxa, flarer, flarel, turret2, turreta, turretb, 
       wakel, waker, guns, guns2, platforma, turret1, turretgun;

static-var  gun_1, gun_2, gun_3, restore_4, reset_5;

RestoreAfterDelay()
{
	sleep 5000;
	if( !reset_5 )
	{
		turn turret2 to y-axis <0> speed <75>;
		turn turret2 to x-axis <0> speed <75>;
		turn turreta to y-axis <0> speed <75>;
		turn boxa to x-axis <0> speed <75>;
		turn turretb to y-axis <0> speed <75>;
		turn boxb to x-axis <0> speed <75>;
		signal 2;
		signal 4;
		signal 16;
	}
	restore_4 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( reset_5 AND ( !restore_4 ) )
		{
			reset_5 = FALSE;
			restore_4 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	hide flarel;
	hide flarer;
	gun_1 = flarer;
	gun_3 = flarer;
	reset_5 = FALSE;
	restore_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wakel;
		emit-sfx 2 from waker;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	return (0);
}

AimTertiary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret2 to y-axis heading speed <755>;
	turn turret2 to x-axis <0> - pitch speed <730>;
	wait-for-move guns along z-axis;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	reset_5 = TRUE;
	return (1);
}

FireTertiary()
{
	move guns to z-axis [-2.4] speed [500];
	if( !gun_3 )
	{
		show flarer;
		sleep 120;
		hide flarer;
	}
	if( gun_3 )
	{
		show flarel;
		sleep 120;
		hide flarel;
	}
	move guns to z-axis [0] speed [4];
	gun_3 = !gun_3;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = turret2;
	return (0);
}

QueryTertiary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = flarer;
	}
	if( gun_3 )
	{
		piecenum = flarel;
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	if( ( gun_1 < 4 ) OR ( gun_1 > 6 ) )
	{
		turn turreta to y-axis heading speed <390>;
		turn boxa to x-axis <0> - pitch speed <270>;
	}
	if( gun_1 > 3 ) )
	{
		turn turretb to y-axis heading speed <390>;
		turn boxb to x-axis <0> - pitch speed <270>;
	}
	wait-for-move boxa along z-axis;
	wait-for-move boxb along z-axis;
	wait-for-turn turreta around y-axis;
	wait-for-turn boxa around x-axis;
	wait-for-turn turretb around y-axis;
	wait-for-turn boxb around x-axis;
	reset_5 = TRUE;
	return (1);
}

FirePrimary()
{
	if( gun_1 <= 3 )
	{
		move boxa to z-axis [-0.7] speed [200];
		sleep 80;
		move boxa to z-axis [0] speed [1];
	}
	if( gun_1 > 3 )
	{
		move boxb to z-axis [-0.7] speed [200];
		sleep 80;
		move boxb to z-axis [0] speed [1];
	}
	++gun_1;
	if( gun_1 > 7 )
	{
		gun_1 = 0;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	if( gun_1 >= 3 )
	{
		piecenum = turreta;
	}
	if( gun_1 > 3 )
	{
		piecenum = turretb;
	}
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flarel;
	hide flarer;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode boxa type BITMAPONLY | BITMAP2;
		explode boxb type BITMAPONLY | BITMAP3;
		explode emitA1 type BITMAPONLY | BITMAP4;
		explode emitB2 type BITMAPONLY | BITMAP5;
		explode flarel type BITMAPONLY | BITMAP1;
		explode flarer type BITMAPONLY | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode guns2 type BITMAPONLY | BITMAP4;
		explode platforma type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turreta type BITMAPONLY | BITMAP3;
		explode turretb type BITMAPONLY | BITMAP4;
		explode turretgun type BITMAPONLY | BITMAP5;
		return (1);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode boxa type SHATTER | BITMAP2;
		explode boxb type BITMAPONLY | BITMAP3;
		explode emitA1 type FALL | BITMAP4;
		explode emitB2 type FALL | BITMAP5;
		explode flarel type FALL | BITMAP1;
		explode flarer type FALL | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode guns2 type BITMAPONLY | BITMAP4;
		explode platforma type BITMAPONLY | BITMAP5;
		explode turret1 type FALL | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turreta type FALL | BITMAP3;
		explode turretb type FALL | BITMAP4;
		explode turretgun type BITMAPONLY | BITMAP5;
		return (1);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode boxa type SHATTER | BITMAP2;
		explode boxb type BITMAPONLY | BITMAP3;
		explode emitA1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode emitB2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode flarel type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode flarer type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode guns2 type BITMAPONLY | BITMAP4;
		explode platforma type BITMAPONLY | BITMAP5;
		explode turret1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turreta type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode turretb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode turretgun type BITMAPONLY | BITMAP5;
		return (1);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode boxa type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode boxb type BITMAPONLY | BITMAP3;
	explode emitA1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode emitA2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode emitA3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode emitA4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode emitB1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode emitB2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode emitB3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode emitB4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode flarel type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode flarer type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode guns type BITMAPONLY | BITMAP3;
	explode guns2 type BITMAPONLY | BITMAP4;
	explode platforma type BITMAPONLY | BITMAP5;
	explode turret1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type BITMAPONLY | BITMAP2;
	explode turreta type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode turretb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode turretgun type BITMAPONLY | BITMAP5;
	return (0);
}
