#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  flare1, flare2, flare3, flare4, launcher, turret, tower,
       door1, door2, tube1, tube2, tube3, tube4, hole, base;

static-var  on_1, busy_2, request_3, restore_4, pitch_5, gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState(timer)
{
	while( TRUE )
	{
		if( !request_3 AND on_1 )
		{
			busy_2 = 1;
			on_1 = 0;
			timer = 0;
			restore_4 = 0;
			turn launcher to x-axis <0> speed <240>;
			move tube1 to z-axis [-1.5] speed [6];
			move tube2 to z-axis [-1.5] speed [6];
			move tube3 to z-axis [-1.5] speed [6];
			move tube4 to z-axis [-1.5] speed [6];
			move launcher to z-axis [0.75] speed [3];
			sleep 300;
			move door1 to y-axis [0] speed [12];
			move door2 to y-axis [0] speed [12];
			move tower to y-axis [-21] speed [28];
			move turret to y-axis [-3] speed [6];
			sleep 750;
			//get SET_CLOAKED (1);
			turn door1 to z-axis <0> speed <250>;
			turn door2 to z-axis <0> speed <250>;
			sleep 360;
			set ARMORED to 1;
			cache door1;
			cache door2;
			cache tube1;
			cache tube2;
			cache tube3;
			cache tube4;
			cache flare1;
			cache flare2;
			cache flare3;
			cache flare4;
			cache launcher;
			cache turret;
			cache tower;
		}
		if( request_3 and !on_1 )
		{
			busy_2 = 1;
			on_1 = 1;
			timer = 0;
			restore_4 = 20;
			dont-cache door1;
			dont-cache door2;
			dont-cache tube1;
			dont-cache tube2;
			dont-cache tube3;
			dont-cache tube4;
			dont-cache flare1;
			dont-cache flare2;
			dont-cache flare3;
			dont-cache flare4;
			dont-cache launcher;
			dont-cache turret;
			dont-cache tower;
			//get SET_CLOAKED (0);
			turn door1 to z-axis <-89> speed <300>;
			turn door2 to z-axis <89> speed <300>;
			sleep 300;
			set ARMORED to 0;
			move door1 to y-axis [-7.700000] speed [12];
			move door2 to y-axis [-7.700000] speed [12];
			move tower to y-axis [0] speed [28];
			sleep 500;
			move turret to y-axis [0] speed [12];
			sleep 250;
			move launcher to z-axis [0] speed [3];
			move tube1 to z-axis [0] speed [6];
			move tube2 to z-axis [0] speed [6];
			move tube3 to z-axis [0] speed [6];
			move tube4 to z-axis [0] speed [6];
			sleep 250;
		}
		busy_2 = 0;
		if( !restore_4 AND request_3 )
		{
			gun_1 = 0;
			set ACTIVATION to 0;
		}
		if( restore_4 )
		{
			--restore_4;
		}
		sleep 250;
	}
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache flare3;
	dont-cache flare4;
	dont-shade launcher;
	dont-shade turret;
	dont-shade tower;
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade tube1;
	dont-shade tube2;
	dont-shade tube3;
	dont-shade tube4;
	dont-shade hole;
	move door1 to y-axis [-7.7] now;
	move door2 to y-axis [-7.7] now;
	turn door1 to z-axis <-89> now;
	turn door2 to z-axis <89> now;
	on_1 = 1;
	busy_2 = 0;
	request_3 = 0;
	pitch_5 = 0;
	gun_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	restore_4 = 24;
	start-script RequestState();
	start-script SmokeUnit();
}

Deactivate()
{
	signal 2;
	request_3 = 0;
	return (0);
}

Activate()
{
	request_3 = 1;
	return (0);
}

AimPrimary(heading, pitch)
{
	if( !request_3 )
	{
		set ACTIVATION to 1;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <480>;
	while( !on_1 OR busy_2 )
	{
		sleep 250;
	}
	turn launcher to x-axis <0> - pitch speed <270>;
	wait-for-move tube1 along z-axis;
	wait-for-move tube2 along z-axis;
	wait-for-move tube3 along z-axis;
	wait-for-move tube4 along z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	restore_4 = 20;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		show flare1;
		move flare1 to z-axis [1.11] speed [500];
		sleep 150;
		hide flare1;
		move flare1 to z-axis [0] speed [0.6];
	}
	if( gun_1 == 1 )
	{
		show flare2;
		move flare2 to z-axis [1.11] speed [500];
		sleep 150;
		hide flare2;
		move flare2 to z-axis [0] speed [0.6];
	}
	if( gun_1 == 2)
	{
		show flare3;
		move flare3 to z-axis [1.11] speed [500];
		sleep 150;
		hide flare3;
		move flare3 to z-axis [0] speed [0.6];
	}
	++gun_1;
	if( gun_1 > 3 )
	{
		show flare4;
		move flare4 to z-axis [1.11] speed [500];
		sleep 150;
		hide flare4;
		move flare4 to z-axis [0] speed [0.6];
		wait-for-move tube4 along z-axis;
		gun_1 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	if( severity <= 25 )
	{
		if( on_1 )
		{
			corpsetype = 1;
		}
		if( !on_1 )
		{
			corpsetype = 2;
		}
		explode base type BITMAPONLY | BITMAP1;
		explode flare3 type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode tube1 type BITMAPONLY | BITMAP5;
		explode tube2 type BITMAPONLY | BITMAP1;
		explode tower type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode flare4 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare3 type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP4;
		explode tube1 type FALL | BITMAP5;
		explode tube2 type FALL | BITMAP1;
		explode tower type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode flare4 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare3 type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode tube1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode tube2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode tower type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		explode flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 4;
	explode base type BITMAPONLY | BITMAP1;
	explode flare3 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode tube1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode tube2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode tower type BITMAPONLY | BITMAP2;
	explode turret type BITMAPONLY | BITMAP3;
	explode flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
