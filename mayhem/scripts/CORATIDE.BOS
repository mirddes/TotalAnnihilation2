
piece body ,wheel1 , wheel2 ,wheel3 ,gun ,flare ,torplauncher ,torp ,tower, base;

#define SMOKEPIECE base
#include "smokeunit.h"
#include "exptype.h"

/*NanoFrameInit()
{
	hide flare;
}

Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade wheel1;
	dont-shade wheel2;
	dont-shade wheel3;
	dont-cache body;
	dont-cache gun;
	dont-cache tower;
	dont-shade body;
	dont-shade gun;
	dont-shade tower;
	dont-cache flare;
	hide flare;
	start-script SmokeUnit();
}

Activate()
{
	dont-cache wheel1;
	dont-cache wheel2;
	dont-cache wheel3;
	spin wheel1 around y-axis speed <40>;
	spin wheel2 around y-axis speed <40>;
	spin wheel3 around y-axis speed <40>;
}

Deactivate()
{
	spin wheel1 around y-axis speed <0>;
	spin wheel2 around y-axis speed <0>;
	spin wheel3 around y-axis speed <0>;
	cache wheel1;
	cache wheel2;
	cache wheel3;
}

AimPrimary(heading,pitch)
{
	SIGNAL 2;
	SET-SIGNAL-MASK 2;
	TURN gun to y-axis heading SPEED <200>;
	TURN gun to x-axis (0 - pitch) SPEED <80>;
	WAIT-FOR-TURN gun around y-axis;
	WAIT-FOR-TURN gun around x-axis;
	RETURN ( TRUE );
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
		piecenum = gun;
}

AimSecondary(heading,pitch)
{
	SIGNAL 4;
	SET-SIGNAL-MASK 4;
	TURN torplauncher to y-axis heading SPEED <100>;
	WAIT-FOR-TURN torplauncher around y-axis;
	RETURN ( TRUE );
}

FireSecondary()
{
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = torp;
}

AimFromSecondary(piecenum)
{
		piecenum = torplauncher;
}

SweetSpot(piecenum)
{
	piecenum=body;
}

Killed( severity, corpsetype )
{
	if (severity <= 25)
{
		corpsetype = 1;
		explode body type	BITMAPONLY | BITMAP1;
		explode wheel1 type	BITMAPONLY | BITMAP2;
		explode wheel2 type	BITMAPONLY | BITMAP1;
		explode wheel3 type	BITMAPONLY | BITMAP2;
		explode gun type	BITMAPONLY | BITMAP2;
		return( 0 );
	}

	if (severity <= 50)
	{
		corpsetype = 2;
		explode body type	BITMAPONLY | BITMAP1;
		explode wheel1 type	BITMAPONLY | BITMAP2;
		explode wheel2 type	BITMAPONLY | BITMAP1;
		explode wheel3 type	BITMAPONLY | BITMAP2;
		explode gun type	BITMAPONLY | BITMAP1;
		explode tower type	BITMAPONLY | BITMAP2;
		return( 0 );
	}

	if (severity <= 99)
	{
		corpsetype = 3;
		explode base type	BITMAPONLY | BITMAP1;
		explode wheel1 type	BITMAPONLY | BITMAP2;
		explode wheel2 type	BITMAPONLY | BITMAP2;
		explode wheel3 type	BITMAPONLY | BITMAP1;
		explode gun type	BITMAPONLY | BITMAP1;
		explode tower type	BITMAPONLY | BITMAP1;
		return( 0 );
	}

	corpsetype = 3;
	explode body type	BITMAPONLY | BITMAP1;
	explode wheel1 type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wheel2 type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wheel3 type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode gun type	SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode tower type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
	return( 0 );
}
