#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, bubbles, launcher, flare, barrel, coil1, coil2, coil3;

static-var reload_1;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( ( get BUILD_PERCENT_LEFT ) )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	reload_1 = 0;
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	while( reload_1 )
	{
		wait-for-move barrel along z-axis;
	}
	turn launcher to y-axis heading speed <80>;
	wait-for-turn launcher around y-axis;
	return (1);
}

FirePrimary()
{
	reload_1 = 1;
	move barrel to z-axis [-3.30] speed [60];
	move coil1 to z-axis [-0.95] speed [17.27];
	move coil2 to z-axis [-1.85] speed [33.64];
	move coil3 to z-axis [-2.75] speed [50];
	sleep 55;
	move barrel to z-axis [-0.3] speed [4];
	move coil1 to z-axis [0] speed [1.37];
	move coil2 to z-axis [0] speed [2.66];
	move coil3 to z-axis [0] speed [3.96];
	sleep 750;
	move barrel to z-axis [0] speed [0.094];
	wait-for-move barrel along z-axis;
	reload_1 = 0;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = bubbles;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles type BITMAPONLY | BITMAP2;
		explode launcher type BITMAPONLY | BITMAP3;
		explode barrel type BITMAPONLY | BITMAP4;
		explode coil1 type BITMAPONLY | BITMAP5;
		explode coil2 type BITMAPONLY | BITMAP1;
		explode coil3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles type FALL | BITMAP2;
		explode launcher type BITMAPONLY | BITMAP3;
		explode barrel type SHATTER | BITMAP4;
		explode coil1 type FALL | BITMAP5;
		explode coil2 type FALL | BITMAP1;
		explode coil3 type FALL | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode launcher type BITMAPONLY | BITMAP3;
		explode barrel type SHATTER | BITMAP4;
		explode coil1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode coil2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode coil3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode bubbles type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode launcher type BITMAPONLY | BITMAP3;
	explode barrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode coil1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode coil2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode coil3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}