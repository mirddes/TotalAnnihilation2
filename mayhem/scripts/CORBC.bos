#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare1c, flare1d, barrel1a, barrel1b, barrel1c, barrel1d,
       sleeves1, turret1, flare2, barrel2, glow2, inside2, lights, turret2, 
       t1, t2, t3, t4, torp, wake1, wake2, wake3, 
       wake4, hull, base;

static-var  gun_1, aiming_2, gun_3, restore_4, reset_5, bHealing;

RestoreAfterDelay()
{
	/*if( bHealing )
	{
		bHealing = 0;
		get SET_UNITINFO(uiHealTime,0);
	}*/
	sleep 6000;
	if( !restore_4 )
	{
		signal 2;
		signal 4;
		signal 16;
		aiming_2 = 0;
		turn turret2 to y-axis <0> speed <80>;
		turn turret2 to x-axis <0> speed <40>;
		turn torp to y-axis <0> speed <80>;
		turn turret1 to y-axis <0> speed <60>;
		turn sleeves1 to x-axis <0> speed <30>;
		move glow2 to z-axis [0] speed [4.25];
		/*if( !bHealing )
		{
			bHealing = 1;
			get SET_UNITINFO(uiHealTime,20);
		}*/
	}
	reset_5 = 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype, smokepiece)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			smokepiece = Rand( 1, 3 );
			if( smokepiece == 1 )
			{
				emit-sfx smoketype from hull;
			}
			if( smokepiece == 2 )
			{
				emit-sfx smoketype from turret1;
			}
			if( smokepiece == 3 )
			{
				emit-sfx smoketype from turret2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		if( restore_4 and !reset_5 )
		{
			reset_5 = 1;
			restore_4 = 0;
			Start-script RestoreAfterDelay();
		}
		sleep sleeptime;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare1d;
	hide flare2;
	dont-cache flare1a;
	dont-cache flare1b;
	dont-cache flare1c;
	dont-cache flare1d;
	dont-cache flare2;
	gun_1 = 0;
	aiming_2 = 0;
	gun_3 = 0;
	restore_4 = 0;
	reset_5 = 0;
	bHealing = 0;
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	dont-cache lights;
	dont-cache inside2;
	dont-cache glow2;
	start-script SmokeUnit();
	/*set GRANT_UNITINFO to 1;
	if( !bHealing )
	{
		bHealing = 1;
		get SET_UNITINFO(uiHealTime,20);
	}
	if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var target,lasttarget;
		lasttarget=0;
		while (1)
		{
			if ((get CURRENT_ORDER_TYPE) == 6)
			{
				target=get CURRENT_ORDER_TARGET_ID;
				while ((get CURRENT_ORDER_TYPE) == 6)
				{
					target=get CURRENT_ORDER_TARGET_ID;
					if (target != lasttarget)
					{
						get LOCAL_SHARED_DATA(1,20 + (get UNIT_TEAM(get MY_ID)),target);
					}
					lasttarget=target;
					sleep 500;
				}
				if ((get CURRENT_ORDER_TYPE) == 41)
				{
					target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					while (!(get UNIT_XZ(target)))
					{
						sleep 500;
						target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					}
					get ORDER_UNIT_UNIT(6,get MY_ID,target,0);
				}
			}
			sleep 500;
		}
	}*/
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 4 from wake3;
		emit-sfx 2 from wake4;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret1 to y-axis heading speed <90>;
	turn sleeves1 to x-axis <0> - pitch speed <40>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeves1 around x-axis;
	Restore_4 = 1;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	move glow2 to z-axis [4.25] speed [1.0625];
	turn turret2 to y-axis heading speed <120>;
	turn turret2 to x-axis ( 0 - pitch ) speed <60>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	wait-for-move glow2 along z-axis;
	Restore_4 = 1;	
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	turn torp to y-axis heading speed <200>;
	wait-for-turn torp around y-axis;
	Restore_4 = 1;	
	return (1);
}

FirePrimary()
{
	if( gun_3 == 0 )
	{
		move barrel1a to z-axis [-2] speed [500];
		show flare1a;
		sleep 150;
		move barrel1a to z-axis [0] speed [2];
		hide flare1a;
	}
	if( gun_3 == 1 )
	{
		move barrel1b to z-axis [-2] speed [500];
		show flare1b;
		sleep 150;
		move barrel1b to z-axis [0] speed [2];
		hide flare1b;
	}
	if( gun_3 == 2 )
	{
		move barrel1c to z-axis [-2] speed [500];
		show flare1c;
		sleep 150;
		move barrel1c to z-axis [0] speed [2];
		hide flare1c;
	}
	++gun_3;
	if( gun_3 > 3 )
	{
		gun_3 = 0;
		move barrel1d to z-axis [-2] speed [500];
		show flare1d;
		sleep 150;
		move barrel1d to z-axis [0] speed [2];
		hide flare1d;
	}
}

FireSecondary()
{
	show flare2;
	move barrel2 to z-axis [-3.3] speed [500];
	move glow2 to z-axis [0] speed [500];
	sleep 150;
	hide flare2;
	move barrel2 to z-axis [0] speed [3.3];
}

FireTertiary()
{
	++gun_3;
	if( gun_3 > 3 )
	{
		gun_3 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

AimFromTertiary(piecenum)
{
	piecenum = torp;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

QueryTertiary(piecenum)
{
	if ( !gun_3 )
	{
		piecenum = t1;
	}
	if ( gun_3 == 1 )
	{
		piecenum = t2;
	}
	if ( gun_3 == 2 )
	{
		piecenum = t3;
	}
	if ( gun_3 > 2 )
	{
		piecenum = t4;
	}
}

SweetSpot(piecenum)
{
	piecenum = hull;
}

Killed(severity, corpsetype)
{
	explode torp type BITMAPONLY | BITMAP5;
	explode turret1 type BITMAPONLY | BITMAP3;
	explode turret2 type BITMAPONLY | BITMAP4;
	explode lights type SHATTER | BITMAP5;
	explode hull type BITMAPONLY | BITMAP1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1a type BITMAPONLY | BITMAP1;
		explode barrel1b type FALL | FIRE | BITMAP2;
		explode barrel1d type BITMAPONLY | BITMAP3;
		explode glow2 type BITMAPONLY | BITMAP1;
		explode inside2 type FALL | FIRE | BITMAP2;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP2;
		explode wake3 type BITMAPONLY | BITMAP2;
		explode wake4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode barrel1d type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode barrel1c type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode inside2 type FALL | FIRE | BITMAP2;
		explode glow2 type SHATTER | FIRE | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode wake1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode wake3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode wake4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1d type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode inside2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode glow2 type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1d type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode inside2 type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode glow2 type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
