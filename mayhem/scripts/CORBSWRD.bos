#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  d1, d2, d3, turret, sleeve, barrel1, barrel2, barrel3,
       misturret, launcher, emit1, emit2, emit3, wake1, wake2, wake3,
       wake4, wake5, wake6, wake7, wake8, wake9, wake10, base,
       hull, counteraim, countermis;

static-var gun_1, gun_2, reset_3, timer_4, fx_5, delay_6, delay_7, bAiming;


RestoreAfterDelay()
{
	sleep 4000;
	if ( !reset_3 )
	{
		bAiming = 0;
		signal 2;
		signal 4;
		set-signal-mask 0;
		turn sleeve to x-axis <0> speed <25>;
		turn launcher to x-axis <0> speed <50>;
		move emit1 to z-axis [0] speed [1.2];
		move emit2 to z-axis [0] speed [1.2];		
		move emit2 to z-axis [0] speed [1.2];
		gun_2 = 0;
		gun_1 = 0;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		if( reset_3 AND timer_4 >= 0 )
		{
			timer_4 = timer_4 - sleeptime;
		}
		sleep sleeptime;
		if( reset_3 AND timer_4 < 0 )
		{
			reset_3 = 0;
			timer_4 = 0;
			start-script RestoreAfterDelay();
		}
	}
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( fx_5 <= 3 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake9;
			emit-sfx 3 from wake10;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 5 from wake9;
			emit-sfx 5 from wake10;
		}
		while( count < 9 )
		{
			turn base to y-axis get XZ_ATAN(0) now;
			turn hull to y-axis (0 - get XZ_ATAN(0)) speed <18>;
			turn counteraim to y-axis get XZ_ATAN(0) speed <18>;
			turn countermis to y-axis get XZ_ATAN(0) speed <18>;
			if( !bAiming )
			{
				turn turret to y-axis (0 - get XZ_ATAN(0)) speed <18>;
				turn misturret to y-axis (0 - get XZ_ATAN(0)) speed <18>;
			}
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	fx_5 = Func_Var_1;
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	reset_3 = 0;
	timer_4 = 0;
	delay_6 = 0;
	delay_7 = 0;
	bAiming = 0;
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
		turn base to y-axis get XZ_ATAN(0) now;
		turn hull to y-axis (0 - get XZ_ATAN(0)) now;
		turn counteraim to y-axis get XZ_ATAN(0) NOW;
		turn countermis to y-axis get XZ_ATAN(0) NOW;
		turn turret to y-axis (0 - get XZ_ATAN(0)) NOW;
		turn misturret to y-axis (0 - get XZ_ATAN(0)) NOW;
	}
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	bAiming = 1;
	turn turret to y-axis ( heading - get XZ_ATAN(0)) speed <120>;
	turn sleeve to x-axis <0> - pitch speed <45>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	while( delay_6 )
	{
		wait-for-move barrel3 along z-axis;
	}
	reset_3 = 1;
	timer_4 = 4000;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	bAiming = 1;
	move launcher to y-axis [1] speed [2];
	turn misturret to y-axis ( heading - get XZ_ATAN(0)) speed <200>;
	turn launcher to x-axis 0 - pitch speed <90>;
	wait-for-turn misturret around y-axis;
	wait-for-turn launcher around x-axis;
	move emit1 to z-axis [1] speed [5];
	move emit2 to z-axis [1] speed [5];
	move emit3 to z-axis [1] speed [5];
	while( delay_7 )
	{
		wait-for-move emit3 along z-axis;
	}
	reset_3 = 1;
	timer_4 = 4000;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		move barrel1 to z-axis [-1.4] speed [200];
		sleep 200;
		move barrel1 to z-axis [0] speed [0.2];
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-1.4] speed [200];
		sleep 200;
		move barrel2 to z-axis [0] speed [0.2];
	}
	++gun_1;
	if( gun_1 > 2 )
	{
		delay_6 = 1;
		move barrel3 to z-axis [-1.4] speed [200];
		sleep 200;
		move barrel3 to z-axis [0] speed [0.2];
		wait-for-move barrel1 along z-axis;
		wait-for-move barrel2 along z-axis;
		wait-for-move barrel3 along z-axis;
		gun_1 = 0;
		delay_6 = 0;
	}
}

FireSecondary()
{
	if( !gun_2 )
	{
		gun_2 = 1;
		hide emit1;
		move emit1 to z-axis [-1] NOW;
		sleep 400;
		show emit1;
		move emit1 to z-axis [0] speed [0.625];
		return (0);
	}
	if( gun_2 == 1 )
	{
		gun_2 = 2;
		hide emit2;
		move emit2 to z-axis [-1] NOW;
		sleep 400;
		show emit2;
		move emit2 to z-axis [0] speed [0.625];
		return (0);
	}
	if( gun_2 == 2 )
	{
		delay_7 = 1;
		gun_2 = 0;
		hide emit3;
		move emit3 to z-axis [-1] NOW;
		sleep 400;
		show emit3;
		move emit3 to z-axis [0] speed [0.625];
		wait-for-move emit3 along z-axis;
		delay_7 = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

AimFromSecondary(piecenum)
{
	piecenum = misturret;
}

QueryPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = d1;
	}
	if( gun_1 == 1 )
	{
		piecenum = d2;
	}
	if( gun_1 > 1 )
	{
		piecenum = d3;
	}
}

QuerySecondary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = emit1;
	}
	if( gun_2 == 1 )
	{
		piecenum = emit2;
	}
	if( gun_2 > 1 )
	{
		piecenum = emit3;
	}
}

QueryTertiary(piecenum)
{
	piecenum = base;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

AimTertiary(heading, pitch)
{
	signal 16;
	set-signal-mask 0;
	set-signal-mask 16;
	while( fx_5 == 4 )
	{
		sleep 250;
	}
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( fx_5 >= 4 AND severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode barrel3 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP1;
		explode wake3 type BITMAPONLY | BITMAP1;
		explode wake4 type BITMAPONLY | BITMAP1;
		explode wake5 type BITMAPONLY | BITMAP1;
		explode wake6 type BITMAPONLY | BITMAP1;
		explode wake7 type BITMAPONLY | BITMAP1;
		explode wake8 type BITMAPONLY | BITMAP1;
		explode wake9 type BITMAPONLY | BITMAP1;
		explode wake10 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP1;
		explode barrel3 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode sleeve type FALL | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		explode wake1 type FALL | BITMAP1;
		explode wake2 type FALL | BITMAP1;
		explode wake3 type FALL | BITMAP1;
		explode wake4 type FALL | BITMAP1;
		explode wake5 type FALL | BITMAP1;
		explode wake6 type FALL | BITMAP1;
		explode wake7 type FALL | BITMAP1;
		explode wake8 type FALL | BITMAP1;
		explode wake9 type FALL | BITMAP1;
		explode wake10 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
