#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  base, winga, wingb, doora, doorb, thrusta1, thrusta2, thrustb;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

Activate()
{
//			turn winga to z-axis <0> now;
			turn winga to z-axis <-90.14> speed <61.87>;
//			turn wingb to z-axis <0> now;
			turn wingb to z-axis <90.14> speed <61.87>;
			sleep 1469;
	return (0);
}

Deactivate()
{
//			turn winga to z-axis <-90.14> now;
			turn winga to z-axis <0> speed <61.95>;
//			turn wingb to z-axis <90.14> now;
			turn wingb to z-axis <0> speed <61.95>;
			sleep 1473;
	return (0);
}

StartBuilding(sleeptime)
{
	sleeptime = Rand(1,500);
	sleep sleeptime;
	set INBUILDSTANCE to 1;
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 54)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}*/
	return (0);
}

StopBuilding()
{
	/*if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - (get GROUND_HEIGHT(get UNIT_XZ(buildingid)) / 131072);
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(54,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}*/
	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = base;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode winga type BITMAPONLY | BITMAP2;
		explode wingb type BITMAPONLY | BITMAP3;
		explode doora type BITMAPONLY | BITMAP4;
		explode doorb type BITMAPONLY | BITMAP5;
		explode thrusta1 type BITMAPONLY | BITMAP1;
		explode thrusta2 type BITMAPONLY | BITMAP2;
		explode thrustb type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode winga type SHATTER | BITMAP2;
		explode wingb type BITMAPONLY | BITMAP3;
		explode doora type BITMAPONLY | BITMAP4;
		explode doorb type BITMAPONLY | BITMAP5;
		explode thrusta1 type FALL | BITMAP1;
		explode thrusta2 type FALL | BITMAP2;
		explode thrustb type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode winga type SHATTER | BITMAP2;
		explode wingb type BITMAPONLY | BITMAP3;
		explode doora type BITMAPONLY | BITMAP4;
		explode doorb type BITMAPONLY | BITMAP5;
		explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode winga type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wingb type BITMAPONLY | BITMAP3;
	explode doora type BITMAPONLY | BITMAP4;
	explode doorb type BITMAPONLY | BITMAP5;
	explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}