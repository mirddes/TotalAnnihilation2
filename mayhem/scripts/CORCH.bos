#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam, nano, gun, post, wake1, wake2, wake3, wake4,
       wake5, wake6, wake7, wake8, base, GP;

static-var  Depth_1, Heading_2, Request_3, Busy_4, State_5; //buildingid, buildingpos, buildingtype, buildingcrc;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(sleeptime)
{
	while( ( !Busy_4 ) AND ( Request_3 != State_5 ) )
	{
		Busy_4 = 1;
		if( Request_3 )
		{
			move gun to y-axis [2.8] speed [5.4];
			sleep 500;
			move nano to z-axis [-3.3] speed [6.6];
			sleep 500;
			turn gun to z-axis <90> speed <180>;
			turn gun to y-axis (<180> + Heading_2 ) speed <130.000000>;
			wait-for-turn gun around y-axis;
			sleeptime = Rand(1,500);
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			State_5 = 1;
		}
		if( !Request_3 )
		{
			State_5 = 0;
			set INBUILDSTANCE to 0;
			turn gun to y-axis <0.000000> speed <160.000000>;
			turn gun to z-axis <0> speed <180>;
			sleep 500;
			move nano to z-axis [0] speed [6.6];
			sleep 500;
			wait-for-turn gun around y-axis;
			move gun to y-axis [0] speed [5.4];
		}
		Busy_4 = 0;
	}
}

StartMoving(count)
{
	//moving=1;
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( depth_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <48>;
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
	/*if ((get CURRENT_ORDER_TYPE) == 25 AND (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2))
	{
		sleep 1000;
		if (!bMoving AND !request_3)
		{
			get ORDER_SELF(45,0);
		}
	}*/
}

setSFXoccupy(Func_Var_1)
{
	Depth_1 = Func_Var_1;
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;*/
	Heading_2 = 0;
	Request_3 = 0;
	Busy_4 = 0;
	State_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
	}
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	Heading_2 = Func_Var_1;
	Request_3 = 1;
	start-script RequestState();
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 25)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}*/
	return (0);
}

StopBuilding()
{
	/*if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - (get GROUND_HEIGHT(get UNIT_XZ(buildingid)) / 131072);
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(25,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}*/
	Request_3 = 0;
	sleep 5000;
	if( !Request_3 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Heading_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide wake1;
	hide wake2;
	hide wake3;
	hide wake4;
	hide wake5;
	hide wake6;
	hide wake7;
	hide wake8;
	if( Depth_1 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode beam type BITMAPONLY | BITMAP2;
			explode nano type BITMAPONLY | BITMAP5;
			explode post type BITMAPONLY | BITMAP1;
			explode gun type BITMAPONLY | BITMAP2;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | SMOKE | BITMAP2;
		explode nano type FALL | BITMAP5;
		explode post type FALL | BITMAP1;
		explode gun type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun type SHATTER | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP2;
}
