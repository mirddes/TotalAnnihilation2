#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, leftwing, rightwing, nano1, nano2;

static-var  WaterDepth_1, nano_2, moving; //buildingid, buildingpos, buildingtype, buildingcrc;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	var bcheck;
	bcheck = get BUILD_PERCENT_LEFT;*/
	nano_2 = 0;
	moving=0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	/*if( bcheck != 0 )
	{
		{
			if (get LOCAL_SHARED_DATA(0,get UNIT_TEAM(get MY_ID)) < 2)
			{
		    	get LOCAL_SHARED_DATA(1,get UNIT_TEAM(get MY_ID),2);
		    }
		}
	}*/
	return (0);
}

MoveRate1()
{
	/*if ((get CURRENT_ORDER_TYPE) == 54 AND (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2) AND (get INBUILDSTANCE) == 0)
	{
		get ORDER_SELF(45,0);
		get RESET_ORDER;
	}*/
}

Activate()
{
	turn leftwing to z-axis <90> speed <98.489011>;
	turn rightwing to z-axis <-90> speed <98.489011>;
	sleep 924;
	return (0);
}

Deactivate()
{
	turn leftwing to z-axis <0> speed <120.027473>;
	turn rightwing to z-axis <0> speed <120.027473>;
	sleep 760;
	return (0);
}

StartMoving()
{
	if( !moving )
	{
		moving=1;
		while (moving)
		{
			if( WaterDepth_1 == 3 )
			{
				emit-sfx 256 | 3 from base;
				emit-sfx 256 | 3 from leftwing;
				emit-sfx 256 | 3 from rightwing;
				emit-sfx 256 | 3 from nano1;
				emit-sfx 256 | 3 from nano2;
			}
			sleep 150;
		}
	}
	return (0);
}

StopMoving()
{
	moving=0;
}

StartBuilding(sleeptime)
{
	sleeptime = Rand(1,500);
	sleep sleeptime;
	set INBUILDSTANCE to 1;
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 54)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}*/
	return (0);
}

StopBuilding()
{
	/*if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - 30;
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(54,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}*/
	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	nano_2 = !nano_2;
	if( nano_2 )
	{
	piecenum = nano1;
	}
	if( !nano_2 )
	{
	piecenum = nano2;
	}	
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode leftwing type BITMAPONLY | BITMAP2;
		explode rightwing type BITMAPONLY | BITMAP3;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode leftwing type SHATTER | BITMAP2;
		explode rightwing type BITMAPONLY | BITMAP3;
		explode nano1 type FALL | BITMAP4;
		explode nano2 type FALL | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode leftwing type SHATTER | BITMAP2;
		explode rightwing type BITMAPONLY | BITMAP3;
		explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode leftwing type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode rightwing type BITMAPONLY | BITMAP3;
	explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	WaterDepth_1 = Func_Var_1;
	return (0);
}
