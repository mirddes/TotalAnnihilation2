#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, RWing, RWinglet, LWing, LWinglet,
       Turret, Barrel1, Barrel2, Barrel3, drop1, drop2, base;

static-var  gun_1, gun_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	/*set GRANT_UNITINFO to 1;
	get SET_UNITINFO(uiHealTime,20);*/
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	gun_1 = 0;
	gun_3 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
}

Activate()
{
	turn LWing to z-axis <0> now;
	turn LWinglet to z-axis <0> now;
	turn RWing to z-axis <0> now;
	turn RWinglet to z-axis <0> now;
	turn LWing to z-axis <90> speed <45>;
	turn LWinglet to z-axis <-179.50> speed <90>;
	turn RWing to z-axis <-90> speed <45>;
	turn RWinglet to z-axis <179.50> speed <90>;
	sleep 1500;
}

Deactivate()
{
	turn LWing to z-axis <90> now;
	turn RWing to z-axis <-90> now;
	turn LWinglet to z-axis <-179.50> now;
	turn RWinglet to z-axis <179.50> now;
	turn LWing to z-axis <0> speed <50>;
	turn RWing to z-axis <0> speed <50>;
	turn LWinglet to z-axis <0> speed <100>;
	turn RWinglet to z-axis <0> speed <100>;
	sleep 1200;
}

QueryPrimary(piecenum)
{
	gun_1 = !gun_1;
	if( gun_1 )
	{ 
		piecenum = drop1;
		return(0);
	}
	piecenum = drop2;
}

RestoreAfterDelay()
{
	sleep 5000;
	turn Turret to y-axis <0> speed <240>;
	turn Barrel1 to x-axis <0> speed <180>;
	turn Barrel2 to x-axis <0> speed <180>;
	turn Barrel3 to x-axis <0> speed <180>;
}

AimTertiary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn Turret to y-axis heading speed <700>;
	if( pitch < 0 )
	{
		turn Barrel1 to x-axis <0> - pitch speed <500>;
		turn Barrel2 to x-axis <0> - pitch speed <500>;
		turn Barrel3 to x-axis <0> - pitch speed <500>;
	}
	wait-for-turn Turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( !gun_3 )
	{
		move Barrel1 to z-axis [-2] speed [500];
		sleep 150;
		move Barrel1 to z-axis [0] speed [2];
	}
	if( gun_3 == 1 )
	{
		move Barrel2 to z-axis [-2] speed [500];
		sleep 150;
		move Barrel2 to z-axis [0] speed [2];
	}
	++gun_3;
	if( gun_3 > 2 )
	{
		move Barrel3 to z-axis [-2] speed [500];
		sleep 150;
		move Barrel3 to z-axis [0] speed [2];
		gun_3 = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = Turret;
}

QueryTertiary(piecenum)
{
	piecenum = gun_3;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAPNUKE;
		explode LWinglet type BITMAPONLY | BITMAP3;
		explode RWinglet type BITMAPONLY | BITMAP4;
		explode LWing type BITMAPONLY | BITMAP3;
		explode RWing type BITMAPONLY | BITMAP4;
		explode Turret type BITMAPONLY | BITMAP3;
		explode Barrel1 type FALL | BITMAP5;
		explode Barrel2 type FALL | BITMAP5;
		explode Barrel3 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAPNUKE;
		explode LWinglet type FALL | BITMAP3;
		explode RWinglet type FALL | BITMAP4;
		explode LWinglet type FALL | BITMAP3;
		explode RWinglet type FALL | BITMAP4;
		explode LWing type BITMAPONLY | BITMAP3;
		explode RWing type BITMAPONLY | BITMAP4;
		explode Turret type BITMAPONLY | BITMAP3;
		explode Barrel1 type FALL | FIRE | BITMAP5;
		explode Barrel2 type FALL | FIRE | BITMAP5;
		explode Barrel3 type FALL | FIRE | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAPNUKE;
		explode LWinglet type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode RWinglet type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode LWing type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode RWing type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Turret type BITMAPONLY | BITMAP3;
		explode Barrel1 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Barrel2 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Barrel3 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAPNUKE;
	explode LWinglet type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode RWinglet type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode LWing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode RWing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Turret type BITMAPONLY | BITMAP3;
	explode Barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
