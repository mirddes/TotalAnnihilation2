#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  firept, laser, turret, launcher, wake1, wake2, wake3, wake4, 
       wake5, wake6, wake7, wake8, missile, counteraim, base, GP;

static-var  Depth_1, Restore_2, Reset_3, Busy_4, missile_5, delay_6, AA_7, bAiming;


RestoreAfterDelay()
{
	sleep 4000;
	if( !Restore_2 )
	{
		bAiming = 0;
		turn laser to x-axis <0> speed <15>;
		turn launcher to x-axis <0> speed <120>;
		move launcher to y-axis [0] speed [1];
		signal 2;
		signal 4;
		signal 16;
	}
	Reset_3 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Restore_2 AND ( !Reset_3 ) )
		{
			Restore_2 = FALSE;
			Reset_3 = 1;
			start-script RestoreAfterDelay();
		}
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( Busy_4 )
	{
		return(0);
	}
	Busy_4 = 1;
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	Busy_4 = 0;
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( Depth_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		while (count < 9)
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <42>;
			turn counteraim to y-axis get XZ_ATAN(0) speed <42>;
			if( !bAiming )
			{
				turn turret to y-axis (0 - get XZ_ATAN(0)) speed <42>;
			}
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	Depth_1 = Func_Var_1;
}

Create()
{
	hide firept;
	Restore_2 = 0;
	Reset_3 = 0;
	Busy_4 = 0;	
	missile_5 = 0;
	delay_6 = 0;
	AA_7 = 0;
	bAiming = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
		turn counteraim to y-axis get XZ_ATAN(0) NOW;
		turn turret to y-axis (0 - get XZ_ATAN(0)) NOW;
	}
	start-script SmokeUnit();
}

AimTertiary(heading, pitch)
{
	AA_7 = 1;
	signal 16;
	signal 4;
	set-signal-mask 4;
	if( !missile_5 )
	{
		move launcher to y-axis [0.5] speed [4];
		sleep 125;
		missile_5 = 1;
	}
	bAiming = 1;
	while( delay_6 )
	{
		sleep 250;
	}
	turn launcher to y-axis ( heading - get XZ_ATAN(0)) speed <240>;
	turn launcher to x-axis <0> - pitch speed <150>;
	wait-for-turn launcher around x-axis;
	wait-for-turn launcher around y-axis;
	Restore_2 = TRUE;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	if( !missile_5 )
	{
		move launcher to y-axis [0.5] speed [4];
		sleep 125;
		missile_5 = 1;
	}
	bAiming = 1;
	while( delay_6 OR AA_7 )
	{
		sleep 250;
	}
	turn launcher to y-axis ( heading - get XZ_ATAN(0)) speed <240>;
	turn launcher to x-axis <0> - pitch speed <150>;
	wait-for-turn launcher around x-axis;
	wait-for-turn launcher around y-axis;
	Restore_2 = TRUE;
	return (1);
}

FireTertiary()
{
	delay_6 = 1;
	AA_7 = 0;
	move missile to z-axis [-1] NOW;
	move missile to z-axis 0 speed [0.425];
	wait-for-move missile along z-axis;
	delay_6 = 0;
	return (0);
}

FireSecondary()
{
	delay_6 = 1;
	move missile to z-axis [-1] NOW;
	move missile to z-axis 0 speed [0.425];
	wait-for-move missile along z-axis;
	delay_6 = 0;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = missile;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = missile;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	bAiming = 1;
	turn turret to y-axis ( heading - get XZ_ATAN(0)) speed <180>;
	turn laser to x-axis <0> - pitch speed <80>;
	wait-for-move laser along z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn laser around x-axis;
	Restore_2 = TRUE;
	return (1);
}

FirePrimary()
{
	move laser to z-axis [-0.9] speed [500];
	show firept;
	sleep 100;
	hide firept;
	move laser to z-axis [0] speed [0.5];
	wait-for-move laser along z-axis;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = firept;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide firept;
	if( Depth_1 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode turret type BITMAPONLY | BITMAP2;
			explode laser type BITMAPONLY | BITMAP3;
			explode launcher type BITMAPONLY | BITMAP4;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode laser type FALL | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode laser type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode laser type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
}
