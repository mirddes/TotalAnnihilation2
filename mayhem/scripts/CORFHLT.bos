#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, turret1, barrel1, barrel2, turret2;

static-var  Gun_1, busy_2;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if ( !busy_2 )
	{
		busy_2 = 1;
		turn base to z-axis Func_Var_2 speed <105>;
		turn base to x-axis Func_Var_1 speed <105>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0> speed <30>;
		turn base to x-axis <0> speed <30>;
		sleep 200;
		busy_2 = 0;
	}
	return (0);
}

/*NanoFrameInit()
{
	hide flare1;
	hide flare2;
}

Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	hide flare1;
	hide flare2;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade base;
	dont-shade turret1;
	dont-shade turret2;
	Gun_1 = 0;
	busy_2 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret1 to y-axis heading speed <180>;
	turn turret2 to x-axis ( <0> - pitch ) speed <95>;
	wait-for-move barrel1 along z-axis;
	wait-for-move barrel2 along z-axis;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret2 around x-axis;
	return (1);
}

FirePrimary()
{
	if( !Gun_1 )
	{
		move barrel1 to z-axis [-1.05] speed [500];
		show flare1;
		sleep 150;
		hide flare1;
		move barrel1 to z-axis 0 speed [0.5];
	}
	if( Gun_1 )
	{
		move barrel2 to z-axis [-1.05] speed [500];
		show flare2;
		sleep 150;
		hide flare2;
		move barrel2 to z-axis 0 speed [0.5];
	}
	Gun_1 = !Gun_1;
	wait-for-move barrel1 along z-axis;
	wait-for-move barrel2 along z-axis;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = Gun_1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret2;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type SHATTER | BITMAP2;
		explode barrel1 type FALL | BITMAP3;
		explode barrel2 type FALL | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type SHATTER | BITMAP2;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret2 type BITMAPONLY | BITMAP5;
	return (0);
}