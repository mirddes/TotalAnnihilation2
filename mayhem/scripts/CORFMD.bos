#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, collar, buttons, wedge, drawer, dummy;

static-var  Ready_1, Busy_2, Ready_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	set ARMORED to 1;
	dont-shade dummy;
	dont-shade drawer;
	dont-shade dummy;
	dont-shade wedge;
	Ready_1 = 0;
	Busy_2 = 0;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 15000;
	set-signal-mask 0;
	Busy_2 = 1;
	Ready_1 = 0;
	set ARMORED to 1;
	move wedge to x-axis [2.300] now;
	move drawer to y-axis [9.400] now;
	move dummy to x-axis [-2.100] now;
	move dummy to x-axis [0.000] speed [140.000];
	sleep 15;
	move drawer to y-axis [0.000] speed [14.570];
	sleep 645;
	move wedge to x-axis [0.000] speed [1.820];
	sleep 1268;
	cache drawer;
	cache dummy;
	cache wedge;
	sleep Rand( 1000, 4000 );
	Busy_2 = 0;
}

AimPrimary(heading, pitch)
{
	while( Busy_2 )
	{
		sleep 300;
	}
	if( !Ready_1 )
	{
		Busy_2 = 1;
		dont-cache drawer;
		dont-cache dummy;
		dont-cache wedge;
		move wedge to x-axis [0.000] now;
		move wedge to x-axis [2.300] speed [2.540];
		sleep 907;
		move drawer to y-axis [9.400] speed [16.100];
		sleep 584;
		move dummy to x-axis [-2.100] speed [4.770];
		sleep 445;
		set ARMORED to 0;
		Ready_1 = 1;
		sleep Rand( 500, 1500 );
		Busy_2 = 0;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	Busy_2 = 1;
	hide dummy;
	sleep 1000;
	move wedge to x-axis [2.300] now;
	move drawer to y-axis [9.400] now;
	move dummy to x-axis [0.250] now;
	move drawer to y-axis [0.000] speed [16.700];
	sleep 1570;
	show dummy;
	move wedge to x-axis [2.300] now;
	move drawer to y-axis [0.000] now;
	move drawer to y-axis [9.400] speed [22.000];
	sleep 430;
	move dummy to x-axis [-2.100] speed [20.000];
	sleep 1320;
	sleep Rand( 250, 1500 );
	Busy_2 = 0;
}

QueryPrimary(piecenum)
{
	piecenum = dummy;
}

AimFromPrimary(piecenum)
{
	piecenum = dummy;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	explode base type BITMAPONLY | BITMAP1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode wedge type BITMAPONLY | BITMAP2;
		explode drawer type BITMAPONLY | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode wedge type FALL | BITMAP2;
		explode drawer type SHATTER | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode drawer type SHATTER | BITMAP3;
		explode dummy type BITMAPONLY | BITMAP4;
		return (0);
	}
	explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode drawer type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode dummy type BITMAPONLY | BITMAP4;
}
