#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, gun1, gun2, gun3, spindle, stand;

static-var  gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	dont-cache flare;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache gun3;
	dont-cache spindle;
	dont-cache turret;
	dont-cache stand;
	dont-shade flare;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade gun3;
	dont-shade spindle;
	dont-shade turret;
	dont-shade stand;
	gun_1 = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn stand to y-axis heading speed <300>;
	turn turret to x-axis <0> - pitch speed <120>;
	wait-for-turn stand around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

FirePrimary()
{
	sleep 300;
	++gun_1;
	if( gun_1 == 1 )
	{
		turn spindle to z-axis <0> speed <400>;
	}
	if( gun_1 == 2 )
	{
		turn spindle to z-axis <120> speed <400>;
	}
	if( gun_1 > 2 )
	{
		turn spindle to z-axis <0> - <120> speed <400>;
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode gun1 type BITMAPONLY | BITMAP3;
		explode gun2 type BITMAPONLY | BITMAP4;
		explode gun3 type BITMAPONLY | BITMAP5;
		explode spindle type BITMAPONLY | BITMAP1;
		explode stand type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode gun1 type FALL | BITMAP3;
		explode gun2 type FALL | BITMAP4;
		explode gun3 type FALL | BITMAP5;
		explode spindle type FALL | BITMAP1;
		explode stand type FALL | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode spindle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode spindle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
