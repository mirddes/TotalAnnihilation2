#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rsonar, lsonar, lwing, rwing, ltail, rtail, wake1;

static-var  Depth_1, takeoff_2;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( ( get BUILD_PERCENT_LEFT ) )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	takeoff_2 = 0;
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	takeoff_2 = 1;
//	turn lwing to z-axis <0> now;
	turn lwing to z-axis <90> speed <112.24>;
//	turn rwing to z-axis <0> now;
	turn rwing to z-axis <-90> speed <112.24>;
	sleep 802;
	if( takeoff_2 )
	{
		turn ltail to z-axis <45.28> speed <55.97>;
		turn rtail to z-axis <-45.28> speed <55.97>;
//		sleep 802;
		move rsonar to y-axis [6.50] speed [13.24];
		move lsonar to y-axis [6.50] speed [13.24];
//		sleep 516;
		spin rsonar around x-axis speed <90>;
		spin lsonar around x-axis speed <90>;
	}
	return (0);
}

Deactivate()
{
	takeoff_2 = 0;
//	move rsonar to y-axis [6.50] now;
	move rsonar to y-axis [0] speed [13.08];
//	move lsonar to y-axis [6.50] now;
	move lsonar to y-axis [0] speed [13.08];
	turn lwing to z-axis <90> now;
	turn rwing to z-axis <-90> now;
	turn ltail to z-axis <45.28> now;
	turn rtail to z-axis <-45.28> now;
	sleep 497;
	if( !takeoff_2 )
	{
		turn ltail to z-axis <0> speed <56.18>;
		turn rtail to z-axis <0> speed <56.18>;
//		sleep 806;
		turn lwing to z-axis <0> speed <112.53>;
		turn rwing to z-axis <0> speed <112.53>;
//		sleep 845;
		spin rsonar around x-axis speed <0>;
		spin lsonar around x-axis speed <0>;
	}
	return (0);
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( Depth_1 == 3 )
		{
			emit-sfx 256 | 3 from rtail;
			emit-sfx 256 | 3 from ltail;
			emit-sfx 256 | 3 from base;
			emit-sfx 256 | 3 from rsonar;
			emit-sfx 256 | 3 from lwing;
			emit-sfx 256 | 3 from lsonar;
			emit-sfx 256 | 3 from rwing;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	signal 2;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Depth_1 = Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide wake1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode rsonar type BITMAPONLY | BITMAP2;
		explode lsonar type BITMAPONLY | BITMAP3;
		explode lwing type BITMAPONLY | BITMAP4;
		explode rwing type BITMAPONLY | BITMAP5;
		explode ltail type BITMAPONLY | BITMAP1;
		explode rtail type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode rsonar type FALL | BITMAP2;
		explode lsonar type SHATTER | BITMAP3;
		explode lwing type BITMAPONLY | BITMAP4;
		explode rwing type BITMAPONLY | BITMAP5;
		explode ltail type FALL | BITMAP1;
		explode rtail type FALL | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode rsonar type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lsonar type SHATTER | BITMAP3;
		explode lwing type BITMAPONLY | BITMAP4;
		explode rwing type BITMAPONLY | BITMAP5;
		explode ltail type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rtail type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode rsonar type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lsonar type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode lwing type BITMAPONLY | BITMAP4;
	explode rwing type BITMAPONLY | BITMAP5;
	explode ltail type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rtail type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}