#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  turret, pivot, fork1a, fork1b, fork1c, fork2a, fork2b, fork2c,
       base;

static-var  Request_1, Busy_2, Rest_3, Hit_4, State_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState()
{
	if( Busy_2 )
	{
		return (0);
	}
	Busy_2 = 1;
	while( Request_1 != state_5 )
	{
		if( Request_1 )
		{
			set ARMORED to 0;
			turn fork1a to z-axis <0> speed <105>;
			turn fork2a to z-axis <0> speed <105>;
			wait-for-turn fork1a around z-axis;
			wait-for-turn fork2a around z-axis;
			spin turret around y-axis speed <20>;
			spin pivot around z-axis speed <-45>;
			spin fork1a around x-axis speed <105>;
			spin fork2a around x-axis speed <-105>;
			spin fork1b around x-axis speed <-240>;
			spin fork2b around x-axis speed <240>;
			spin fork1c around x-axis speed <360>;
			spin fork2c around x-axis speed <-360>;
			state_5 = 1;
		}
		if( !Request_1 )
		{
			spin turret around y-axis speed <0>;
			spin pivot around z-axis speed <0>;
			spin fork1a around x-axis speed <0>;
			spin fork2a around x-axis speed <0>;
			spin fork1b around x-axis speed <0>;
			spin fork2b around x-axis speed <0>;
			spin fork1c around x-axis speed <0>;
			spin fork2c around x-axis speed <0>;
			turn pivot to z-axis <0> speed <90>;
			turn fork1a to x-axis <0> speed <105>;
			turn fork2a to x-axis <0> speed <105>;
			turn fork1b to x-axis <0> speed <135>;
			turn fork2b to x-axis <0> speed <135>;
			turn fork1c to x-axis <0> speed <120>;
			turn fork2c to x-axis <0> speed <120>;
			wait-for-turn pivot around z-axis;
			wait-for-turn fork1a around x-axis;
			wait-for-turn fork2a around x-axis;
			wait-for-turn fork1b around x-axis;
			wait-for-turn fork2b around x-axis;
			wait-for-turn fork1c around x-axis;
			wait-for-turn fork2c around x-axis;
			turn fork1a to z-axis <-90> speed <160>;
			turn fork2a to z-axis <90> speed <160>;
			set ARMORED to 1;
			wait-for-turn fork1a around z-axis;
			wait-for-turn fork2a around z-axis;
			state_5 = 0;
		}
	}
	Busy_2 = 0;
}

/*NanoFrameInit()
{
	turn fork1a to z-axis <-90> NOW;
	turn fork2a to z-axis <90> NOW;
}

Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade pivot;
	dont-shade turret;
	dont-shade fork1a;
	dont-shade fork1b;
	dont-shade fork1c;
	dont-shade fork2a;
	dont-shade fork2b;
	dont-shade fork2c;
	turn fork1a to z-axis <-90> NOW;
	turn fork2a to z-axis <90> NOW;
	Request_1 = 0;
	Busy_2 = 0;
	Rest_3 = 0;
	Hit_4 = 0;
	State_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

Activate()
{
	Request_1 = 1;
	Rest_3 = 0;
	Hit_4 = 0;
	start-script RequestState();
}

Deactivate()
{
	Request_1 = 0;
	start-script RequestState();
	if( hit_4 )
	{
		while( rest_3 and !Request_1 )
		{
			--rest_3;
			sleep 1000;
		}
		if( !Request_1 and Hit_4 )
		{
			set ACTIVATION to 1;
		}
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( get BUILD_PERCENT_LEFT )
	{
		return (0);
	}
	rest_3 = 6;
	hit_4 = 1;
	if( Request_1 )
	{
		set ACTIVATION to 0;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode pivot type BITMAPONLY | BITMAP2;
		explode fork1a type BITMAPONLY | BITMAP3;
		explode fork2a type BITMAPONLY | BITMAP4;
		explode fork1b type BITMAPONLY | BITMAP5;
		explode fork2b type BITMAPONLY | BITMAP1;
		explode fork1c type FALL | BITMAP4;
		explode fork2c type FALL | BITMAP5;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode pivot type SHATTER | BITMAP2;
		explode fork1a type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode fork2a type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode fork1b type FALL | BITMAP5;
		explode fork2b type FALL | BITMAP1;
		explode fork1c type FALL | BITMAP4;
		explode fork2c type FALL | BITMAP5;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode pivot type SHATTER | BITMAP2;
		explode fork1a type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode fork2a type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode fork1b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode fork2b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode fork1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode fork2c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode pivot type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fork1a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode fork2a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode fork1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode fork2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode fork1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode fork2c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret type BITMAPONLY | BITMAP2;
}
