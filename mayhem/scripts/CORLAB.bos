#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, upper2, upper1, lower1, lower2,
       ldoor2, udoor2, ldoor1, udoor1, lbox2, ubox2, lbox1, ubox1, gun2, gun1, blink;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ( ReqState_3 != On_4 ) )
	{
		Busy_5 = 1;
		if( ReqState_3 )
		{
			dont-cache beam1;
			dont-cache beam2;
			dont-cache gun1;
			dont-cache gun2;
			dont-cache lbox1;
			dont-cache lbox2;
			dont-cache ldoor1;
			dont-cache ldoor2;
			dont-cache lower1;
			dont-cache lower2;
			dont-cache pad;
			dont-cache ubox1;
			dont-cache ubox2;
			dont-cache udoor1;
			dont-cache udoor2;
			dont-cache upper1;
			dont-cache upper2;
			turn upper2 to x-axis <0> now;
			turn upper2 to x-axis <180> speed <194.64>;
			turn upper1 to x-axis <0> now;
			turn upper1 to x-axis <180> speed <194.64>;
	//		sleep 925;
			move lower1 to x-axis [8.90] speed [9];
			move lower2 to x-axis [-8.95] speed [9];
	//		sleep 990;
			move ldoor2 to y-axis [-0.15] speed [1.85];
			move udoor2 to y-axis [0.15] speed [1.85];
			move ldoor1 to y-axis [-0.15] speed [1.85];
			move udoor1 to y-axis [0.15] speed [1.85];
			turn udoor1 to y-axis <0.60> speed <7.51>;
			sleep 81;
			move ldoor2 to x-axis [-3.65] speed [7.67];
			move udoor2 to x-axis [-3.65] speed [7.67];
			move ldoor1 to x-axis [3.65] speed [7.67];
			move udoor1 to x-axis [3.70] speed [7.77];
			sleep 476;
			move pad to z-axis [6.25] speed [10.89];
			move lbox2 to y-axis [4.45] speed [7.75];
			move ubox2 to y-axis [-4.45] speed [7.75];
			move lbox1 to y-axis [4.45] speed [7.75];
			move ubox1 to y-axis [-4.45] speed [7.75];
	//		sleep 574;
			move gun2 to z-axis [1.10] speed [1.93];
			move gun1 to z-axis [1.10] speed [1.93];
			turn gun2 to y-axis <90> speed <158.21>;
			turn gun1 to y-axis <-90> speed <158.21>;
			sleep 598;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			spin pad around y-axis speed <30>;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			spin pad around y-axis speed <0>;
			move pad to z-axis [6.25] now;
			move lower1 to x-axis [8.90] now;
			move lower2 to x-axis [-8.95] now;
			move ldoor2 to x-axis [-3.65] now;
			move ldoor2 to y-axis [-0.15] now;
			move lbox2 to y-axis [4.45] now;
			move udoor2 to x-axis [-3.65] now;
			move udoor2 to y-axis [0.15] now;
			move ubox2 to y-axis [-4.45] now;
			move gun2 to z-axis [1.10] now;
			move gun2 to z-axis [0] speed [1.96];
			move ldoor1 to x-axis [3.65] now;
			move ldoor1 to y-axis [-0.15] now;
			move lbox1 to y-axis [4.45] now;
			move udoor1 to x-axis [3.70] now;
			move udoor1 to y-axis [0.15] now;
			move ubox1 to y-axis [-4.45] now;
			move gun1 to z-axis [1.10] now;
			move gun1 to z-axis [0] speed [1.96];
			turn upper2 to x-axis <180> now;
			turn gun2 to y-axis <90> now;
			turn gun2 to y-axis <0> speed <160.18>;
			turn upper1 to x-axis <180> now;
			turn udoor1 to y-axis <0.60> now;
			turn gun1 to y-axis <-90> now;
			turn gun1 to y-axis <0> speed <160.18>;
			sleep 562;
			move pad to z-axis [0] speed [10.96];
			move lbox2 to y-axis [0] speed [7.81];
			move ubox2 to y-axis [0] speed [7.81];
			move lbox1 to y-axis [0] speed [7.81];
			move ubox1 to y-axis [0] speed [7.81];
	//		sleep 570;
			move ldoor2 to x-axis [0] speed [6.38];
			move udoor2 to x-axis [0] speed [6.38];
			move ldoor1 to x-axis [0] speed [6.38];
			move udoor1 to x-axis [0] speed [6.47];
			sleep 572;
			move ldoor2 to y-axis [0] speed [1.25];
			move udoor2 to y-axis [0] speed [1.25];
			move ldoor1 to y-axis [0] speed [1.25];
			move udoor1 to y-axis [0] speed [1.25];
			turn udoor1 to y-axis <0> speed <5.07>;
	//		sleep 120;
			move lower1 to x-axis [0] speed [10.18];
			move lower2 to x-axis [0] speed [10.24];
	//		sleep 874;
			turn upper2 to x-axis <0> speed <188.33>;
			turn upper1 to x-axis <0> speed <188.33>;
			sleep 987;
			cache beam1;
			cache beam2;
			cache gun1;
			cache gun2;
			cache lbox1;
			cache lbox2;
			cache ldoor1;
			cache ldoor2;
			cache lower1;
			cache lower2;
			cache pad;
			cache ubox1;
			cache ubox2;
			cache udoor1;
			cache udoor2;
			cache upper1;
			cache upper2;
		}
		Busy_5 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade blink;
	dont-cache blink;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade lbox1;
	dont-shade lbox2;
	dont-shade ldoor1;
	dont-shade ldoor2;
	dont-shade lower1;
	dont-shade lower2;
	dont-shade pad;
	dont-shade ubox1;
	dont-shade ubox2;
	dont-shade udoor1;
	dont-shade udoor2;
	dont-shade upper1;
	dont-shade upper2;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = ( !Nano_1 );
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 8000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode beam1 type BITMAPONLY | BITMAP3;
		explode beam2 type BITMAPONLY | BITMAP4;
		explode upper2 type BITMAPONLY | BITMAP5;
		explode upper1 type BITMAPONLY | BITMAP1;
		explode lower1 type BITMAPONLY | BITMAP2;
		explode lower2 type BITMAPONLY | BITMAP3;
		explode ldoor2 type BITMAPONLY | BITMAP4;
		explode udoor2 type BITMAPONLY | BITMAP5;
		explode ldoor1 type BITMAPONLY | BITMAP1;
		explode udoor1 type BITMAPONLY | BITMAP2;
		explode lbox2 type BITMAPONLY | BITMAP3;
		explode ubox2 type BITMAPONLY | BITMAP4;
		explode lbox1 type BITMAPONLY | BITMAP5;
		explode ubox1 type BITMAPONLY | BITMAP1;
		explode gun2 type BITMAPONLY | BITMAP2;
		explode gun1 type BITMAPONLY | BITMAP3;
		explode blink type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode beam1 type FALL | BITMAP3;
		explode beam2 type FALL | BITMAP4;
		explode upper2 type BITMAPONLY | BITMAP5;
		explode upper1 type SHATTER | BITMAP1;
		explode lower1 type BITMAPONLY | BITMAP2;
		explode lower2 type BITMAPONLY | BITMAP3;
		explode ldoor2 type FALL | BITMAP4;
		explode udoor2 type FALL | BITMAP5;
		explode ldoor1 type FALL | BITMAP1;
		explode udoor1 type FALL | BITMAP2;
		explode lbox2 type FALL | BITMAP3;
		explode ubox2 type FALL | BITMAP4;
		explode lbox1 type FALL | BITMAP5;
		explode ubox1 type FALL | BITMAP1;
		explode gun2 type FALL | BITMAP2;
		explode gun1 type FALL | BITMAP3;
		explode blink type FALL | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode upper2 type BITMAPONLY | BITMAP5;
		explode upper1 type SHATTER | BITMAP1;
		explode lower1 type BITMAPONLY | BITMAP2;
		explode lower2 type BITMAPONLY | BITMAP3;
		explode ldoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode udoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode ldoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode udoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lbox2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ubox2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lbox1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode ubox1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode pad type BITMAPONLY | BITMAP2;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode upper2 type BITMAPONLY | BITMAP5;
	explode upper1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode lower1 type BITMAPONLY | BITMAP2;
	explode lower2 type BITMAPONLY | BITMAP3;
	explode ldoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode udoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode ldoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode udoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lbox2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ubox2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lbox1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode ubox1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}