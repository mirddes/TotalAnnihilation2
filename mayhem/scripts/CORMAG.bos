#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flarea, flareb, flarec, flared, barrela, barrelb, barrelc, barreld,
       sleevead, sleevebc, mispointa1, mispointb1, mispointc1, mispointd1, mispointa2, mispointb2,
       mispointc2, mispointd2, pitcher1, aimer1, pitcher2, aimer2, mlauncher1, mturret1,
       mlauncher2, mturret2, lflare1, lflare2, lflare3, lgun1, lgun2, lgun3, 
       lturret1, lturret2, lturret3, turret, wake1, wake2, wake3, wake4,
       glowybits, base;

static-var  gun_1, gun_2, delay_3, Reset_4, busy_5, head7, gun_3;

RestoreAfterDelay()
{
	sleep 8000;
	if( !Reset_4 )
	{
		signal 2;
		signal 4;
		turn turret to y-axis <0> speed <30>;
		turn sleevead to x-axis <0> speed <15>;
		turn sleevebc to x-axis <0> speed <15>;
		turn lturret1 to y-axis <0> speed <100>;
		turn lturret2 to y-axis <0> speed <100>;
		turn lturret3 to y-axis <0> speed <100>;
		turn mturret1 to y-axis <0> speed <80>;
		turn mturret2 to y-axis <0> speed <80>;
		turn mlauncher1 to x-axis <0> speed <50>;
		turn mlauncher2 to x-axis <0> speed <50>;
		move mturret1 to y-axis 0 speed [1];
		move mturret2 to y-axis 0 speed [1];
		move mlauncher1 to y-axis 0 speed [1];
		move mlauncher2 to y-axis 0 speed [1];
		head7 = 0;
		gun_1 = 0;
	}
	busy_5 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Reset_4 and !busy_5 )
		{
			Reset_4 = 0;
			busy_5 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

Create()
{
	hide flarea;
	hide flareb;
	hide flarec;
	hide flared;
	hide lflare1;
	hide lflare2;
	hide lflare3;
	dont-cache flarea;
	dont-cache flareb;
	dont-cache flarec;
	dont-cache flared;
	dont-cache lflare1;
	dont-cache lflare2;
	dont-cache lflare3;
	dont-cache barrela;
	dont-cache barrelb;
	dont-cache barrelc;
	dont-cache barreld;
	dont-cache sleevead;
	dont-cache sleevebc;
	gun_1 = 0;
	gun_2 = 0;
	delay_3 = 0;
	Reset_4 = 0;
	busy_5 = 0;
	head7 = 0;
	gun_3 = 1;
	set ARMORED to 1;
	move aimer1 to y-axis [-200] now;
	move aimer2 to y-axis [-200] now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	dont-cache glowybits;
	return (0);
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 4 from wake3;
		emit-sfx 2 from wake4;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	return (0);
}

AimTertiary(heading, pitch)
{
	var prevarc, dif;
	signal 16;
	set-signal-mask 0;
	set-signal-mask 16;
	prevarc = head7;
	head7 = heading;
	dif = head7 - prevarc; //"dif" becomes the traverse needed to aim at the target
	if( dif < 0 ) //make sure dif is a positive value
	{
		dif = 0 - dif;
	}
	if( dif > <30> ) //if they need to rotate more than 30 degrees, turn all turrets
	{
		turn lturret1 to y-axis heading speed <180>;
		turn lturret2 to y-axis heading speed <180>;
		turn lturret3 to y-axis heading speed <180>;
		wait-for-turn lturret1 around y-axis;
		wait-for-turn lturret2 around y-axis;
		wait-for-turn lturret3 around y-axis;
		Reset_4 = 1;
		return (1);
	}
	if( gun_3 == 1 )
	{
		turn lturret1 to y-axis heading speed <180>;
		wait-for-turn lturret1 around y-axis;
	}
	if( gun_3 == 2 )
	{
		turn lturret2 to y-axis heading speed <180>;
		wait-for-turn lturret2 around y-axis;
	} 
	if( gun_3 == 3 )
	{
		turn lturret3 to y-axis heading speed <180>;
		wait-for-turn lturret3 around y-axis;
	}
	Reset_4 = 1;
	return (1);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <35>;
	turn sleevebc to x-axis <0> - pitch speed <20>;
	turn sleevead to x-axis <0> - pitch speed <20>;
	if( delay_3 )
	{
		wait-for-move barrela along z-axis;
		wait-for-move barrelb along z-axis;
		wait-for-move barrelc along z-axis;
		wait-for-move barreld along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn sleevebc around x-axis;
	wait-for-turn sleevead around x-axis;
	Reset_4 = TRUE;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	move mturret1 to y-axis [1] speed [2];
	move mlauncher1 to y-axis [1] speed [2];
	move mturret2 to y-axis [1] speed [2];
	move mlauncher2 to y-axis [1] speed [2];
	turn mturret1 to y-axis heading speed <120>;
	turn mlauncher1 to x-axis 0 - pitch speed <60>;
	turn mturret2 to y-axis heading speed <120>;
	turn mlauncher2 to x-axis 0 - pitch speed <60>;
	turn aimer1 to y-axis heading now;
	turn pitcher1 to x-axis <0> - pitch now;
	turn aimer2 to y-axis heading now;
	turn pitcher2 to x-axis <0> - pitch now;
	wait-for-turn mturret1 around y-axis;
	wait-for-turn mlauncher1 around x-axis;
	wait-for-turn mturret2 around y-axis;
	wait-for-turn mlauncher2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_3 == 1 )
	{
		gun_3 = 2;
		turn lgun1 to z-axis <0> now;
		show lflare1;
		sleep 150;
		hide lflare1;
		sleep 250;
		turn lgun1 to z-axis <120> speed <360>;
		return (0);
	}
	if( gun_3 == 2 )
	{
		gun_3 = 3;
		turn lgun2 to z-axis <0> now;
		show lflare2;
		sleep 150;
		hide lflare2;
		sleep 250;
		turn lgun2 to z-axis <120> speed <360>;
		return (0);
	}
	gun_3 = 1;
	turn lgun3 to z-axis <0> now;
	show lflare3;
	sleep 150;
	hide lflare3;
	sleep 250;
	turn lgun3 to z-axis <120> speed <360>;
	return (0);
}

FirePrimary()
{
	if( !gun_1 )
	{
		show flarea;
		move barrela to z-axis [-4] speed [500];
		sleep 30;
		move barrela to z-axis [0] speed [1.5];
		sleep 120;
		hide flarea;
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		show flareb;
		move barrelb to z-axis [-4] speed [500];
		sleep 30;
		move barrelb to z-axis [0] speed [1.5];
		sleep 120;
		hide flareb;
		gun_1 = 2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		show flarec;
		move barrelc to z-axis [-4] speed [500];
		sleep 30;
		move barrelc to z-axis [0] speed [1.5];
		sleep 120;
		hide flarec;
		gun_1 = 3;
		return (0);
	}
	delay_3 = 1;
	show flared;
	move barreld to z-axis [-4] speed [500];
	sleep 30;
	move barreld to z-axis [0] speed [1.5];
	sleep 120;
	hide flared;
	gun_1 = 0;
	wait-for-move barreld along z-axis;
	delay_3 = 0;
	return (0);
}

FireSecondary()
{
	move pitcher1 to y-axis [200] now;
	move pitcher2 to y-axis [200] now;
	sleep 50;
	move pitcher1 to y-axis [0] now;
	move pitcher2 to y-axis [0] now;
	++gun_2;
	if( gun_2 > 7 )
	{
		gun_2 = 0;
		return (0);
	}
}

AimFromTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = lturret1;
	}
	if( gun_3 == 2 )
	{
		piecenum = lturret2;
	}
	if( gun_3 > 2 )
	{
		piecenum = lturret3;
	}
	return (0);
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = lflare1;
	}
	if( gun_3 == 2 )
	{
		piecenum = lflare2;
	}
	if( gun_3 > 2 )
	{
		piecenum = lflare3;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}


AimFromSecondary(piecenum)
{
	if( !gun_2 OR gun_2 == 2 OR gun_2 == 4 OR gun_2 == 6 )
	{
		piecenum = aimer1;
	}
	if( gun_2 == 1 OR gun_2 == 3 OR gun_2 == 5 or gun_2 > 6 )
	{
		piecenum = aimer2;
	}
}

QuerySecondary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = mispointa1;
	}
	if( gun_2 == 1 )
	{
		piecenum = mispointa2;
	}
	if( gun_2 == 2 )
	{
		piecenum = mispointb1;
	}
	if( gun_2 == 3 )
	{
		piecenum = mispointb2;
	}
	if( gun_2 == 4 )
	{
		piecenum = mispointc1;
	}
	if( gun_2 == 5 )
	{
		piecenum = mispointc2;
	}
	if( gun_2 == 6 )
	{
		piecenum = mispointd1;
	}
	if( gun_2 > 6 )
	{
		piecenum = mispointd2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide lflare1;
	hide lflare2;
	hide lflare3;
	hide flarea;
	hide flareb;
	hide flarec;
	hide flared;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrela type BITMAPONLY | BITMAP1;
		explode barrelb type BITMAPONLY | BITMAP2;
		explode barrelc type BITMAPONLY | BITMAP3;
		explode barreld type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP4;
		explode flarea type BITMAPONLY | BITMAP5;
		explode sleevead type BITMAPONLY | BITMAP1;
		explode sleevebc type BITMAPONLY | BITMAP2;
		explode lgun1 type BITMAPONLY | BITMAP4;
		explode lgun2 type BITMAPONLY | BITMAP5;
		explode lgun3 type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP1;
		explode lturret1 type BITMAPONLY | BITMAP2;
		explode lturret2 type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		explode wake3 type BITMAPONLY | BITMAP5;
		explode wake4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrela type FALL | BITMAP1;
		explode barrelb type FALL | BITMAP2;
		explode barrelc type FALL | BITMAP3;
		explode barreld type FALL | BITMAP4;
		explode base type BITMAPONLY | BITMAP4;
		explode flarea type FALL | BITMAP5;
		explode sleevead type FALL | BITMAP1;
		explode sleevebc type FALL | BITMAP2;
		explode lgun1 type FALL | BITMAP4;
		explode lgun2 type SHATTER | BITMAP5;
		explode lgun3 type FALL | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		explode lturret1 type BITMAPONLY | BITMAP2;
		explode lturret2 type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		explode wake3 type FALL | BITMAP5;
		explode wake4 type FALL | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrelc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barreld type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode base type BITMAPONLY | BITMAP4;
	explode flarea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleevead type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleevebc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lgun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lgun2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode lgun3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret type BITMAPONLY | BITMAP1;
	explode lturret1 type BITMAPONLY | BITMAP2;
	explode lturret2 type BITMAPONLY | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
