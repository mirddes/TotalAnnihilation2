#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  remit, lemit, base, torso, powerbox, cable, cable2, misf,
       head, rArm, lArm, rcannon, lcannon, rbarrel, lbarrel, Lleg,
       Rleg, lowerLleg, lowerRleg, Lfoot, Rfoot;

static-var  gun_1, bMoving, bAiming, busy_4, walking_5, delay_6, AA_7;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl()
{
	var JustMoved;
	JustMoved = 0;
	while( TRUE )
	{
		while( bmoving )
		{
			move torso to y-axis [0] speed [5];
			turn torso to z-axis <0> speed <300>;
			turn Rleg to x-axis <0> speed <300>;
			turn lowerRleg to x-axis <0> speed <300>;
			turn Rfoot to x-axis <0> speed <300>;
			turn Lleg to x-axis <0> speed <300>;
			turn lowerLleg to x-axis <0> speed <300>;
			turn Lfoot to x-axis <0> speed <300>;
			sleep 67;
			if( !bAiming )
			{
				move torso to y-axis [0.3] speed [5];
				turn torso to z-axis <-5> speed <300>;
			}
			turn Rleg to x-axis <-10> speed <300>;
			turn lowerRleg to x-axis <-20> speed <300>;
			turn Rfoot to x-axis <20> speed <300>;
			turn Lleg to x-axis <10> speed <300>;
			turn lowerLleg to x-axis <20> speed <300>;
			turn Lfoot to x-axis <-20> speed <300>;
			sleep 67;
			if( bMoving )
			{
				if( !bAiming )
				{
					move torso to y-axis [0.7] speed [5];
					turn torso to z-axis <-10> speed <300>;
				}
				turn Rleg to x-axis <-20> speed <300>;
				turn lowerRleg to x-axis <-30.005495> speed <300>;
				turn Rfoot to x-axis <30.005495> speed <300>;
				turn lowerLleg to x-axis <20> speed <300>;
				turn Lfoot to x-axis <-20> speed <300>;
				sleep 67;
				if( !bAiming )
				{
					move torso to y-axis [0.3] speed [5];
					turn torso to z-axis <-10> speed <300>;
				}
				turn Rleg to x-axis <-30.005495> speed <300>;
				turn lowerRleg to x-axis <-20> speed <300>;
				turn Rfoot to x-axis <40.005495> speed <300>;
				turn lowerLleg to x-axis <30.005495> speed <300>;
				turn Lfoot to x-axis <-30.005495> speed <300>;
				sleep 67;
			}
			if( bMoving )
			{
				move torso to y-axis [0] speed [5];
				if( !bAiming )
				{
					turn torso to z-axis <-5> speed <300>;
				}
				turn Rleg to x-axis <-20> speed <300>;
				turn lowerRleg to x-axis <-10> speed <300>;
				turn Rfoot to x-axis <30.005495> speed <300>;
				turn lowerLleg to x-axis <40.005495> speed <300>;
				turn Lfoot to x-axis <-40.005495> speed <300>;
				sleep 67;
				if( !bAiming )
				{
					move torso to y-axis [0.1] speed [5];
				}
				turn torso to z-axis <0> speed <300>;
				turn Rleg to x-axis <0> speed <300>;
				turn lowerRleg to x-axis <0> speed <300>;
				turn Rfoot to x-axis <0> speed <300>;
				turn Lleg to x-axis <0> speed <300>;
				turn lowerLleg to x-axis <0> speed <300>;
				turn Lfoot to x-axis <0> speed <300>;
				sleep 67;
			}
			if( bMoving )
			{
				if( !bAiming )
				{
					move torso to y-axis [0.2] speed [5];
					turn torso to z-axis <5> speed <300>;
				}
				turn Rleg to x-axis <10> speed <300>;
				turn lowerRleg to x-axis <20> speed <300>;
				turn Rfoot to x-axis <-20> speed <300>;
				turn Lleg to x-axis <-10> speed <300>;
				turn lowerLleg to x-axis <-20> speed <300>;
				turn Lfoot to x-axis <20> speed <300>;
				sleep 67;
				if( !bAiming )
				{
					move torso to y-axis [-0.3] speed [5];
					turn torso to z-axis <10> speed <300>;
				}
				turn lowerRleg to x-axis <20> speed <300>;
				turn Rfoot to x-axis <-20> speed <300>;
				turn Lleg to x-axis <-20> speed <300>;
				turn lowerLleg to x-axis <-30.005495> speed <300>;
				turn Lfoot to x-axis <30.005495> speed <300>;
				sleep 67;
			}
			if( bMoving )
			{
				if( !bAiming )
				{
					move torso to y-axis [-0.4] speed [5];
				}
				turn lowerRleg to x-axis <30.005495> speed <300>;
				turn Rfoot to x-axis <-30.005495> speed <300>;
				turn Lleg to x-axis <-30.005495> speed <300>;
				turn lowerLleg to x-axis <-20> speed <300>;
				turn Lfoot to x-axis <40.005495> speed <300>;
				sleep 67;
				if( !bAiming )
				{
					move torso to y-axis [-0.5] speed [5];
					turn torso to z-axis <5> speed <300>;
				}
				turn lowerRleg to x-axis <40.005495> speed <300>;
				turn Rfoot to x-axis <-40.005495> speed <300>;
				turn Lleg to x-axis <-20> speed <300>;
				turn lowerLleg to x-axis <-10> speed <300>;
				turn Lfoot to x-axis <30.005495> speed <300>;
				sleep 67;
				move torso to y-axis [0] now;
				turn torso to z-axis <0> speed <300>;
				turn lowerRleg to x-axis <0> speed <200>;
				turn Rleg to x-axis <0> speed <200>;
				turn Rfoot to x-axis <0> speed <200>;
				turn Lleg to x-axis <0> speed <300>;
				turn lowerLleg to x-axis <0> speed <300>;
				turn Lfoot to x-axis <0> speed <300>;
				sleep 67;
			}
		}
		if( JustMoved )
		{
			JustMoved = 0;
			move torso to y-axis [0] speed [2];
			turn torso to z-axis <0> speed <300>;
			turn Rleg to x-axis <0> speed <100>;
			turn Lleg to x-axis <0> speed <100>;
			turn lowerRleg to x-axis <0> speed <100>;
			turn lowerLleg to x-axis <0> speed <100>;
			turn Rfoot to x-axis <0> speed <100>;
			turn Lfoot to x-axis <0> speed <100>;
		}
		sleep 200;
	}
}

Create()
{
	gun_1 = remit;
	bMoving = FALSE;
	bAiming = FALSE;
	busy_4 = 0;
	walking_5 = 0;
	delay_6 = 0;
	AA_7 = 0;
	cache head;
	hide remit;
	hide lemit;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script MotionControl();
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep 5000;
	cache head;
	set-signal-mask 0;
	bAiming = FALSE;
	AA_7 = 0;
	busy_4 = 1;
	turn torso to y-axis <0> speed <90>;
	turn torso to x-axis <0> speed <50>;
	turn larm to x-axis <0> speed <32>;
	turn rarm to x-axis <0> speed <32>;
	turn lcannon to x-axis <0> speed <32>;
	turn rcannon to x-axis <0> speed <32>;
	sleep 500;
	busy_4 = 0;
	return (0);
}

AimPrimary(heading, pitch)
{
	if( !bAiming )
	{
		bAiming = TRUE;
		move torso to y-axis [0] speed [100];
		turn torso to z-axis <0> speed <300>;
		while( busy_4 )
		{
			sleep 200;
		}
		busy_4 = 1;
		move torso to y-axis [0] speed [100];
		turn torso to z-axis <0> speed <300>;
		turn larm to x-axis <-16> speed <50>;
		turn rarm to x-axis <-16> speed <50>;
		turn lcannon to x-axis <16> speed <50>;
		turn rcannon to x-axis <16> speed <50>;
		sleep 320;
		busy_4 = 0;
	}
	signal 2;
	set-signal-mask 2;
	turn torso to y-axis heading speed <200>;
	turn torso to x-axis <0> - pitch speed <60>;
	wait-for-turn torso around y-axis;
	wait-for-turn torso around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	bAiming = TRUE;
	while( delay_6 OR AA_7 )
	{
		wait-for-move powerbox along y-axis;
	}
	return (1);
}

AimTertiary(heading, pitch)
{
	AA_7 = 1;
	signal 16;
	signal 4;
	set-signal-mask 4;
	bAiming = TRUE;
	while( delay_6 )
	{
		wait-for-move powerbox along y-axis;
	}
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		show remit;
		sleep 150;
		hide remit;
	}
	if( gun_1 )
	{
		show lemit;
		sleep 150;
		hide lemit;
	}
	gun_1 = !gun_1;
	return (0);
}

FireSecondary()
{
	delay_6 = 1;
	emit-sfx 256 | 1 from misf;
	move powerbox to y-axis [-0.35] NOW;
	move powerbox to y-axis [0] speed [0.1];
	wait-for-move powerbox along y-axis;
	delay_6 = 0;
	return (0);
}

FireTertiary()
{
	delay_6 = 1;
	emit-sfx 256 | 1 from misf;
	move powerbox to y-axis [-0.35] NOW;
	move powerbox to y-axis [0] speed [0.1];
	wait-for-move powerbox along y-axis;
	AA_7 = 0;
	delay_6 = 0;
	return (0);
}


QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = misf;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = misf;
	return (0);
}

AimFromPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = rbarrel;
	}
	if( gun_1 )
	{
		piecenum = lbarrel;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = powerbox;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = powerbox;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	cache head;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode torso type BITMAPONLY | BITMAP2;
		explode powerbox type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode cable type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode cable2 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode head type BITMAPONLY | BITMAP4;
		explode lArm type BITMAPONLY | BITMAP3;
		explode rArm type BITMAPONLY | BITMAP3;
		explode lcannon type BITMAPONLY | BITMAP3;
		explode rcannon type BITMAPONLY | BITMAP4;
		explode lbarrel type BITMAPONLY | BITMAP3;
		explode rbarrel type BITMAPONLY | BITMAP3;
		explode Rleg type BITMAPONLY | BITMAP2;
		explode Lleg type BITMAPONLY | BITMAP2;
		explode lowerRleg type BITMAPONLY | BITMAP3;
		explode lowerLleg type BITMAPONLY | BITMAP3;
		explode Rfoot type BITMAPONLY | BITMAP4;
		explode Lfoot type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode torso type BITMAPONLY | BITMAP2;
		explode powerbox type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode cable type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode cable2 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode head type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode lArm type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode rArm type BITMAPONLY | BITMAP3;
		explode lcannon type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rcannon type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lbarrel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rbarrel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode Rleg type BITMAPONLY | BITMAP2;
		explode Lleg type BITMAPONLY | BITMAP2;
		explode lowerRleg type BITMAPONLY | BITMAP3;
		explode lowerLleg type BITMAPONLY | BITMAP3;
		explode Rfoot type BITMAPONLY | BITMAP4;
		explode Lfoot type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode torso type BITMAPONLY | BITMAP2;
	explode powerbox type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode cable type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode cable2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode head type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode lArm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rArm type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lcannon type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rcannon type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lbarrel type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rbarrel type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode Rleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode Lleg type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lowerRleg type BITMAPONLY | BITMAP3;
	explode lowerLleg type BITMAPONLY | BITMAP3;
	explode Rfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode Lfoot type BITMAPONLY | BITMAP4;
	return (0);
}
