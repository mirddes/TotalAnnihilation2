#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"



piece  base, plate, hub, arm1, arm2, arm3, cog1a, cog1b,
       cog2a, cog2b, cog3a, cog3b, d2, d3, d5, d6,
       door1, door2, door3, door4, door5, door6, door1a, door2a,
       door3a, door4a, door5a, door6a;

static-var  Speed_1, Speed_2, Speed_3, busy_4, on_5; //dead, constructor_id, buildangle;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
Create()
{
	Speed_1 = 0;
	Speed_2 = 0;
	Speed_3 = 0;
	busy_4 = 0;
	on_5 = 0;
	hide hub;
	dont-shade plate;
	turn d2 to y-axis <-60> NOW;
	turn d3 to y-axis <60> NOW;
	turn d5 to y-axis <-60> NOW;
	turn d6 to y-axis <60> NOW;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	sleep 100;
	if( !on_5 )
	{
		set ACTIVATION to 1;
	}
	start-script SmokeUnit();
}

Activate()
{
	on_5 = 1;
	while( busy_4 )
	{
		sleep 200;
	}
	if( on_5 AND !busy_4 )
	{
		busy_4 = 1;
		show hub;
		turn door1 to x-axis <-80> speed <90>;
		turn door2 to x-axis <-80> speed <90>;
		turn door3 to x-axis <80> speed <90>;
		turn door4 to x-axis <80> speed <90>;
		turn door5 to x-axis <80> speed <90>;
		turn door6 to x-axis <-80> speed <90>;
		turn door1a to x-axis <171> speed <192>;
		turn door2a to x-axis <171> speed <192>;
		turn door3a to x-axis <-171> speed <192>;
		turn door4a to x-axis <-171> speed <192>;
		turn door5a to x-axis <-171> speed <192>;
		turn door6a to x-axis <171> speed <192>;
		sleep 889;
		set ARMORED to 0;
		move plate to y-axis [6.474] speed [6.474];
		move door1 to y-axis [-7] speed [7];
		move d2 to y-axis [-7] speed [7];
		move d3 to y-axis [-7] speed [7];
		move door4 to y-axis [-7] speed [7];
		move d5 to y-axis [-7] speed [7];
		move d6 to y-axis [-7] speed [7];
		sleep 945;
		spin hub around y-axis speed Speed_1 accelerate <1>;
		spin arm1 around y-axis speed Speed_2 accelerate <-4>;
		spin arm2 around y-axis speed Speed_2 accelerate <-4>;
		spin arm3 around y-axis speed Speed_2 accelerate <-4>;
		spin cog1a around y-axis speed Speed_3 accelerate <24>;
		spin cog1b around y-axis speed Speed_3 accelerate <24>;
		spin cog2a around y-axis speed Speed_3 accelerate <24>;
		spin cog2b around y-axis speed Speed_3 accelerate <24>;
		spin cog3a around y-axis speed Speed_3 accelerate <24>;
		spin cog3b around y-axis speed Speed_3 accelerate <24>;
		busy_4 = 0;
	}
}

Deactivate()
{
	on_5 = 0;
	if( busy_4 )
	{
		sleep 200;
	}
	if( !on_5 AND !busy_4 )
	{
		busy_4 = 1;
		spin hub around y-axis speed <0> accelerate <-5>;
		spin arm1 around y-axis speed <0>;
		spin arm2 around y-axis speed <0>;
		spin arm3 around y-axis speed <0>;
		spin cog1a around y-axis speed <0> accelerate (0 - Speed_1);
		spin cog1b around y-axis speed <0> accelerate (0 - Speed_1);
		spin cog2a around y-axis speed <0> accelerate (0 - Speed_1);
		spin cog2b around y-axis speed <0> accelerate (0 - Speed_1);
		spin cog3a around y-axis speed <0> accelerate (0 - Speed_1);
		spin cog3b around y-axis speed <0> accelerate (0 - Speed_1);
		turn arm1 to y-axis <0> speed <105>;
		turn arm2 to y-axis <0> speed <105>;
		turn arm3 to y-axis <0> speed <105>;
		wait-for-turn arm1 around y-axis;
		wait-for-turn arm2 around y-axis;
		wait-for-turn arm3 around y-axis;
		move plate to y-axis <0> speed <7>;
		move door1 to y-axis [0] speed [7.5];
		move d2 to y-axis [0] speed [7.5];
		move d3 to y-axis [0] speed [7.5];
		move door4 to y-axis [0] speed [7.5];
		move d5 to y-axis [0] speed [7.5];
		move d6 to y-axis [0] speed [7.5];
		sleep 920;
		turn door1 to x-axis <0> speed <90>;
		turn door2 to x-axis <0> speed <90>;
		turn door3 to x-axis <0> speed <90>;
		turn door4 to x-axis <0> speed <90>;
		turn door5 to x-axis <0> speed <90>;
		turn door6 to x-axis <0> speed <90>;
		turn door1a to x-axis <0> speed <192>;
		turn door2a to x-axis <0> speed <192>;
		turn door3a to x-axis <0> speed <192>;
		turn door4a to x-axis <0> speed <192>;
		turn door5a to x-axis <0> speed <192>;
		turn door6a to x-axis <0> speed <192>;
		set ARMORED to 1;
		sleep 890;
		hide hub;
		busy_4 = 0;
	}
}

SetSpeed(Func_Var_1)
{
	Speed_1 = Func_Var_1 * 12;
	Speed_2 = Func_Var_1 * -24;
	Speed_3 = Func_Var_1 * 64;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	//dead=1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode arm1 type BITMAPONLY | BITMAP3;
		explode arm2 type BITMAPONLY | BITMAP4;
		explode arm3 type BITMAPONLY | BITMAP5;
		explode hub type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode arm1 type SHATTER | BITMAP3;
		explode arm2 type FALL | BITMAP4;
		explode arm3 type FALL | BITMAP5;
		explode hub type FALL | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode arm1 type SHATTER | BITMAP3;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode hub type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode plate type BITMAPONLY | BITMAP2;
	explode arm1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode hub type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
