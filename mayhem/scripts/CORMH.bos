#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lmispoint, rmispoint, base, arm1, arm2, launcher, wake1, wake2,
       wake3, wake4, wake5, wake6, wake7, wake8, aimer, pitcher, GP;

static-var  gun_1, aiming_2, depth_3, hit_4;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( !hit_4 )
	{
		hit_4 = 1;
		turn base to z-axis Func_Var_2 speed <104.974>;
		turn base to x-axis Func_Var_1 speed <104.974>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.000> speed <29.993>;
		turn base to x-axis <0.000> speed <29.993>;
		sleep 100;
		hit_4 = 0;
	}
}

Create()
{
	aiming_2 = 0;
	gun_1 = lmispoint;
	hit_4 = 0;
	move aimer to y-axis [-200] now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 10000;
	set-signal-mask 0;
	aiming_2 = 0;
	turn arm1 to y-axis 0 speed <90>;
	turn arm2 to x-axis <-45> speed <60>;
	wait-for-turn arm1 around y-axis;
	wait-for-turn arm2 around x-axis;
	if( !aiming_2 )
	{
		move arm1 to z-axis [0] speed [2];
		turn arm1 to x-axis <0> speed <90>;
		turn arm2 to x-axis <0> speed <90>;
		move launcher to z-axis [0] speed [4];
	}		
}

StartMoving(count)
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		count = 0;
		if( depth_3 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <25>;
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	depth_3 = Func_Var_1;
}

AimPrimary(heading, pitch)
{
	while( !aiming_2 )
	{
		move arm1 to z-axis [-1] speed [2];
		turn arm1 to x-axis <45> speed <90>;
		turn arm2 to x-axis <-45> speed <90>;
		move launcher to z-axis [2] speed [4];
		wait-for-turn arm1 around x-axis;
		aiming_2 = 1;		
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn arm1 to y-axis heading speed <90>;
	turn arm2 to x-axis <-45> - pitch speed <60>;
	turn aimer to y-axis heading now;
	turn pitcher to x-axis <0> - pitch now;
	wait-for-turn arm1 around y-axis;
	wait-for-turn arm2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move pitcher to y-axis [200] now;
	sleep 50;
	move pitcher to y-axis [0] now;
	if( !gun_1 )
	{
		gun_1 = rmispoint;
		return (0);
	}
	gun_1 = lmispoint;
}

AimFromPrimary(piecenum)
{
	piecenum = aimer;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( depth_3 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode lmispoint type BITMAPONLY | BITMAP1;
			explode rmispoint type BITMAPONLY | BITMAP2;
			explode base type BITMAPONLY | BITMAP3;
			explode arm1 type BITMAPONLY | BITMAP4;
			explode arm2 type BITMAPONLY | BITMAP5;
			explode launcher type BITMAPONLY | BITMAP1;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lmispoint type FALL | BITMAP1;
		explode rmispoint type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode arm1 type FALL | BITMAP4;
		explode arm2 type FALL | BITMAP5;
		explode launcher type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
