#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  flare1, flare2, base, gun, arms, turret, flare3;

static-var  gun_1, aiming_2, reset_3, busy_4, aa_5, delay_6;

RestoreAfterDelay()
{
	sleep 3000;
	aa_5 = 0;
	sleep 2000;
	if( !Reset_3 )
	{
		turn turret to y-axis <0> speed <120>;
		turn gun to x-axis <0> speed <50>;
		move arms to y-axis [0] speed [2.419995];
		move gun to y-axis [0] speed [1.809998];
		signal 2;
		signal 4;
		aiming_2 = 0;
	}
	Busy_4 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Reset_3 and !Busy_4 )
		{
			Reset_3 = 0;
			Busy_4 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	return (0);
}

Create()
{
	gun_1 = 0;
	aiming_2 = 0;
	reset_3 = 0;
	busy_4 = 0;
	aa_5 = 0;
	delay_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

AimTertiary(heading, pitch)
{	
	aa_5 = 1;
	if( !aiming_2 )
	{
		busy_4 = 1;		
		move arms to y-axis [3.200000] speed [2.419995];
		move gun to y-axis [2.400000] speed [1.809998];
		wait-for-move gun along y-axis;
		aiming_2 = 1;
		busy_4 = 0;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	while( delay_6 )
	{
		sleep 200;
	}
	turn turret to y-axis heading speed <350>;
	turn gun to x-axis <0> - pitch speed <240>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	reset_3 = 1;
	return (1);
}

AimPrimary(heading, pitch)
{	
	if( !aiming_2 )
	{
		busy_4 = 1;		
		move arms to y-axis [3.200000] speed [2.419995];
		move gun to y-axis [2.400000] speed [1.809998];
		wait-for-move gun along y-axis;
		aiming_2 = 1;
		busy_4 = 0;
	}
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	while( aa_5 OR delay_6 )
	{
		sleep 200;
	}
	turn turret to y-axis heading speed <350>;
	turn gun to x-axis <0> - pitch speed <240>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	reset_3 = 1;
	return (1);
}

FireTertiary()
{
	delay_6 = 1;
	aa_5 = 0;
	if( !gun_1 )
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	sleep 2250;
	gun_1 = !gun_1;
	delay_6 = 0;
	return (0);
}

FirePrimary()
{
	delay_6 = 1;
	if( !gun_1 )
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	sleep 2250;
	gun_1 = !gun_1;
	delay_6 = 0;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = gun;
	return (0);
}


AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = gun_1;
	return (0);
}


QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		explode arms type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode gun type FALL | BITMAP2;
		explode arms type SHATTER | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arms type SHATTER | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arms type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
	return (0);
}
