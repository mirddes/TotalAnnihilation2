#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Base, Body, NanoDoor1, NanoDoor2, Boom, Neck, NanoGun, NanoSpray,
       Wake1, Wake2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	if( TRUE )
	{
		turn NanoDoor1 to z-axis <-89.994505> speed <94.976804>;
		turn NanoDoor2 to z-axis <89.994505> speed <94.976804>;
		sleep 200;
	}
	if( TRUE )
	{
		turn Boom to x-axis <38.995971> speed <41.989745>;
		turn Neck to x-axis <-38.995971> speed <41.989745>;
		sleep 200;
	}
	sleep 30;
}

deactivatescr()
{
	if( TRUE )
	{
		turn Boom to x-axis <0> speed <61.984862>;
		turn Neck to x-axis <0> speed <61.984862>;
		sleep 200;
	}
	if( TRUE )
	{
		turn NanoDoor1 to z-axis <0> speed <124.969479>;
		turn NanoDoor2 to z-axis <0> speed <124.969479>;
		sleep 200;
	}
	sleep 30;
}

Go()
{
	call-script activatescr();
	turn Neck to y-axis Static_Var_2 speed <159.960934>;
	wait-for-turn Neck around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn Neck to y-axis <0> speed <179.956050>;
	wait-for-turn Neck around y-axis;
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 2 from Wake1;
		emit-sfx 2 from Wake2;
		sleep 250;
	}
}

StopMoving()
{
	signal 2;
}

QueryNanoPiece(piecenum)
{
	piecenum = NanoSpray;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

Demo()
{
	Static_Var_1 = 1;
}

SweetSpot(piecenum)
{
	piecenum = Base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Base type BITMAPONLY | BITMAP1;
		explode Body type BITMAPONLY | BITMAP1;
		explode NanoDoor1 type BITMAPONLY | BITMAP1;
		explode NanoDoor2 type BITMAPONLY | BITMAP1;
		explode Boom type BITMAPONLY | BITMAP1;
		explode Neck type BITMAPONLY | BITMAP1;
		explode NanoGun type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Base type BITMAPONLY | BITMAP1;
		explode Body type BITMAPONLY | BITMAP1;
		explode NanoDoor1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode NanoDoor2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode Boom type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode Neck type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode NanoGun type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode Base type SHATTER | BITMAP4;
	explode Body type SHATTER | BITMAP4;
	explode NanoDoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode NanoDoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Boom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode NanoGun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
