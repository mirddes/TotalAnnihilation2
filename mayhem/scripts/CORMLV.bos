#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, Door1, Turret, Gun, Door2, Stand, wheel1,
       wheel2;

static-var  Nano_1, ReqState_2, Aiming_3, On_4, Building_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( TRUE )
	{
		if( ReqState_2 AND !On_4 )
		{
			move Door1 to y-axis [0] now;
			move Turret to y-axis [0] now;
			move Gun to x-axis [0] now;
			turn Gun to y-axis <0> now;
			sleep 16;
			move Gun to y-axis [4.50] speed [10];
			turn Door1 to z-axis <-91> speed <214>;
			turn Door2 to z-axis <89> speed <207>;
	//		sleep 428;
	//		move Door1 to x-axis [-0.25] speed [1];
	//		move Door1 to y-axis [-4.7] speed [11];
	//		move Door2 to y-axis [-4.6] speed [11];
			move Stand to y-axis [3] speed [7];
	//		turn Door1 to z-axis <-91> speed <1>;
	//		turn Door2 to z-axis <88> speed <1>;
			sleep 428;
			move Door1 to x-axis [-0.14] speed [10];
			move Door1 to y-axis [-4.65] speed [10];
			move Door2 to y-axis [-4.65] speed [10];
			move Turret to x-axis [2] speed [4];
			move Turret to y-axis [0] speed [1];
			turn Door1 to z-axis <-90> speed <2>;
			turn Door2 to y-axis <0> speed <1>;
			turn Door2 to z-axis <88> speed <1>;
			turn Gun to y-axis Nano_1 speed <160>;
			sleep 440;
			wait-for-turn Gun around y-axis;
			On_4 = 1;
			sleep Rand(1,500);
			set INBUILDSTANCE to 1;
		}
		if( !ReqState_2 AND On_4 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			turn Gun to y-axis <0> speed <160>;
	//		wait-for-turn Gun around y-axis;
			move Door1 to x-axis [-0.14] now;
	//		move Door1 to x-axis [-0.25] speed [1];
			move Door1 to y-axis [-4.65] now;
	//		move Door1 to y-axis [-4.7] speed [1];
			move Door2 to y-axis [-4.65] now;
	//		move Door2 to y-axis [-4.6] speed [1];
			move Turret to x-axis [2] now;
	//		move Turret to x-axis [0] speed [4];
			move Turret to y-axis [0] now;
	//		move Turret to y-axis [0] speed [1];
			move Stand to y-axis [3] now;
			move Gun to x-axis [0] now;
			move Gun to y-axis [4.5] now;
			turn Door1 to z-axis <-90.62> now;
	//		turn Door1 to z-axis <-91> speed <2>;
			turn Door2 to y-axis <0.60> now;
	//		turn Door2 to y-axis <0> speed <1>;
			turn Door2 to z-axis <88> now;
	//		turn Door2 to z-axis <88> speed <1>;
			turn Gun to y-axis <-90> now;
	//		sleep 432;
			move Door1 to x-axis [0] speed [1];
			move Door1 to y-axis [0] speed [11];
			move Door2 to y-axis [0] speed [11];
			move Stand to y-axis [0] speed [7];
	//		turn Door1 to z-axis <-92> speed <1>;
	//		turn Door2 to z-axis <88> speed <1>;
			sleep 432;
			turn Gun to y-axis <0> speed <208>;
			move Gun to y-axis [0] speed [10];
			turn Door1 to z-axis <0> speed <212>;
			turn Door2 to z-axis <0> speed <205>;
			sleep 782;
		}
		sleep 250;
	}
	return (0);
}

Create()
{
	Nano_1 = 0;
	ReqState_2 = 0;
	Aiming_3 = 0;
	On_4 = 0;
	Building_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RequestState();
	start-script SmokeUnit();
	return (0);
}

StartBuilding(Func_Var_1)
{
	Building_5 = 1;
	Nano_1 = Func_Var_1;
	ReqState_2 = 1;
	return (0);
}

StopBuilding()
{
	Building_5 = 0;
	sleep 3000;
	if( !Building_5 AND !Aiming_3 )
	{
		ReqState_2 = 0;
	}
	return (0);
}

StartMoving()
{
	spin wheel1 around x-axis speed <150>;
	spin wheel2 around x-axis speed <150>;
	return (0);
}

StopMoving()
{
	spin wheel1 around x-axis speed <0>;
	spin wheel2 around x-axis speed <0>;
	return (0);
}

RestorAfterDelay()
{
	sleep 3000;
	Aiming_3 = 0;
	if( !Building_5 AND On_4 )
	{
		ReqState_2 = 0;
	}
	return (0);
}		

AimPrimary(heading, pitch)
{
	Aiming_3 = 1;
	signal 2;
	set-signal-mask 2;
	while( !On_4 )
	{
		while( Building_5 )
		{
			sleep 500;
		}
		ReqState_2 = 1;
		heading = nano_1;
		sleep 250;
	}
	turn gun to y-axis heading speed <160>;
	wait-for-turn gun around y-axis;
	start-script RestorAfterDelay();
	return(1);
}
		
AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = beam;
	return (0);
}

FirePrimary()
{
}


QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Nano_1 = ( 0 - Func_Var_1 );
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode Door1 type BITMAPONLY | BITMAP3;
		explode Door2 type BITMAPONLY | BITMAP4;
		explode Gun type BITMAPONLY | BITMAP5;
		explode Stand type BITMAPONLY | BITMAP1;
		explode Turret type BITMAPONLY | BITMAP2;
		explode wheel1 type BITMAPONLY | BITMAP3;
		explode wheel2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode Door1 type FALL | BITMAP3;
		explode Door2 type FALL | BITMAP4;
		explode Gun type SHATTER | BITMAP5;
		explode Stand type FALL | BITMAP1;
		explode Turret type FALL | BITMAP2;
		explode wheel1 type FALL | BITMAP3;
		explode wheel2 type FALL | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Gun type SHATTER | BITMAP5;
		explode Stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode beam type BITMAPONLY | BITMAP2;
	explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Gun type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode Stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}