#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lflare, rflare, lbarrel, rbarrel, Turret, sleeve, rtrack, ltrack, 
       wake1, wake2, wake3, wake4, missile, launcher, base;

static-var  gun_1, gun_2, boat_3, depth_4, missile_5, 
            delay_6, AA_7, reset_8, restore_9;

RestoreAfterDelay()
{
	sleep 5000;
	if( !reset_8 )
	{
		turn Turret to y-axis <0> speed <60>;
		turn sleeve to x-axis <0> speed <60>;
		gun_2 = 0;
		missile_5 = 0;
		AA_7 = 0;
		turn launcher to y-axis <0> speed <120>;
		turn launcher to x-axis <0> speed <120>;
		move launcher to y-axis [0] speed [2];
		signal 2;
		signal 4;
		signal 16;
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		if( reset_8 )
		{
			reset_8 = 0;
			restore_9 = 1;
		}
		sleep sleeptime;
		if( !reset_8 AND restore_9 )
		{
			restore_9 = 0;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

MotionControl(Func_Var_1)
{
	Func_Var_1 = 1;
	while( TRUE )
	{
		if( ( depth_4 > 0 AND depth_4 < 4 ) AND ( !boat_3 ) )
		{
			boat_3 = 1;
			turn rtrack to z-axis <90> speed <135>;
			turn ltrack to z-axis <-90> speed <135>;
			sleep 650;
		}
		if( boat_3 AND depth_4 == 4 )
		{
			boat_3 = 0;
			turn rtrack to z-axis <0> speed <135>;
			turn ltrack to z-axis <0> speed <135>;
			sleep 650;
		}
		sleep 200;
	}
	return (0);
}

Create()
{
	gun_1 = base;
	gun_2 = lflare;
	boat_3 = 0;
	missile_5 = 0;
	delay_6 = 0;
	AA_7 = 0;
	reset_8 = 0;
	restore_9 = 0;
	hide rflare;
	hide lflare;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		if( boat_3 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
			emit-sfx 2 from wake3;
			emit-sfx 2 from wake4;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	depth_4 = Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = launcher;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn Turret to y-axis heading speed <90>;
	turn sleeve to x-axis <0> - pitch speed <60>;
	wait-for-turn Turret around y-axis;
	wait-for-turn sleeve around x-axis;
	reset_8 = 1;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		show lflare;
		move lbarrel to z-axis [-3] speed [400];
		sleep 150;
		hide lflare;
		move lbarrel to z-axis [0] speed [2];
		gun_1 = rflare;
		return (0);
	}
	show rflare;
	move rbarrel to z-axis [-3] speed [400];
	sleep 150;
	hide rflare;
	move rbarrel to z-axis [0] speed [2];
	gun_1 = lflare;
	return (0);
}

AimTertiary(heading, pitch)
{
	AA_7 = 1;
	while( !missile_5 )
	{
		move launcher to y-axis [1] speed [4];
		sleep 250;
		missile_5 = 1;
	}
	signal 4;
	signal 16;
	set-signal-mask 0;
	set-signal-mask 4;
	while( delay_6 )
	{
		sleep 200;
	}
	turn launcher to y-axis heading speed <270>;
	turn launcher to x-axis <0> - pitch speed <150>;
	wait-for-turn launcher around x-axis;
	wait-for-turn launcher around y-axis;
	reset_8 = 1;
	return (1);
}

AimSecondary(heading, pitch)
{
	while( !missile_5 )
	{
		move launcher to y-axis [1] speed [4];
		sleep 250;
		missile_5 = 1;
	}
	signal 16;
	set-signal-mask 0;
	set-signal-mask 16;
	while( delay_6 OR AA_7 )
	{
		sleep 200;
	}
	turn launcher to y-axis heading speed <270>;
	turn launcher to x-axis <0> - pitch speed <150>;
	wait-for-turn launcher around x-axis;
	wait-for-turn launcher around y-axis;
	reset_8 = 1;
	return (1);
}

FireTertiary()
{
	delay_6 = 1;
	++gun_2;
	move missile to z-axis [-0.4] NOW;
	move missile to z-axis 0 speed [0.1];
	sleep 2200;
	if( gun_2 > 2 )
	{
		gun_2 = 0;
		wait-for-move missile along z-axis;
	}
	AA_7 = 0;
	delay_6 = 0;
	return (0);
}

FireSecondary()
{
	delay_6 = 1;
	++gun_2;
	move missile to z-axis [-0.4] NOW;
	move missile to z-axis 0 speed [0.1];
	sleep 2200;
	if( gun_2 > 2 )
	{
		gun_2 = 0;
		wait-for-move missile along z-axis;
	}
	delay_6 = 0;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = lflare;
		return (0);
	}
	piecenum = rflare;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = launcher;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = missile;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = missile;
	return (0);
}

Killed(severity, corpsetype)
{
	if( ( !depth_4 ) < 2 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode lbarrel type BITMAPONLY | BITMAP2;
			explode rbarrel type BITMAPONLY | BITMAP2;
			explode sleeve type BITMAPONLY | BITMAP3;
			explode missile type BITMAPONLY | BITMAP4;
			explode launcher type FALL | BITMAP3;
			explode Turret type BITMAPONLY | BITMAP4;
			explode rtrack type BITMAPONLY | BITMAP3;
			explode ltrack type BITMAPONLY | BITMAP3;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode lbarrel type FALL | SMOKE | BITMAP2;
		explode rbarrel type FALL | SMOKE | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode missile type FALL | BITMAP4;
		explode launcher type FALL | SMOKE | BITMAP3;
		explode Turret type BITMAPONLY | BITMAP4;
		explode rtrack type BITMAPONLY | BITMAP3;
		explode ltrack type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode Turret type SHATTER | BITMAP3;
		explode rtrack type BITMAPONLY | BITMAP3;
		explode ltrack type BITMAPONLY | BITMAP4;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve type BITMAPONLY | BITMAP3;
	explode missile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode launcher type FALL | SMOKE | FIRE | BITMAP3;
	explode Turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode rtrack type BITMAPONLY | BITMAP3;
	explode ltrack type BITMAPONLY | BITMAP4;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
