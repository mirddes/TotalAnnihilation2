#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  emitplasl, emitplasr, plasbase, plasturret, plasgunL, plasgunR;

static-var  gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from plasbase;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-cache plasgunL;
	dont-cache plasgunR;
	dont-cache plasturret;
	gun_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn plasturret to y-axis heading speed <400>;
	turn plasturret to x-axis ( <0> - pitch ) speed <200>;
	wait-for-turn plasturret around y-axis;
	wait-for-turn plasturret around x-axis;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		move plasgunL to z-axis [-3] now;
		sleep 150;
		move plasgunL to z-axis [0] speed [2];
	}
	if( gun_1 )
	{
		move plasgunR to z-axis [-3] now;
		sleep 150;
		move plasgunR to z-axis [0] speed [2];
	}
	gun_1 = ( !gun_1 );
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = plasturret;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = plasbase;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode emitplasl type BITMAPONLY | BITMAP1;
		explode emitplasr type BITMAPONLY | BITMAP2;
		explode plasbase type BITMAPONLY | BITMAP3;
		explode plasturret type BITMAPONLY | BITMAP4;
		explode plasgunL type BITMAPONLY | BITMAP5;
		explode plasgunR type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode emitplasl type FALL | BITMAP1;
		explode emitplasr type FALL | BITMAP2;
		explode plasbase type BITMAPONLY | BITMAP3;
		explode plasturret type BITMAPONLY | BITMAP4;
		explode plasgunL type BITMAPONLY | BITMAP5;
		explode plasgunR type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode emitplasl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode emitplasr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode plasbase type BITMAPONLY | BITMAP3;
		explode plasturret type SHATTER | BITMAP4;
		explode plasgunL type BITMAPONLY | BITMAP5;
		explode plasgunR type BITMAPONLY | BITMAP1;
		return (0);
	}
	explode emitplasl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode emitplasr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode plasbase type BITMAPONLY | BITMAP3;
	explode plasturret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode plasgunL type BITMAPONLY | BITMAP5;
	explode plasgunR type BITMAPONLY | BITMAP1;
	return (0);
}
