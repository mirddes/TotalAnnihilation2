#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, missile, collar, door5, door6, door2, door4, door1,
       door3, lnchpad;

static-var  Ready_1, Busy_2, delay_3, Health_4, hit_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(AngleX, AngleZ, Prevhealth)
{
	if( !hit_5 )
	{
		hit_5 = 1;
		Prevhealth = Health_4;
		Health_4 = get HEALTH;
		if( Prevhealth <= ( Health_4 - 2 ) )
		{
			turn base to z-axis AngleZ speed <105>;
			turn base to x-axis AngleX speed <105>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to z-axis <0> speed <30>;
			turn base to x-axis <0> speed <30>;
		}
		sleep 200;
		hit_5 = 0;
	}
}

Create()
{
	Ready_1 = 0;
	Busy_2 = FALSE;
	delay_3 = base;
	Health_4 = 100;
	hit_5 = 0;
	dont-shade collar;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade door5;
	dont-shade door6;
	dont-shade lnchpad;
	dont-shade missile;
	turn door1 to y-axis <30> now;
	turn door2 to y-axis <-30> now;
	turn door3 to y-axis <-30> now;
	turn door4 to y-axis <30> now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	Health_4 = get HEALTH;
	start-script SmokeUnit();
}

Restore()
{
	Busy_2 = TRUE;
	Ready_1 = 0;
	cache collar;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	cache door5;
	cache door6;
	cache lnchpad;
	cache missile;
	turn lnchpad to y-axis <0> speed <20>;
	sleep 500;
	move lnchpad to y-axis [10] now;
	move lnchpad to y-axis [0] speed [8];
	sleep 1250;
	turn door5 to z-axis <0> speed <200>;
	turn door6 to z-axis <0> speed <200>;
	turn door2 to x-axis <0> speed <150>;
	turn door4 to x-axis <0> speed <150>;
	turn door1 to x-axis <0> speed <150>;
	turn door3 to x-axis <0> speed <150>;
	set ARMORED to 1;
	sleep 800;
	Busy_2 = FALSE;
}

RestoreAfterDelay()
{
	sleep 10000;
	set-signal-mask 0;
	if( Ready_1 )
	{
		start-script Restore();
	}
}

AimPrimary(heading, pitch)
{
	while( Busy_2 OR delay_3 )
	{
		sleep 500;
	}
	while( !Ready_1 )
	{
		Busy_2 = TRUE;
		dont-cache collar;
		dont-cache door1;
		dont-cache door2;
		dont-cache door3;
		dont-cache door4;
		dont-cache door5;
		dont-cache door6;
		dont-cache lnchpad;
		dont-cache missile;
		show missile;
		move collar to y-axis [2] speed [4];
		sleep 500;
		set ARMORED to 0;
		turn door1 to x-axis <120> speed <160>;
		turn door2 to x-axis <120> speed <160>;
		turn door3 to x-axis <-120> speed <160>;
		turn door4 to x-axis <-120> speed <160>;
		turn door5 to z-axis <120> speed <160>;
		turn door6 to z-axis <-120> speed <160>;
		sleep 800;
		move lnchpad to y-axis [10] speed [8];
		sleep 1250;
		turn lnchpad to z-axis <-10> speed <20>;
		turn missile to z-axis <10> speed <20>;
		sleep 500;
		Ready_1 = 1;
		Busy_2 = FALSE;
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	delay_3 = 1;
	hide missile;
	sleep 400;
	start-script Restore();
	sleep 14000;
	delay_3 = 0;
}

QueryPrimary(piecenum)
{
	piecenum = missile;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 AND Ready_1 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode collar type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		explode door3 type BITMAPONLY | BITMAP2;
		explode door4 type BITMAPONLY | BITMAP3;
		explode door5 type BITMAPONLY | BITMAP4;
		explode door6 type BITMAPONLY | BITMAP5;
		explode lnchpad type BITMAPONLY | BITMAP1;
		explode missile type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode collar type SHATTER | BITMAP2;
		explode door1 type FALL | BITMAP5;
		explode door2 type FALL | BITMAP1;
		explode door3 type FALL | BITMAP2;
		explode door4 type FALL | BITMAP3;
		explode door5 type FALL | BITMAP4;
		explode door6 type FALL | BITMAP5;
		explode lnchpad type BITMAPONLY | BITMAP1;
		explode missile type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode collar type SHATTER | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lnchpad type BITMAPONLY | BITMAP1;
		explode missile type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode collar type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lnchpad type BITMAPONLY | BITMAP1;
	explode missile type BITMAPONLY | BITMAP2;
}
