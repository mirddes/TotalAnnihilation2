#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, base, turret, mpt, missile, sleeve1, sleeve2, wake1, wake2, barrel1, barrel2;

static-var  gun_1, bAiming, reset_3, aa_4, delay_5;

RestoreAfterDelay()
{
	sleep 5000;
	if( !bAiming )
	{
		turn turret to y-axis <0> speed <100>;
		turn sleeve1 to x-axis <0> speed <45>;
		turn sleeve2 to x-axis <0> speed <45>;
		move mpt to y-axis <0> speed <0.4>;
		signal 2;
		signal 4;
		aa_4 = 0;
	}
	reset_3 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( bAiming AND ( !reset_3 ) )
		{
			bAiming = FALSE;
			reset_3 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	hide flare1;
	hide flare2;
	dont-cache flare1;
	dont-cache flare2;
	gun_1 = flare1;
	bAiming = FALSE;
	reset_3 = 0;
	aa_4 = 0;
	delay_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	/*if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var target,lasttarget;
		lasttarget=0;
		while (1)
		{
			if ((get CURRENT_ORDER_TYPE) == 6)
			{
				target=get CURRENT_ORDER_TARGET_ID;
				while ((get CURRENT_ORDER_TYPE) == 6)
				{
					target=get CURRENT_ORDER_TARGET_ID;
					if (target != lasttarget)
					{
						get LOCAL_SHARED_DATA(1,20 + (get UNIT_TEAM(get MY_ID)),target);
					}
					lasttarget=target;
					sleep 500;
				}
				if ((get CURRENT_ORDER_TYPE) == 41)
				{
					target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					while (!(get UNIT_XZ(target)))
					{
						sleep 500;
						target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					}
					get ORDER_UNIT_UNIT(6,get MY_ID,target,0);
				}
			}
			sleep 500;
		}
	}*/
	return (0);
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal 8;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	move mpt to y-axis [0.8] speed [8];
	wait-for-move barrel1 along z-axis;
	wait-for-move barrel2 along z-axis;
	turn turret to y-axis heading speed <110>;
	turn mpt to y-axis 0 - heading speed <110>;
	turn sleeve1 to x-axis <0> - pitch speed <45>;
	turn sleeve2 to x-axis <0> - pitch speed <45>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve1 around x-axis;
	wait-for-turn sleeve2 around x-axis;
	bAiming = TRUE;
	return (1);
}

AimTertiary(heading, pitch)
{
	aa_4 = 1;
	signal 4;
	set-signal-mask 4;
	move mpt to y-axis [0.8] speed [10];
	while( delay_5 )
	{
		turn missile to y-axis heading speed <270>;
		turn missile to x-axis 0 - pitch speed <210>;
		sleep 200;
	}	
	turn missile to y-axis heading speed <270>;
	turn missile to x-axis 0 - pitch speed <210>;
	wait-for-turn missile around y-axis;
	wait-for-turn missile around x-axis;
	bAiming = TRUE;
	return (1);
}


AimSecondary(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	move mpt to y-axis [0.8] speed [8];
	while( aa_4 OR delay_5 )
	{
		if( !aa_4 )
		{
			turn missile to y-axis heading speed <270>;
			turn missile to x-axis 0 - pitch speed <210>;
		}
		sleep 200;
	}	
	turn missile to y-axis heading speed <270>;
	turn missile to x-axis 0 - pitch speed <210>;
	wait-for-turn missile around y-axis;
	wait-for-turn missile around x-axis;
	bAiming = TRUE;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		move barrel1 to z-axis [-1] speed [500];
		show flare1;
		sleep 150;
		hide flare1;
		move barrel1 to z-axis [0] speed [1];
	}
	if( gun_1 )
	{
		move barrel2 to z-axis [-1] speed [500];
		show flare2;
		sleep 150;
		hide flare2;
		move barrel2 to z-axis [0] speed [1];
	}
	gun_1 = !gun_1;
	return (0);
}

FireTertiary()
{
	delay_5 = 1;
	aa_4 = 0;
	sleep 1850;
	delay_5 = 0;
}

FireSecondary()
{
	delay_5 = 1;
	sleep 1850;
	delay_5 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = missile;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = missile;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = flare3;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare3;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide wake1;
	hide wake2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve1 type BITMAPONLY | BITMAP3;
		explode sleeve2 type BITMAPONLY | BITMAP4;
		explode barrel1 type BITMAPONLY | BITMAP5;
		explode barrel2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve2 type SHATTER | BITMAP4;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
