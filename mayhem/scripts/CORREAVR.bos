#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
#define FBIMAXVELOCITY		1.4

piece  flare1, flare2, rbarrel, lbarrel, rarm, larm, flare3, flare4, 
       launcher, misturret, 
       rbleg, rbfoot, lfleg, lffoot, lbleg, lbfoot, rfleg, rffoot, 
       torso, pelvis, base;

static-var  gun_1, Moving_2, gun_3, restore_4, busy_5, reset_6, delay_7, aa_8;

static-var  speed1, speed2, speed3, speed4, speed5, speed6;

RestoreAfterDelay(delay)
{
	sleep 6000;
	if( !restore_4 )
	{
		signal 2;
		signal 4;
		signal 16;
		turn torso to y-axis <0> speed <90>;
		turn pelvis to x-axis <0> speed <120>;
		turn misturret to y-axis <0> speed <180>;
	}
	reset_6 = 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		if( restore_4 and !reset_6 )
		{
			restore_4 = 0;
			reset_6 = 1;
			start-script restoreafterdelay();
		}
		sleep sleeptime;
	}
}

MotionControl()
	{
	//var f1limit, f2limit, f3limit, f4limit;
	while (Moving_2)
	{
		turn rfleg to y-axis <45> speed speed2;
		turn rfleg to z-axis <30> speed speed3;
		turn rffoot to z-axis <0> speed speed2;
		turn lbleg to y-axis <15> speed speed2;
		turn lbleg to z-axis <-30> speed speed4;
		turn lbfoot to z-axis <31> speed speed1;
		move pelvis to z-axis [1.5] speed speed6;
		turn lfleg to y-axis <-15> speed speed1;
		turn lffoot to z-axis <31> speed speed1;
		turn rbleg to y-axis <-45> speed speed1;
		turn rbfoot to z-axis <0> speed speed1;
		move lffoot to y-axis [0.82] speed speed5;
		move rbfoot to y-axis [0.82] speed speed5;
		wait-for-move lffoot along y-axis;
		move lffoot to y-axis [0] speed speed5;
		move rbfoot to y-axis [0] speed speed5;
		move pelvis to z-axis [0] speed speed5;
		wait-for-turn rfleg around y-axis;
		turn rfleg to z-axis <0> speed speed3;
		turn lbleg to z-axis <0> speed speed3;
		move rffoot to y-axis 0 speed [50];
		move lbfoot to y-axis 0 speed [50];
		wait-for-turn rfleg around y-axis;
		wait-for-turn rfleg around z-axis;
		if (Moving_2)
		{
			turn lfleg to y-axis <-45> speed speed2;
			turn lfleg to z-axis <-30> speed speed4;
			turn lffoot to z-axis <0> speed speed2;
			turn rbleg to y-axis <-15> speed speed2;
			turn rbleg to z-axis <30> speed speed3;
			turn rbfoot to z-axis <-31> speed speed2;
			move pelvis to z-axis [1.5] speed speed6;
			turn rfleg to y-axis <15> speed speed1;
			turn rffoot to z-axis <-31> speed speed1;
			turn lbleg to y-axis <45> speed speed1;
			turn lbfoot to z-axis <0> speed speed1;
			move rffoot to y-axis [0.82] speed speed5;
			move lbfoot to y-axis [0.82] speed speed5;
			wait-for-move rffoot along y-axis;
			move rffoot to y-axis [0] speed speed5;
			move lbfoot to y-axis [0] speed speed5;
			move pelvis to z-axis [0] speed speed5;
			wait-for-turn lfleg around y-axis;
			turn lfleg to z-axis <0> speed speed3;
			turn rbleg to z-axis <0> speed speed3;
			move lffoot to y-axis 0 speed [50];
			move rbfoot to y-axis 0 speed [50];
			wait-for-turn lfleg around z-axis;
			wait-for-turn lfleg around y-axis;
		}
	}
	turn rbleg to y-axis <-45> speed <120>;
	turn rfleg to y-axis <45> speed <120>;
	turn lbleg to y-axis <45> speed <120>;
	turn lfleg to y-axis <-45> speed <120>;
	turn rbfoot to y-axis <0> speed <120>;
	turn rffoot to y-axis <0> speed <120>;
	turn lbfoot to y-axis <0> speed <120>;
	turn lffoot to y-axis <0> speed <120>;
	turn rbfoot to z-axis <0> speed <120>;
	turn rffoot to z-axis <0> speed <120>;
	turn lbfoot to z-axis <0> speed <120>;
	turn lffoot to z-axis <0> speed <120>;
	move rbfoot to y-axis 0 speed [40];
	move rffoot to y-axis 0 speed [40];
	move lbfoot to y-axis 0 speed [40];
	move lffoot to y-axis 0 speed [40];
	move pelvis to z-axis [0] now;
}

Create()
{
	var fbimv;
	fbimv=FBIMAXVELOCITY;
	speed1=fbimv * <90>;
	speed2=speed1 * 2;
	speed3=speed2 * 3.3;
	speed4=speed3 * 2;
	speed5=fbimv * [7];
	speed6=speed5 * 2.7;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	gun_1 = 0;
	Moving_2 = 0;
	gun_3 = 0;
	restore_4 = 0;
	busy_5 = 0;
	reset_6 = 0;
	delay_7 = 0;
	aa_8 = 0;
	turn rfleg to y-axis <45> now;
	turn lfleg to y-axis <-45> now;
	turn rbleg to y-axis <-45> now;
	turn lbleg to y-axis <45> now;
	start-script SmokeUnit();
}

StartMoving()
{
	if (!Moving_2)
	{
		Moving_2 = 1;
		start-script MotionControl();
	}
}

StopMoving()
{
	Moving_2 = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn torso to y-axis heading speed <150>;
	turn larm to x-axis ( 0 - pitch ) speed <60>;
	turn rarm to x-axis ( 0 - pitch ) speed <60>;
	wait-for-turn torso around y-axis;
	wait-for-turn larm around x-axis;
	restore_4 = 1;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 16;
	set-signal-mask 0;
	set-signal-mask 16;
	while ( aa_8 OR delay_7 )
	{
		sleep 200;
		wait-for-move launcher along z-axis;
	}
	turn misturret to y-axis heading speed <300>;
	turn launcher to x-axis ( 0 - pitch ) speed <240>;
	wait-for-turn misturret around y-axis;
	wait-for-turn launcher around x-axis;
	restore_4 = 1;
	return (1);
}

AimTertiary(heading, pitch)
{
	aa_8 = 1;
	signal 4;
	signal 16;
	set-signal-mask 0;
	set-signal-mask 4;
	while( delay_7 )
	{
		wait-for-move launcher along z-axis;
	}
	turn misturret to y-axis heading speed <300>;
	turn launcher to x-axis ( 0 - pitch ) speed <240>;
	wait-for-turn misturret around y-axis;
	wait-for-turn launcher around x-axis;
	restore_4 = 1;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		show flare1;
		move rbarrel to z-axis [-2] speed [500];
		move rarm to z-axis [-1.5] speed [400];
		sleep 150;
		hide flare1;
		move rbarrel to z-axis [0] speed [3];
		move rarm to z-axis [0] speed [4.5];
	}
	if( gun_1 )
	{
		show flare2;
		move lbarrel to z-axis [-2] speed [500];
		move larm to z-axis [-1.5] speed [400];
		sleep 150;
		hide flare2;
		move lbarrel to z-axis [0] speed [3];
		move larm to z-axis [0] speed [4.5];
	}
	gun_1 = !gun_1;
}

FireSecondary()
{
	delay_7 = 1;
	move launcher to z-axis [0.27] speed [500];
	if( !gun_3 )
	{
		show flare3;
		sleep 100;
		hide flare3;
	}
	if( gun_3 )
	{
		show flare4;
		sleep 100;
		hide flare4;
	}
	gun_3 = !gun_3;
	move launcher to z-axis [0] speed [0.1];
	wait-for-move launcher along z-axis;
	delay_7 = 0;
}

FireTertiary()
{
	delay_7 = 1;
	move launcher to z-axis [0.27] speed [500];
	if( !gun_3 )
	{
		show flare3;
		sleep 100;
		hide flare3;
	}
	if( gun_3 )
	{
		show flare4;
		sleep 100;
		hide flare4;
	}
	gun_3 = !gun_3;
	move launcher to z-axis [0] speed [0.1];
	wait-for-move launcher along z-axis;
	aa_8 = 0;
	delay_7 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

AimFromTertiary(piecenum)
{
	piecenum = misturret;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

QueryTertiary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = flare3;
	}
	if( gun_3 )
	{
		piecenum = flare4;
	}
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode rbarrel type BITMAPONLY | BITMAP1;
		explode lbarrel type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode flare3 type BITMAPONLY | BITMAP1;
		explode flare4 type BITMAPONLY | BITMAP2;
		explode rbleg type BITMAPONLY | BITMAP3;
		explode rbfoot type BITMAPONLY | BITMAP4;
		explode lfleg type BITMAPONLY | BITMAP5;
		explode lbleg type BITMAPONLY | BITMAP1;
		explode lbfoot type BITMAPONLY | BITMAP2;
		explode lfleg type BITMAPONLY | BITMAP3;
		explode torso type BITMAPONLY | BITMAP4;
		explode misturret type BITMAPONLY | BITMAP5;
		explode launcher type BITMAPONLY | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rbarrel type FALL | BITMAP1;
		explode lbarrel type FALL | BITMAP2;
		explode base type SHATTER | BITMAP3;
		explode flare1 type FALL | BITMAP4;
		explode flare2 type FALL | BITMAP5;
		explode flare3 type FALL | BITMAP1;
		explode flare4 type FALL | BITMAP2;
		explode rbleg type FALL | BITMAP3;
		explode rbfoot type FALL | BITMAP4;
		explode lfleg type FALL | BITMAP5;
		explode lbleg type FALL | BITMAP1;
		explode lbfoot type FALL | BITMAP2;
		explode lfleg type FALL | BITMAP3;
		explode torso type SHATTER | BITMAP4;
		explode misturret type SHATTER | BITMAP5;
		explode launcher type SHATTER | BITMAP1;
		explode pelvis type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rbleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rbfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lbleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lbfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode torso type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode misturret type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pelvis type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rbleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rbfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lbleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lbfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode torso type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode misturret type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launcher type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pelvis type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
