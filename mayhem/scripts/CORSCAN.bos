#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
#define FBIMAXVELOCITY		[0.8] * 12

piece  base, body, holder, dinnerplate, tail, sonar, door1, door2,
	   Leg1, Foot1, Leg2, Foot2, Leg3, Foot3, Leg4, Foot4, 
	   g1, g2, g3, g4, hip1, hip2, hip3, hip4;

static-var  State_1, bMoving, Request_3, Busy_4, Timer_5, depth_6, x_slope, z_slope,
            speed1, speed2, speed3, speed4, speed5, speed6;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var lxsnxs, lzsnzs;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			if( depth_6 == 3 )
			{
				smoketype = 256 | 3;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		while( sleeptime >= 200 )
		{
			sleep 200;
			sleeptime = sleeptime - 200;
			if( bMoving )
			{
				lxsnxs=x_slope;// old slope
				lzsnzs=z_slope;// old slope
				if( depth_6 != 0 )// Not transported: read the ground slope
				{
					x_slope=get ATAN(get GROUND_HEIGHT(get PIECE_XZ(foot1)) - get GROUND_HEIGHT(get PIECE_XZ(foot2)), get XZ_HYPOT(get PIECE_XZ(foot1) - get PIECE_XZ(foot2)));
					while(x_slope>32768)
					{	x_slope=x_slope - 65536;	}
					z_slope=get ATAN(get GROUND_HEIGHT(get PIECE_XZ(foot1)) - get GROUND_HEIGHT(get PIECE_XZ(foot4)), get XZ_HYPOT(get PIECE_XZ(foot1) - get PIECE_XZ(foot4)));
					while(z_slope>32768)
					{	z_slope=z_slope - 65536;	}
				}
				if( depth_6 == 0 )// Transported: reset slope to zero
				{
					x_slope=0;
					z_slope=0;
				}
				lxsnxs=lxsnxs - x_slope;// slope delta with time
				lzsnzs=lzsnzs - z_slope;// slope delta with time
				if(lxsnxs<0)
				{	lxsnxs=0 - lxsnxs;	}// absoluted
				if(lzsnzs<0)
				{	lzsnzs=0 - lzsnzs;	}// absoluted
				turn base to x-axis x_slope speed lxsnxs*4;
				turn base to z-axis z_slope speed lzsnzs*4;
			}
		}
	}
}

HitByWeapon()
{
	Timer_5 = 10;
	if( Request_3 )
	{
		Set ACTIVATION to 0;
	}
}

RequestState()
{
	if( Busy_4 )
	{
		return (0);
	}
	Busy_4 = TRUE;
	while( Request_3 != State_1 )
	{
		if( Request_3 )
		{
			move tail to z-axis [0] now;
			move holder to y-axis [0] now;
			turn door1 to z-axis <-180> speed <270>;
			turn door2 to z-axis <180> speed <270>;
			wait-for-turn door1 around z-axis;
			set ARMORED to 0;
			move tail to z-axis [-7.2] speed [6.3];
			move holder to y-axis [3.5] speed [5.4];
			sleep 600;
			turn dinnerplate to x-axis <35> speed <70>;
			sleep 548;
			spin holder around y-axis speed <100>;
			spin sonar around y-axis speed <100>;
			State_1 = 1;
		}
		if( !Request_3 )
		{
			stop-spin holder around y-axis;
			stop-spin sonar around y-axis;
			turn holder to y-axis <0> speed <100>;
			turn sonar to y-axis <0> speed <100>;
			wait-for-turn holder around y-axis;
			wait-for-turn sonar around y-axis;
			move tail to z-axis [0] speed [6.3];
			turn dinnerplate to x-axis <0> speed <70>;
			sleep 500;
			move holder to y-axis [0] speed [6];
			sleep 600;
			set ARMORED to 1;
			turn door1 to z-axis <0> speed <270>;
			turn door2 to z-axis <0> speed <270>;
			sleep 667;
			State_1 = 0;
		}
	}
	Busy_4 = FALSE;
}

Create()
{
	var fbimv;
	fbimv=FBIMAXVELOCITY;
	speed1=fbimv / 22542 * <1>;
	speed2=speed1 * 2;
	speed3=fbimv / 19602 * <1>;
	speed4=speed3 * 2;
	speed5=speed4 * 2;
	speed6=fbimv;
	bMoving = FALSE;
	Request_3 = TRUE;
	Busy_4 = FALSE;
	Timer_5 = 0;
	x_slope = 0;
	z_slope = 0;
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

setSFXoccupy(Func_Var_1)
{
	depth_6 = Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Activate()
{
	Request_3 = 1;
	Timer_5 = 0;
	start-script RequestState();
}

Deactivate()
{
	Request_3 = 0;
	start-script RequestState();
	if( Timer_5 )
	{
		while( Timer_5 )
		{
			--Timer_5;
			sleep 1000;
		}
		if( !Request_3 )
		{
			set ACTIVATION to 1;
		}
	}
}

MotionControl()
{
	var f1limit, f2limit, f3limit, f4limit;
	f1limit = 0;
	f2limit = 0;
	f3limit = 0;
	f4limit = 0;
	bMoving=1;
	while (bMoving)
	{
		turn hip4 to y-axis <-20> speed speed1;
		turn leg4 to y-axis <40> speed speed2;
		turn foot4 to y-axis <-20> speed speed1;
		turn hip1 to y-axis <20> speed speed1;
		turn leg1 to y-axis <-40> speed speed2;
		turn foot1 to y-axis <20> speed speed1;
		turn leg2 to z-axis <30> speed <300>;
		turn foot2 to z-axis <-15> speed <167>;
		turn foot2 to x-axis <0> speed <167>;
		turn hip2 to y-axis <-20> speed speed3;
		turn leg2 to y-axis <40> speed speed4;
		turn foot2 to y-axis <-20> speed speed3;
		move foot3 to y-axis [3] speed [30];
		turn hip3 to y-axis <20> speed speed3;
		turn leg3 to y-axis <-40> speed speed5;
		turn foot3 to y-axis <20> speed speed4;
		move body to z-axis [1] speed speed6;
		wait-for-move body along z-axis;
		move body to z-axis [0] speed speed6;
		wait-for-turn leg2 around y-axis;
		turn leg2 to z-axis <0> speed <400>;
		turn foot2 to z-axis <0> speed <222>;
		turn foot2 to x-axis <25> speed <50>;
		move foot2 to y-axis f2limit speed [40];
		move foot3 to y-axis f3limit speed [40];
		wait-for-move foot2 along y-axis;
		sleep 100;
		if (bMoving)
		{
			turn hip2 to y-axis <20> speed speed1;
			turn leg2 to y-axis <-40> speed speed2;
			turn foot2 to y-axis <20> speed speed1;
			turn hip3 to y-axis <-20> speed speed1;
			turn leg3 to y-axis <40> speed speed2;
			turn foot3 to y-axis <-20> speed speed1;
			turn leg4 to z-axis <-30> speed <300>;
			turn foot4 to z-axis <15> speed <167>;
			turn foot4 to x-axis <0> speed <167>;
			turn hip4 to y-axis <20> speed speed3;
			turn leg4 to y-axis <-40> speed speed4;
			turn foot4 to y-axis <20> speed speed3;
			move body to z-axis [1] speed speed6;
			move foot1 to y-axis [3] speed [30];
			turn hip1 to y-axis <-20> speed speed3;
			turn leg1 to y-axis <40> speed speed5;
			turn foot1 to y-axis <-20> speed speed4;
			wait-for-move body along z-axis;
			move body to z-axis [0] speed speed6;
			wait-for-turn leg4 around y-axis;
			turn leg4 to z-axis <0> speed <400>;
			turn foot4 to z-axis <0> speed <222>;
			turn foot4 to x-axis <25> speed <50>;
			move foot4 to y-axis f4limit speed [40];
			move foot1 to y-axis f1limit speed [40];
			wait-for-move foot4 along y-axis;
			sleep 100;
		}
	}
	turn hip1 to y-axis <0> speed <60>;
	turn hip2 to y-axis <0> speed <60>;
	turn hip3 to y-axis <0> speed <60>;
	turn hip4 to y-axis <0> speed <60>;
	turn leg1 to y-axis <0> speed <120>;
	turn leg2 to y-axis <0> speed <120>;
	turn leg3 to y-axis <0> speed <120>;
	turn leg4 to y-axis <0> speed <120>;
	turn foot1 to x-axis <0> speed <120>;
	turn foot2 to x-axis <0> speed <120>;
	turn foot3 to x-axis <0> speed <120>;
	turn foot4 to x-axis <0> speed <120>;
	turn foot1 to y-axis <0> speed <120>;
	turn foot2 to y-axis <0> speed <120>;
	turn foot3 to y-axis <0> speed <120>;
	turn foot4 to y-axis <0> speed <120>;
	turn foot1 to z-axis <0> speed <120>;
	turn foot2 to z-axis <0> speed <120>;
	turn foot3 to z-axis <0> speed <120>;
	turn foot4 to z-axis <0> speed <120>;
	move body to z-axis [0] now;
}

StartMoving()
{
	if (!bMoving)
	{
		bMoving=1;
		start-script MotionControl();
	}
}

StopMoving()
{
	bMoving = 0;
}

Killed(severity, corpsetype)
{
	if( depth_6 == 3 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode body type BITMAPONLY | BITMAP1;
			explode foot1 type BITMAPONLY | BITMAP3;
			explode foot2 type BITMAPONLY | BITMAP3;
			explode foot3 type BITMAPONLY | BITMAP3;
			explode foot4 type BITMAPONLY | BITMAP3;
			explode holder type BITMAPONLY | BITMAP2;
			explode dinnerplate type BITMAPONLY | BITMAP2;
			explode sonar type BITMAPONLY | BITMAP1;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode foot1 type BITMAPONLY | BITMAP3;
		explode foot2 type FALL | BITMAP3;
		explode foot3 type FALL | BITMAP3;
		explode foot4 type BITMAPONLY | BITMAP3;
		explode holder type BITMAPONLY | BITMAP2;
		explode dinnerplate type BITMAPONLY | BITMAP2;
		explode sonar type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode foot1 type FALL | BITMAP3;
		explode foot2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode foot3 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode foot4 type FALL | BITMAP3;
		explode holder type SHATTER | BITMAP2;
		explode dinnerplate type FALL | BITMAP2;
		explode sonar type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode body type BITMAPONLY | BITMAP1;
	explode foot1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode foot2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode foot3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode foot4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode holder type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode dinnerplate type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sonar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}