#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  wing1r, wing1l, flare1, flare2, base, wing2L, wing2R, bombdrop;

static-var  gun_1, Waterdepth_2;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	gun_1 = 0;
	Waterdepth_2 = 3;
	start-script SmokeUnit();
	return (0);
}

Activate()
{
//		turn wing1l to y-axis <0> now;
		turn wing1l to y-axis <-22.15> speed <60>;
//		turn wing1r to y-axis <0> now;
		turn wing1r to y-axis <22.51> speed <60>;
//		sleep 730;
		turn wing2L to y-axis <17.23> speed <33.13>;
		turn wing2R to y-axis <-17.58> speed <33.81>;
//		sleep 530;
	return (0);
}

Deactivate()
{
//		turn wing1l to y-axis <-22.15> now;
//		turn wing1r to y-axis <22.51> now;
//		turn wing2L to y-axis <17.23> now;
		turn wing2L to y-axis <0> speed <60>;
//		turn wing2R to y-axis <-17.58> now;
		turn wing2R to y-axis <0> speed <60>;
//		sleep 525;
		turn wing1l to y-axis <0> speed <31.33>;
		turn wing1r to y-axis <0> speed <31.83>;
//		sleep 719;
	return (0);
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( Waterdepth_2 == 3 )
		{
			emit-sfx 256 | 3 from wing1l;
			emit-sfx 256 | 3 from wing1r;
			emit-sfx 256 | 3 from flare1;
			emit-sfx 256 | 3 from flare2;
			emit-sfx 256 | 3 from wing2L;
			emit-sfx 256 | 3 from wing2R;
			emit-sfx 256 | 3 from bombdrop;
			emit-sfx 256 | 3 from base;
		}
		sleep 200;
	}
	return (0);
}

StopMoving()
{
	signal 2;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = bombdrop;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = bombdrop;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

FireTertiary()
{
	gun_1 = ( !gun_1 );
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode wing1r type BITMAPONLY | BITMAP1;
		explode wing1l type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode wing2L type BITMAPONLY | BITMAP4;
		explode wing2R type BITMAPONLY | BITMAP5;
		explode bombdrop type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode wing1r type BITMAPONLY | BITMAP1;
		explode wing1l type SHATTER | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode wing2L type BITMAPONLY | BITMAP4;
		explode wing2R type BITMAPONLY | BITMAP5;
		explode bombdrop type FALL | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode wing1r type SHATTER | BITMAP1;
		explode wing1l type SHATTER | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode wing2L type BITMAPONLY | BITMAP4;
		explode wing2R type BITMAPONLY | BITMAP5;
		explode bombdrop type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode wing1r type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wing1l type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode wing2L type BITMAPONLY | BITMAP4;
	explode wing2R type BITMAPONLY | BITMAP5;
	explode bombdrop type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Waterdepth_2 = Func_Var_1;
	return (0);
}