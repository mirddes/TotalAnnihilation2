#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, turret, flare2, guns, base;

static-var  gun_3, Restore_2, Reset_3, reload_4, hit_5;

RestoreAfterDelay()
{
	sleep 5000;
	if( !Restore_2 )
	{
		turn turret to y-axis <0> speed <600>;
		turn guns to x-axis <0> speed <550>;
		signal 2;
	}
	Reset_3 = 0;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Restore_2 AND ( !Reset_3 ) )
		{
			Restore_2 = 0;
			Reset_3 = 1;
			start-script RestoreAfterDelay();
		}
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50>;
	turn base to z-axis anglez speed <50>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <20>;
	turn base to x-axis <0> speed <20>;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( hit_5 )
	{
		return(0);
	}
	hit_5 = 1;
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	sleep 100;
	hit_5 = 0;
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/	

Create()
{
	hide flare1;
	hide flare2;
	gun_3 = flare1;
	Restore_2 = 0;
	Reset_3 = 0;
	reload_4 = 0;
	hit_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

AimTertiary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <670>;
	turn guns to x-axis <0> - pitch speed <600>;
	while( reload_4 )
	{
		wait-for-move flare1 along z-axis;
		wait-for-move flare2 along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn guns around x-axis;
	Restore_2 = 1;
	return (1);
}

FireTertiary()
{
	reload_4 = 1;
	move guns to z-axis [-3] now;
	if( !gun_3 )
	{
		show flare1;
		move flare1 to z-axis [1.1] speed [500];
		sleep 150;
		hide flare1;
		move flare1 to z-axis 0 speed [2];
	}
	if( gun_3 )
	{
		show flare2;
		move flare2 to z-axis [1] speed [500];
		sleep 150;
		hide flare2;
		move flare2 to z-axis 0 speed [2];
	}
	move guns to z-axis [0] speed [12];
	gun_3 = !gun_3;
	wait-for-move flare1 along z-axis;
	wait-for-move flare2 along z-axis;
	reload_4 = 0;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = flare1;
	}
	if( gun_3 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret type BITMAPONLY | BITMAP1;
		explode guns type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret type SHATTER | BITMAP1;
		explode guns type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode turret type SHATTER | BITMAP1;
		explode guns type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		return (0);
	}
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode guns type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
}
