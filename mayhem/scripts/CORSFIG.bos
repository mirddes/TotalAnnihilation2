#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  emitter1, emitter2, base, wake1, wake2, wing1, wing2;

static-var  Rolling_2, Waterdepth_3;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MoveRate2()
{
	if( ( Rand(1,10) == 1 ) AND ( !Rolling_2 ) )
	{
		Rolling_2 = 1;
		turn base to z-axis <240> speed <120>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120> speed <180>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0> speed <120>;
		Rolling_2 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	start-script SmokeUnit();
	return (0);
}

Activate()
{
//		turn wing1 to z-axis <0> now;
		turn wing1 to z-axis <-112.53> speed <219.35>;
//		turn wing2 to z-axis <0> now;
		turn wing2 to z-axis <112.53> speed <219.35>;
//		sleep 1031;
	return (0);
}

Deactivate()
{
//		turn wing1 to z-axis <-112.53> now;
		turn wing1 to z-axis <0> speed <218.92>;
//		turn wing2 to z-axis <112.53> now;
		turn wing2 to z-axis <0> speed <218.92>;
//		sleep 1032;
	return (0);
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( Waterdepth_3 == 3 )
		{
			emit-sfx 256 | 3 from wake1;
			emit-sfx 256 | 3 from wake2;
			emit-sfx 256 | 3 from emitter1;
			emit-sfx 256 | 3 from emitter2;
			emit-sfx 256 | 3 from wing1;
			emit-sfx 256 | 3 from wing2;
			emit-sfx 256 | 3 from base;
		}
		sleep 200;
	}
	return (0);
}

StopMoving()
{
	signal 2;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = emitter1;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = emitter2;
	return (0);
}

//QueryTertiary(piecenum)
//{
//	piecenum = emitter2;
//	return (0);
//}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide wake1;
	hide wake2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode emitter1 type BITMAPONLY | BITMAP1;
		explode emitter2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode wing1 type BITMAPONLY | BITMAP4;
		explode wing2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode emitter1 type FALL | BITMAP1;
		explode emitter2 type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode wing1 type BITMAPONLY | BITMAP4;
		explode wing2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode emitter1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode emitter2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode wing1 type BITMAPONLY | BITMAP4;
	explode wing2 type BITMAPONLY | BITMAP5;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Waterdepth_3 = Func_Var_1;
	return (0);
}