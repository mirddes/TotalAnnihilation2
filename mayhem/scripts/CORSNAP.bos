#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  gp, base, flare, turret, wake1, wake2, wake3, wake4, wake5,
       wake6, wake7, wake8, sleeve, barrel, counteraim;

static-var  Depth_1, busy_2, reload_3, bMoving, bAiming;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RockUnit(anglex, anglez)
{
	turn base to x-axis ( anglex * 1.5 ) speed <50>;
	turn base to z-axis ( anglez * 1.5 ) speed <50>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis ( 0 - anglez * 0.75 ) speed <15>;
	turn base to x-axis ( 0 - anglex * 0.75 ) speed <15>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis 0 speed <4>;
	turn base to z-axis 0 speed <4>;
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( busy_2 )
	{
		return(0);
	}
	busy_2 = 1;
	turn base to z-axis Func_Var_2 speed <105>;
	turn base to x-axis Func_Var_1 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	busy_2 = 0;
	return (0);
}

StartMoving(count)
{
	signal 4;
	set-signal-mask 4;
	bMoving = 1;
	while( TRUE )
	{
		count = 0;
		if( Depth_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		while( count < 9 )
		{
			turn gp to y-axis get XZ_ATAN(0) now;
			turn base to y-axis (0 - get XZ_ATAN(0)) speed <43>;
			turn counteraim to y-axis get XZ_ATAN(0) speed <43>;
			if( !bAiming )
			{
				turn turret to y-axis (0 - get XZ_ATAN(0)) speed <43>;
			}
			++count;
			sleep 33;
		}
	}
	return (0);
}

StopMoving()
{
	bMoving = 0;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Depth_1 = Func_Var_1;
	return (0);
}

Create()
{
	hide flare;
	busy_2 = 0;
	bMoving = 0;
	reload_3 = 0;
	bAiming = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 200;
		turn gp to y-axis get XZ_ATAN(0) now;
		turn base to y-axis (0 - get XZ_ATAN(0)) now;
		turn counteraim to y-axis get XZ_ATAN(0) NOW;
		turn turret to y-axis (0 - get XZ_ATAN(0)) NOW;
	}
	start-script SmokeUnit();
	return (0);
}

RestoreAfterDelay()
{
	set-signal-mask 2;
	sleep 5000;
	set-signal-mask 0;
	bAiming = 0;
	turn sleeve to x-axis <0> speed <50>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	bAiming = 1;
	turn turret to y-axis ( heading - get XZ_ATAN(0)) speed <110>;
	turn sleeve to x-axis ( <0> - pitch ) speed <60>;
	while( reload_3 )
	{
		sleep 150;
		wait-for-move barrel along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	reload_3 = 1;
	show flare;
	move barrel to z-axis [-2.4] speed [500];
	sleep 50;
	move barrel to z-axis [0] speed [1];
	sleep 100;
	hide flare;
	wait-for-move barrel along z-axis;
	reload_3 = 0;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( Depth_1 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode turret type BITMAPONLY | BITMAP2;
			explode barrel type BITMAPONLY | BITMAP3;
			return (0);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode barrel type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}