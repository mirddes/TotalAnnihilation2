#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, blink, beama, beamb, turreta, turretb, gunb, guna, explodpt1, explodpt2;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ( ReqState_3 != On_4 ) )
	{
		Busy_5 = 1;
		if( ReqState_3 )
		{
			dont-cache beama;
			dont-cache beamb;
			dont-cache guna;
			dont-cache gunb;
			dont-cache turreta;
			dont-cache turretb;
			move turreta to y-axis [0] now;
			move turreta to y-axis [7] speed [6];
			move turretb to y-axis [0] now;
			move turretb to y-axis [7] speed [6];
			sleep 1177;
	//		move turreta to y-axis [7] speed [0.07];
	//		move turretb to y-axis [7] speed [0];
			turn turreta to y-axis <-34> speed <47>;
			turn turretb to y-axis <-43> speed <59.58>;
			turn gunb to x-axis <-71.70> speed <99.30>;
			turn gunb to z-axis <28.68> speed <39.72>;
			turn guna to x-axis <67> speed <92.68>;
			turn guna to z-axis <-28.68> speed <39.72>;
			sleep 733;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			move turreta to y-axis [7] now;
			move turretb to y-axis [7] now;
			turn turreta to y-axis <-34> now;
			turn turreta to y-axis <0> speed <50.28>;
			turn turretb to y-axis <-43> now;
			turn turretb to y-axis <0> speed <63.64>;
			turn gunb to x-axis <-71.70> now;
			turn gunb to x-axis <0> speed <106>;
			turn gunb to z-axis <28.68> now;
			turn gunb to z-axis <0> speed <42.42>;
			turn guna to x-axis <67> now;
			turn guna to x-axis <0> speed <99>;
			turn guna to z-axis <-28.68> now;
			turn guna to z-axis <0> speed <42.42>;
			sleep 676;
			move turreta to y-axis [0] speed [6];
			move turretb to y-axis [0] speed [6];
			sleep 1229;
			cache beama;
			cache beamb;
			cache guna;
			cache gunb;
			cache turreta;
			cache turretb;
		}
		Busy_5 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade blink;
	dont-cache blink;
	dont-cache beama;
	dont-shade beamb;
	dont-shade guna;
	dont-shade gunb;
	dont-shade turreta;
	dont-shade turretb;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beama;
	}
	if( Nano_1 )
	{
		piecenum = beamb;
	}
	Nano_1 = !Nano_1;
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 10000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = base;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = blink;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beama type BITMAPONLY | BITMAP2;
		explode beamb type BITMAPONLY | BITMAP3;
		explode blink type BITMAPONLY | BITMAP4;
		explode guna type BITMAPONLY | BITMAP5;
		explode gunb type BITMAPONLY | BITMAP1;
		explode turreta type BITMAPONLY | BITMAP2;
		explode turretb type BITMAPONLY | BITMAP3;
		explode explodpt1 type BITMAPONLY | BITMAP2;
		explode explodpt2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode beama type FALL | BITMAP2;
		explode beamb type FALL | BITMAP3;
		explode blink type FALL | BITMAP4;
		explode guna type FALL | BITMAP5;
		explode gunb type FALL | BITMAP1;
		explode turreta type FALL | BITMAP2;
		explode turretb type FALL | BITMAP3;
		explode explodpt1 type FALL | BITMAP2;
		explode explodpt2 type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type SHATTER | BITMAP1;
		explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turreta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turretb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode explodpt1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode explodpt2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turreta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turretb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode explodpt1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode explodpt2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}