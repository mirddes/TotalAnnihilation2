#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lpoint, rpoint, lwing, lengine, lsmoke, rwing, rengine, rsmoke,
       lsfin, rsfin, Flarer, Flarel, turret, box1, door1, door2,
       m1, m2, m3, m4, body;

static-var  gun_1, gun_2, gun_3, moving_3, busy_4, reload_5, ready_6;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

ProcessFlames()
{
	while( TRUE )
	{
		if( moving_3 == 1 )
		{
			emit-sfx 257 from lsmoke;
			emit-sfx 257 from rsmoke;
		}
		while ( moving_3 == 1 )
		{
			emit-sfx 0 from lsmoke;
			emit-sfx 0 from rsmoke;
			sleep 67;
		}
		sleep 250;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	moving_3 = 0;
	busy_4 = 0;
	reload_5 = 0;
	ready_6 = 0;
	dont-cache flarel;
	dont-cache flarer;
	dont-cache lpoint;
	dont-cache rpoint;
	hide flarel;
	hide flarer;
	hide lpoint;
	hide rpoint;
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script ProcessFlames();
	start-script SmokeUnit();
}

Activate()
{
	turn rwing to z-axis 0 NOW;
	turn lwing to z-axis 0 NOW;
	turn rengine to z-axis 0 NOW;
	turn lengine to z-axis 0 NOW;
	turn rwing to z-axis <-80> speed <70>;
	turn lwing to z-axis <80> speed <70>;
	turn rengine to z-axis <80> speed <70>;
	turn lengine to z-axis <-80> speed <70>;
}

Deactivate()
{
	turn rwing to z-axis <-80> NOW;
	turn lwing to z-axis <80> NOW;
	turn rengine to z-axis <80> NOW;
	turn lengine to z-axis <-80> NOW;
	turn rwing to z-axis 0 speed <40>;
	turn lwing to z-axis 0 speed <40>;
	turn rengine to z-axis 0 speed <40>;
	turn lengine to z-axis 0 speed <40>;
}

ReadyDoors()
{
	if( !busy_4 )
	{
		set-signal-mask 0;
		busy_4 = 1;
		if( ready_6 )
		{		
			turn door1 to z-axis <-80> speed <200>;
			turn door2 to z-axis <80> speed <200>;
			move door1 to y-axis [-2] speed [2.4];
			move door2 to y-axis [-2] speed [2.4];		 
			wait-for-turn door1 around z-axis;
		}
		if( !ready_6 )
		{
			move door1 to y-axis [0] speed [5];
			move door2 to y-axis [0] speed [5];
			turn door1 to z-axis <0> speed <100>;
			turn door2 to z-axis <0> speed <100>;
			wait-for-turn door1 around z-axis;
		}
		busy_4 = 0;
	}
}

RestoreAfterDelay()
{
	sleep 5000;
	ready_6 = 0;
	start-script ReadyDoors();
}

AimSecondary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	while( reload_5 )
	{
		sleep 200;
	}
	while( !ready_6 OR busy_4 )
	{
		ready_6 = 1;
		start-script ReadyDoors();
		sleep 200;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		show rpoint;
		sleep 150;
		hide rpoint;
	}
	if( gun_1 )
	{
		show lpoint;
		sleep 150;
		hide lpoint;
	}
	gun_1 = !gun_1;
}

FireSecondary()
{
	++gun_2;
	if( gun_2 > 3 )
	{
		reload_5 = 1;
		sleep 400;
		ready_6 = 0;
		start-script ReadyDoors();
		sleep 3000;
		reload_5 = 0;
	}
}

QuerySecondary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = m1;
	}
	if( gun_2 == 1 )
	{
		piecenum = m2;
	}
	if( gun_2 == 2 )
	{
		piecenum = m3;
	}
	if( gun_2 > 2 )
	{
		piecenum = m4;
	}
}

FireTertiary()
{
	if( !gun_3 )
	{
		show flarer;
		sleep 100;
		hide flarer;
	}
	if( gun_3 )
	{
		show flarel;
		sleep 100;
		hide flarel;
	}
	gun_3 = !gun_3;
	
}

QueryPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = rpoint;
	}
	if( gun_1 )
	{
		piecenum = lpoint;
	}
}

AimTertiary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <700>;
	wait-for-turn turret around y-axis;
	Return(1);
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = flarer;
	}
	if( gun_3 )
	{
		piecenum = flarel;
	}
}

StartMoving()
{
	moving_3 = 1;
}

StopMoving()
{
	moving_3 = 0;
	turn lwing to y-axis <0> speed <25.00>;
	turn rwing to y-axis <0> speed <25.00>;
}

MoveRate1()
{
	moving_3 = 1;
	turn lwing to y-axis <0> speed <25.00>;
	turn rwing to y-axis <0> speed <25.00>;
}

MoveRate2()
{
	moving_3 = 2;
	turn lwing to y-axis <25.01> speed <25.00>;
	turn rwing to y-axis <-25.01> speed <25.00>;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode lwing type BITMAPONLY | BITMAP3;
		explode rwing type BITMAPONLY | BITMAP3;
		explode lengine type BITMAPONLY | BITMAP2;
		explode rengine type BITMAPONLY | BITMAP2;
		explode lsmoke type FALL | SMOKE | BITMAP5;
		explode rsmoke type FALL | SMOKE | BITMAP5;
		explode lsfin type BITMAPONLY | BITMAP3;
		explode rsfin type BITMAPONLY | BITMAP3;
		explode box1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode lwing type BITMAPONLY | BITMAP3;
		explode rwing type BITMAPONLY | BITMAP3;
		explode lengine type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode rengine type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode lsmoke type FALL | SMOKE | BITMAP5;
		explode rsmoke type FALL | SMOKE | BITMAP5;
		explode lsfin type FALL | BITMAP3;
		explode rsfin type FALL | BITMAP3;	
		explode box1 type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode lwing type BITMAPONLY | BITMAP3;
	explode rwing type BITMAPONLY | BITMAP3;
	explode lengine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rengine type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lsmoke type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rsmoke type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lsfin type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rsfin type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode box1 type SHATTER | BITMAP2;
	return (0);
}
