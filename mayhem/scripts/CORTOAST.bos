#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  frame, pillartops, barrel2, turretback, barrel1, door2, door1, barrel3,
       hole, turretssides, ground, flare, turret;

static-var  busy_1, state_2, request_3, restore_4;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from frame;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	set-signal-mask 0;
	while( TRUE )
	{
		while( request_3 != state_2 )
		{
			busy_1 = 1;
			if( request_3 AND !state_2 )
			{
				state_2 = 1;
				move pillartops to y-axis [-10.600000] now;
				move barrel2 to z-axis [-2.450000] now;
				move turretback to z-axis [1.300000] now;
				move barrel1 to z-axis [-12.550000] now;
				move door2 to y-axis [0] now;
				move door2 to y-axis [0] speed [0];
				turn door1 to z-axis <0> now;
				turn door1 to z-axis <-88.615385> speed <300.379121>;
				turn door2 to z-axis <0> now;
				turn door2 to z-axis <89.313187> speed <302.769231>;
				sleep 295;
				set ARMORED to 0;
				move pillartops to y-axis [0] speed [17.259998];
				move door1 to y-axis [-7.700000] speed [12.539984];
				move door2 to y-axis [-7.700000] speed [12.539984];
				sleep 614;
				move barrel2 to z-axis [0] speed [7.750000];
				move turretback to z-axis [0] speed [4.109998];
				move barrel1 to z-axis [0] speed [39.719983];
				sleep 326;
			}
			if( !request_3 AND state_2 )
			{
				state_2 = 0;
				move barrel2 to z-axis [0] now;
				move barrel2 to z-axis [-2.450000] speed [8.809998];
				move turretback to z-axis [0] now;
				move turretback to z-axis [1.300000] speed [4.679999];
				move barrel1 to z-axis [0] now;
				move barrel1 to z-axis [-12.550000] speed [45.139984];
				move door1 to y-axis [-7.700000] now;
				move door2 to y-axis [-7.700000] now;
				turn door1 to z-axis <-88.615385> now;
				turn door2 to z-axis <89.313187> now;
				sleep 278;
				move pillartops to y-axis [-10.600000] speed [18.529999];
				move door1 to y-axis [0] speed [13.459998];
				move door2 to y-axis [0] speed [13.459998];
				sleep 572;
				turn door1 to z-axis <0> speed <236.923077>;
				turn door2 to z-axis <0> speed <238.813187>;
				set ARMORED to 1;
				sleep 387;
			}
		}
		busy_1 = 0;
		if( state_2 AND restore_4 )
		{
			--restore_4;
		}
		sleep 200;
		if( request_3 AND !restore_4 )
		{
			set ACTIVATION to 0;
		}
	}
	return (0);
}

Create()
{
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	dont-shade door1;
	dont-shade door2;
	dont-shade flare;
	dont-shade hole;
	dont-shade pillartops;
	dont-shade turret;
	dont-shade turretback;
	dont-shade turretssides;
	hide flare;
	busy_1 = 0;
	state_2 = 1;
	request_3 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	restore_4 = 50;
	start-script SmokeUnit();
	start-script RequestState();
	return (0);
}

Deactivate()
{
	signal 2;
	request_3 = 0;
	return (0);
}

Activate()
{
	request_3 = 1;
	if( !restore_4 < 30 )
	{
		restore_4 = 50;
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	while( !state_2 OR busy_1 )
	{
		if( !request_3 ) 
		{
			set ACTIVATION to 1;
		}
		sleep 250;
	}
	turn pillartops to y-axis heading speed <100>;
	turn turret to x-axis <0> - pitch speed <50>;
	wait-for-turn pillartops around y-axis;
	wait-for-turn turret around x-axis;
	restore_4 = 40;
	return (1);
}

FirePrimary()
{
	move barrel3 to z-axis [-5] speed [500];
	show flare;
	sleep 250;
	hide flare;
	move barrel3 to z-axis [0] speed [3];
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = barrel1;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = frame;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		if( state_2 )
		{
			corpsetype = 1;
		}
		if( !state_2 )
		{
			corpsetype = 2;
		}
		explode frame type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode pillartops type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode turretback type BITMAPONLY | BITMAP5;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode barrel3 type BITMAPONLY | BITMAP4;
		explode hole type BITMAPONLY | BITMAP5;
		explode turretssides type BITMAPONLY | BITMAP1;
		explode ground type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode frame type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode pillartops type SHATTER | BITMAP3;
		explode barrel2 type FALL | BITMAP4;
		explode turretback type FALL | BITMAP5;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode door2 type FALL | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode barrel3 type FALL | BITMAP4;
		explode hole type BITMAPONLY | BITMAP5;
		explode turretssides type FALL | BITMAP1;
		explode ground type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode frame type BITMAPONLY | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pillartops type SHATTER | BITMAP3;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode hole type BITMAPONLY | BITMAP5;
		explode turretssides type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode ground type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 4;
	explode frame type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pillartops type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel1 type BITMAPONLY | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode hole type BITMAPONLY | BITMAP5;
	explode turretssides type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode ground type BITMAPONLY | BITMAP2;
	return (0);
}
