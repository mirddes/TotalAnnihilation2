#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, door1, door2, back, cover, nano, beam, nano1, beam1, nano2, beam2, pad;

static-var  spray, unitviewer, Request_3, Busy_4, State_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState()
{
	if( Busy_4 )
	{
		return (0);
	}
	Busy_4 = TRUE;
	while( Request_3 != State_5 )
	{
		if( Request_3 )
		{
			dont-cache door1;
			dont-cache door2;
			dont-cache cover;
			dont-cache nano;
			dont-cache nano1;
			dont-cache nano2;
			turn door1 to z-axis <0> now;
			move door1 to y-axis [6.500000] speed [10];
			turn door2 to z-axis <0> now;
			move door2 to y-axis [6.500000] speed [10];
			sleep 610;
			turn door1 to z-axis <-90> speed <55>;
			turn door2 to z-axis <90> speed <55>;
			sleep 1350;
			turn cover to x-axis <-90> speed <150>;
			sleep 500;
			move nano to z-axis [4] speed [10.500000];
			turn nano1 to y-axis <90> speed <190>;
			turn nano2 to y-axis <-90> speed <190>;
			sleep 380;
			set YARD_OPEN to 1;
			while( !get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			set INBUILDSTANCE to 1;
			State_5 = 1;
		}
		if( !Request_3 )
		{
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			set BUGGER_OFF to 0;
			move door1 to y-axis [6.500000] now;
			move door2 to y-axis [6.500000] now;
			turn door1 to z-axis <-90> now;
			turn door2 to z-axis <90> now;
			turn cover to x-axis <-90> now;
			move nano to z-axis [4] now;
			turn nano1 to y-axis <90> now;
			turn nano2 to y-axis <-90> now;
			move nano to z-axis [0] speed [10.500000];
			turn nano1 to y-axis <0> speed <190>;
			turn nano2 to y-axis <0> speed <190>;
			sleep 380;
			turn cover to x-axis <0> speed <150>;
			sleep 500;
			turn door1 to z-axis <0> speed <55>;
			turn door2 to z-axis <0> speed <55>;
			sleep 1350;
			move door1 to y-axis [0] speed [10];
			move door2 to y-axis [0] speed [10];
			sleep 610;
			cache door1;
			cache door2;
			cache cover;
			cache nano;
			cache nano1;
			cache nano2;
			State_5 = 0;
		}
	}
	Busy_4 = FALSE;
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade back;
	dont-shade cover;
	dont-shade nano;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	unitviewer = FALSE;
	spray = body;
	Request_3 = 0;
	Busy_4 = 0;
	State_5 = 0;
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
		spray = 1;
		return (0);
	}
	if( spray == 1 )
	{
		piecenum = beam2;
		spray = 2;
		return (0);
	}
	if( spray == 2 )
	{
		piecenum = beam;
		spray = 0;
		return (0);
	}
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	Request_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	Request_3 = 0;
	sleep 12000;
	set-signal-mask 0;
	if( !Request_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY |BITMAP2;
		explode back type BITMAPONLY | BITMAP3;
		explode cover type BITMAPONLY | BITMAP4;
		explode nano type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP4;
		explode pad type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode back type SHATTER | BITMAP3;
		explode cover type BITMAPONLY | BITMAP4;
		explode nano type FALL | BITMAP5;
		explode nano1 type FALL | BITMAP4;
		explode nano2 type FALL | BITMAP4;
		explode pad type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode door1 type SHATTER | BITMAP2;
		explode door2 type SHATTER | BITMAP2;
		explode back type SHATTER | BITMAP3;
		explode cover type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode nano type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode nano1 type FALL | EXPLODE_ON_HIT |  BITMAP4;
		explode nano2 type FALL | EXPLODE_ON_HIT |  BITMAP4;
		explode pad type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode door1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode back type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode cover type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT |  BITMAP4;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT |  BITMAP4;
	explode pad type BITMAPONLY | BITMAP3;
	return (0);
}
