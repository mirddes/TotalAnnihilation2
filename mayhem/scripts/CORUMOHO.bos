#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  flarea, flareb, barrela, barrelb, launchera, launcherb, coil1a, coil2a,
       coil3a, coil1b, coil2b, coil3b, base, doors1, doors2, drive, 
       fan, emit1, emit2, emit3, emit4, patch, upgrade, hidden;

static-var  Speed_1, State_2, request_3, busy_4, upgraded; 

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( Rand( 1, 66 ) < healthpercent )
		{
			smoketype = 256 | 3;
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( busy_4 )
	{
		return (0);
	}
	busy_4 = 1;
	while( request_3 != State_2 )
	{
		if( request_3 == 1 )
		{
			State_2 = 1;
			spin drive around y-axis speed Speed_1 accelerate <0.5>;
			move doors1 to y-axis [-2] speed [2];
			move doors2 to y-axis [-2] speed [2];
			wait-for-move doors1 along y-axis;
			wait-for-move doors2 along y-axis;
			turn doors1 to y-axis <30> speed <60>;
			turn doors2 to y-axis <-30> speed <60>;
			set ARMORED to 0;
		}
		if( request_3 == 0 )
		{
			State_2 = 0;
			stop-spin drive around y-axis decelerate <5>;
			wait-for-turn drive around y-axis;
			turn doors1 to y-axis <0> speed <60>;
			turn doors2 to y-axis <0> speed <60>;
			wait-for-turn doors1 around y-axis;
			wait-for-turn doors2 around y-axis;
			set ARMORED to 1;
			move doors1 to y-axis [0] speed [4];
			move doors2 to y-axis [0] speed [4];
		}
	}
	busy_4 = 0;
}

Create()
{
	Speed_1 = 0;
	State_2 = 0;
	request_3 = 0;
	busy_4 = 0;
	upgraded=0;
	hide barrela;
	hide barrelb; 
	hide launchera; 
	hide launcherb;
	hide coil1a;
	hide coil2a;
	hide coil3a;
	hide coil1b;
	hide coil2b;
	hide coil3b;
	hide upgrade;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
}

Activate()
{
	if( !upgraded )
	{
		set INBUILDSTANCE to 1;
	}	
	if( !request_3 )
	{
		request_3 = 1;
		start-script RequestState();
		while( request_3 )
		{
			emit-sfx 259 from emit1;
			emit-sfx 259 from emit2;
			emit-sfx 259 from emit3;
			emit-sfx 259 from emit4;
			sleep 250;
		}
	}
}

Deactivate()
{
	if( request_3 )
	{
		request_3 = 0;
		start-script RequestState();
	}
}

QueryBuildInfo(piecenum)
{
	piecenum = base;
	if( !upgraded )
	{
		set YARD_OPEN to 1;
	}
}

StartBuilding()
{
	if( upgraded )
	{
		set INBUILDSTANCE to 0;
		set YARD_OPEN to 0;
		sleep 200;
		if( !request_3 )
		{
			set ACTIVATION to 1;
		}
	}
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	sleep 400;
	set YARD_OPEN to 0;
	sleep 1000;
	if( !request_3 )
	{
		set ACTIVATION to 1;
	}
	if( get YARD_OPEN )
	{
		if( !upgraded )
		{
			upgraded = 1;
			hide base;
			show upgrade;
			show barrela;
			show barrelb; 
			show launchera; 
			show launcherb;
			show coil1a;
			show coil2a;
			show coil3a;
			show coil1b;
			show coil2b;
			show coil3b;
			set ARMORED to 1;
		}
		return(0);
	}
	upgraded = 0;
	hide upgrade;
	show base;
	hide barrela;
	hide barrelb; 
	hide launchera; 
	hide launcherb;
	hide coil1a;
	hide coil2a;
	hide coil3a;
	hide coil1b;
	hide coil2b;
	hide coil3b;
	set ARMORED to 0;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	while( !upgraded )
	{
		sleep 1000;
	}
	turn launchera to y-axis heading speed <70>;
	wait-for-turn launchera around y-axis;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	while( !upgraded )
	{
		sleep 1000;
	}
	turn launcherb to y-axis heading speed <70>;
	wait-for-turn launcherb around y-axis;
	return (1);
}

FirePrimary()
{
	move barrela to z-axis [-3.30] speed [60];
	move coil1a to z-axis [-0.95] speed [17.27];
	move coil2a to z-axis [-1.85] speed [33.64];
	move coil3a to z-axis [-2.75] speed [50];
	sleep 55;
	move barrela to z-axis [-0.3] speed [4];
	move coil1a to z-axis [0] speed [1.37];
	move coil2a to z-axis [0] speed [2.66];
	move coil3a to z-axis [0] speed [3.96];
	sleep 750;
	move barrela to z-axis [0] speed [0.094];
	wait-for-move barrela along z-axis;
	Return(0);
}

FireSecondary()
{
	move barrelb to z-axis [-3.30] speed [60];
	move coil1b to z-axis [-0.95] speed [17.27];
	move coil2b to z-axis [-1.85] speed [33.64];
	move coil3b to z-axis [-2.75] speed [50];
	sleep 55;
	move barrelb to z-axis [-0.3] speed [4];
	move coil1b to z-axis [0] speed [1.37];
	move coil2b to z-axis [0] speed [2.66];
	move coil3b to z-axis [0] speed [3.96];
	sleep 750;
	move barrelb to z-axis [0] speed [0.094];
	wait-for-move barrelb along z-axis;
	Return(0);
}

QueryPrimary(piecenum)
{
	piecenum = flarea;
}

QuerySecondary(piecenum)
{
	piecenum = flareb;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	Speed_1 = Func_Var_1 * 5;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode drive type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode doors1 type BITMAPONLY | BITMAP3;
		explode doors2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode drive type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode doors1 type BITMAPONLY | BITMAP3;
		explode doors2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode drive type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode doors1 type BITMAPONLY | BITMAP3;
		explode doors2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode drive type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode doors1 type BITMAPONLY | BITMAP3;
	explode doors2 type BITMAPONLY | BITMAP2;
}