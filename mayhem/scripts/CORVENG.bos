#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  missle1, missle2, base, winga, wingb, thrusta1, thrusta2, thrustb;

static-var  Static_Var_1, Static_Var_2;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MoveRate2()
{
	if( ( Rand(1,10) == 1 ) AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240> speed <120>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120> speed <180>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0> speed <120>;
		Static_Var_1 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	start-script SmokeUnit();
}

Activate()
{
//		if( !Static_Var_3 )
//		{
//		turn winga to z-axis <0> now;
		turn winga to z-axis <-91.24> speed <63.23>;
//		turn wingb to z-axis <0> now;
		turn wingb to z-axis <91.24> speed <63.23>;
//		sleep 1466;
//		Static_Var_3 = 1;
//		}
	return (0);
}

Deactivate()
{
//		if( Static_Var_3 )
//		{
//		turn winga to z-axis <-91.24> now;
		turn winga to z-axis <0> speed <63.14>;
//		turn wingb to z-axis <91.24> now;
		turn wingb to z-axis <0> speed <63.14>;
//		sleep 1469;
//		Static_Var_3 = 0;
//		}
	return (0);
}

FirePrimary()
{
	Static_Var_2 = ( !Static_Var_2 );
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = Static_Var_2;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode missle1 type BITMAPONLY | BITMAP1;
		explode missle2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode winga type BITMAPONLY | BITMAP4;
		explode wingb type BITMAPONLY | BITMAP5;
		explode thrusta1 type BITMAPONLY | BITMAP1;
		explode thrusta2 type BITMAPONLY | BITMAP2;
		explode thrustb type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode missle1 type FALL | BITMAP1;
		explode missle2 type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode winga type SHATTER | BITMAP4;
		explode wingb type BITMAPONLY | BITMAP5;
		explode thrusta1 type FALL | BITMAP1;
		explode thrusta2 type FALL | BITMAP2;
		explode thrustb type FALL | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode missle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode missle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode winga type SHATTER | BITMAP4;
		explode wingb type BITMAPONLY | BITMAP5;
		explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	explode missle1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode missle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode winga type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wingb type BITMAPONLY | BITMAP5;
	explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}