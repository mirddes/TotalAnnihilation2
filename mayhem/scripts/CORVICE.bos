#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, barrel1, barrel2, sleeve, turret, body, pivot,
       lasflare1, lasflare2, laser1, laser2, stand1, stand2, lasaim, wake1,
       wake2, wake3, wake4, wake5, wake6, wake7, wake8, base, counteraim;

static-var  gun_1, gun_2, where_3, restore_4, reset_5,
            hit_6, aiming_7;

RestoreAfterDelay()
{
	sleep 6000;
	if( !restore_4)
	{
		signal 2;
		signal 4;
		aiming_7 = 0;
		turn sleeve to x-axis <0> speed <50>;
		turn laser1 to x-axis <0> speed <100>;
		turn laser2 to x-axis <0> speed <100>;
	}
	reset_5 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from body;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from turret;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from barrel1;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( restore_4 AND !reset_5 )
		{
			restore_4 = 0;
			reset_5 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
{
	if( hit_6 )
	{
		return (0);
	}
	hit_6 = 1;
	turn base to z-axis Func_Var_1 speed <105>;
	turn base to x-axis Func_Var_2 speed <105>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0> speed <30>;
	turn base to x-axis <0> speed <30>;
	sleep 180;
	hit_6 = 0;
	return (0);
}

StartMoving(count)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		count = 0;
		if( where_3 <= 3 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		while( count < 9 )
		{
			turn base to y-axis get XZ_ATAN(0) now;
			turn pivot to y-axis (0 - get XZ_ATAN(0)) speed <32>;
			turn counteraim to y-axis get XZ_ATAN(0) speed <32>;
			turn stand1 to y-axis get XZ_ATAN(0) speed <32>;
			turn stand2 to y-axis get XZ_ATAN(0) speed <32>;
			if( !aiming_7 )
			{
				turn turret to y-axis (0 - get XZ_ATAN(0)) speed <32>;
				turn laser1 to y-axis (0 - get XZ_ATAN(0)) speed <32>;
				turn laser2 to y-axis (0 - get XZ_ATAN(0)) speed <32>;
			}
			++count;
			sleep 33;
		}
	}
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	where_3 = Func_Var_1;
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	hide lasflare1;
	hide lasflare2;
	gun_2 = 0;
	restore_4 = FALSE;
	reset_5 = 0;
	hit_6 = 0;
	aiming_7 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
		turn base to y-axis get XZ_ATAN(0) now;
		turn pivot to y-axis (0 - get XZ_ATAN(0)) now;
		turn counteraim to y-axis get XZ_ATAN(0) NOW;
		turn stand1 to y-axis get XZ_ATAN(0) NOW;
		turn stand2 to y-axis get XZ_ATAN(0) NOW;
		turn turret to y-axis (0 - get XZ_ATAN(0)) NOW;
		turn laser1 to y-axis (0 - get XZ_ATAN(0)) NOW;
		turn laser2 to y-axis (0 - get XZ_ATAN(0)) NOW;
	}
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	aiming_7 = 1;
	turn turret to y-axis ( heading - get XZ_ATAN(0)) speed <90>;
	turn sleeve to x-axis <0> - pitch speed <60>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	restore_4 = TRUE;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	aiming_7 = 1;
	turn laser1 to y-axis ( heading - get XZ_ATAN(0)) speed <180>;
	turn laser1 to x-axis ( 0 - pitch ) speed <120>;
	turn laser2 to y-axis ( heading - get XZ_ATAN(0)) speed <180>;
	turn laser2 to x-axis ( 0 - pitch ) speed <120>;
	wait-for-turn laser1 around y-axis;
	wait-for-turn laser1 around x-axis;
	wait-for-turn laser2 around y-axis;
	wait-for-turn laser2 around x-axis;
	restore_4 = TRUE;
	return (1);
}

FirePrimary()
{
	turn pivot to x-axis <-5> speed <50>;
	move sleeve to z-axis [-1] speed [500];
	if( !gun_1 )
	{
		move barrel1 to z-axis [-2.5] speed [500];
		show flare1;
		sleep 150;
		hide flare1;
		move barrel1 to z-axis [0] speed [2];
	}
	if( gun_1 )
	{
		move barrel2 to z-axis [-2.5] speed [500];
		show flare2;
		sleep 150;
		hide flare2;
		move barrel2 to z-axis [0] speed [2];
	}
	gun_1 = !gun_1;
	move sleeve to z-axis [0] speed [2];
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = flare1;
		return(0);
	}
	piecenum = flare2;
	return (0);
}

FireSecondary()
{
	gun_2 = !gun_2;
	if( gun_2 )
	{
		show lasflare1;
		sleep 150;
		hide lasflare1;
		return(0);
	}
	show lasflare2;
	sleep 150;
	hide lasflare2;
	return (0);
}

QuerySecondary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = lasflare1;
		return(0);
	}
	piecenum = lasflare2;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = lasaim;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide lasflare1;
	hide lasflare2;
	if( where_3 >= 4 AND severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode laser1 type BITMAPONLY | BITMAP5;
		explode laser2 type BITMAPONLY | BITMAP5;
		explode stand1 type BITMAPONLY | BITMAP1;
		explode stand2 type BITMAPONLY | BITMAP1;
		
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode laser1 type FALL | SMOKE | BITMAP5;
		explode laser2 type FALL | SMOKE | BITMAP5;
		explode stand1 type FALL | BITMAP1;
		explode stand2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		explode laser1 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode laser2 type FALL | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode stand1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode stand2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode body type BITMAPONLY | BITMAP2;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode laser1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode laser2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode stand1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode stand2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
