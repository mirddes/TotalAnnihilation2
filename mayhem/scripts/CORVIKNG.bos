#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  barrel1, barrel2, turret1, turret2, holder1, holder2, wake1, wake2, 
       base;

static-var  gun_1, restore_delay;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0> speed <85>;
	turn barrel1 to x-axis <0> speed <50>;
	turn turret2 to y-axis <0> speed <85>;
	turn barrel2 to x-axis <0> speed <50>;
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret1 to y-axis heading speed <100>;
	turn turret2 to y-axis heading speed <100>;
	turn holder1 to x-axis <0> - pitch speed <50>;
	turn holder2 to x-axis <0> - pitch speed <50>;
	while( gun_1 == 2 )
	{
		wait-for-move holder2 along z-axis;
	}
	wait-for-turn turret1 around y-axis;
	wait-for-turn holder1 around x-axis;
	wait-for-turn turret2 around y-axis;
	wait-for-turn holder2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		gun_1 = 1;
		move holder1 to z-axis [-0.96] speed [50];
		sleep 30;
		move holder1 to z-axis [0] speed [0.4];
		return(0);
	}
	gun_1 = 2;
	move holder2 to z-axis [-0.96] speed [50];
	sleep 30;
	move holder2 to z-axis [0] speed [0.4];
	wait-for-move holder2 along z-axis;
	gun_1 = 0;
	//2 rockets every 3.1 secs 
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode holder1 type BITMAPONLY | BITMAP2;
		explode holder2 type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode holder1 type SHATTER | BITMAP2;
		explode holder2 type BITMAPONLY | BITMAP3;
		explode turret1 type FALL | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode holder1 type SHATTER | BITMAP2;
		explode holder2 type BITMAPONLY | BITMAP3;
		explode turret1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode holder1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode holder2 type BITMAPONLY | BITMAP3;
	explode turret1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type BITMAPONLY | BITMAP2;
}