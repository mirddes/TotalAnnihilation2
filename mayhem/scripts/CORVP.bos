#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam1, beam2, pad, base, layer3a, layer3b, layer3c, layer2a,
       layer2b, layer2c, layer1a, layer1b, layer1c, gun2, gun1, arm1, arm2;

static-var  Nano_1, ReqState_3, On_4, Busy_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ( ReqState_3 != On_4 ) )
	{
		Busy_5 = 1;
		if( ReqState_3 )
		{
			dont-cache arm1;
			dont-cache arm2;
			dont-cache gun1;
			dont-cache gun2;
			dont-cache layer1a;
			dont-cache layer1b;
			dont-cache layer1c;
			dont-cache layer2a;
			dont-cache layer2b;
			dont-cache layer2c;
			dont-cache layer3a;
			dont-cache layer3b;
			dont-cache layer3c;
			dont-cache pad;
			turn layer3a to y-axis <0> now;
			turn layer3a to y-axis <-89.45> speed <240.45>;
			turn layer3b to y-axis <0> now;
			turn layer3b to y-axis <-89.91> speed <241.68>;
			turn layer3c to y-axis <0> now;
			turn layer3c to y-axis <-89.91> speed <241.68>;
//			sleep 372;
			turn layer2a to y-axis <90.36> speed <228.77>;
			turn layer2b to y-axis <90.36> speed <228.77>;
			turn layer2c to y-axis <90.36> speed <228.77>;
//			sleep 395;
//			turn layer1a to y-axis <-89.91> speed <228.19>;
//			turn layer1b to y-axis <-89.91> speed <228.19>;
//			turn layer1c to y-axis <-89.91> speed <228.19>;
//			sleep 394;
			turn layer1a to y-axis <-179.81> speed <221.45>;
			turn layer1b to y-axis <-179.35> speed <220.31>;
			turn layer1c to y-axis <-179.81> speed <221.45>;
			sleep 406;
			move layer1b to z-axis [-11.40] speed [27.08];
			move layer2b to z-axis [-11.45] speed [27.20];
			move layer3b to z-axis [-11.50] speed [27.32];
			sleep 421;
			move layer1a to x-axis [5.35] speed [16.56];
			move layer1c to x-axis [-5.50] speed [17.03];
			move layer2a to x-axis [5.35] speed [16.56];
			move layer2c to x-axis [-5.50] speed [17.03];
			move layer3a to x-axis [5.30] speed [16.41];
			move layer3c to x-axis [-5.55] speed [17.18];
			move pad to z-axis [2.30] speed [7.12];
//			sleep 323;
			move gun2 to x-axis [-0.75] speed [1.55];
			move gun1 to x-axis [-0.85] speed [1.76];
			turn arm1 to y-axis <-90.36> speed <187.09>;
			turn arm2 to y-axis <88.99> speed <184.24>;
			turn gun2 to x-axis <-11> speed <22.79>;
			turn gun2 to y-axis <66.97> speed <138.65>;
			turn gun2 to z-axis <2.29> speed <4.75>;
			turn gun1 to x-axis <10.09> speed <20.88>;
			turn gun1 to y-axis <-66.97> speed <138.65>;
			turn gun1 to z-axis <2.29> speed <4.75>;
			sleep 504;
			move layer1a to z-axis [-12] speed [24];
			move layer1c to z-axis [-12] speed [24];
			move layer2a to z-axis [-12] speed [24];
			move layer2c to z-axis [-12] speed [24];
			move layer3a to z-axis [-12] speed [24];
			move layer3c to z-axis [-12] speed [24];
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
//			spin pad around y-axis speed <30>;
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
//			spin pad around y-axis speed <0>;
			move layer1a to z-axis [0] speed [30];
			move layer1c to z-axis [0] speed [30];
			move layer2a to z-axis [0] speed [30];
			move layer2c to z-axis [0] speed [30];
			move layer3a to z-axis [0] speed [30];
			move layer3c to z-axis [0] speed [30];
			move gun2 to x-axis [0] speed [1.80];
			move gun1 to x-axis [0] speed [2.04];
			turn arm1 to y-axis <0> speed <216.70>;
			turn arm2 to y-axis <0> speed <213.40>;
			turn gun2 to x-axis <0> speed <26.40>;
			turn gun2 to y-axis <0> speed <160.60>;
			turn gun2 to z-axis <0> speed <5.50>;
			turn gun1 to x-axis <0> speed <24.20>;
			turn gun1 to y-axis <0> speed <160.60>;
			turn gun1 to z-axis <0> speed <5.50>;
			sleep 417;
			move layer1a to x-axis [0] speed [16.67];
			move layer1c to x-axis [0] speed [17.13];
			move layer2a to x-axis [0] speed [16.67];
			move layer2c to x-axis [0] speed [17.13];
			move layer3a to x-axis [0] speed [16.51];
			move layer3c to x-axis [0] speed [17.29];
			move pad to z-axis [0] speed [7.17];
//			sleep 321;
			move layer1b to z-axis [0] speed [27.40];
			move layer2b to z-axis [0] speed [27.52];
			move layer3b to z-axis [0] speed [27.64];
			sleep 416;
//			turn layer1a to y-axis <-89.91> speed <216.64>;
//			turn layer1b to y-axis <-89.91> speed <215.54>;
//			turn layer1c to y-axis <-89.91> speed <216.64>;
//			sleep 415;
			turn layer1a to y-axis <0> speed <222.54>;
			turn layer1b to y-axis <0> speed <222.54>;
			turn layer1c to y-axis <0> speed <222.54>;
//			sleep 404;
			turn layer2a to y-axis <0> speed <212.13>;
			turn layer2b to y-axis <0> speed <212.13>;
			turn layer2c to y-axis <0> speed <212.13>;
//			sleep 426;
			turn layer3a to y-axis <0> speed <225.31>;
			turn layer3b to y-axis <0> speed <226.46>;
			turn layer3c to y-axis <0> speed <226.46>;
			sleep 409;
			cache arm1;
			cache arm2;
			cache gun1;
			cache gun2;
			cache layer1a;
			cache layer1b;
			cache layer1c;
			cache layer2a;
			cache layer2b;
			cache layer2c;
			cache layer3a;
			cache layer3b;
			cache layer3c;
			cache pad;
		}
		Busy_5 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade arm1;
	dont-shade arm2;
	dont-shade pad;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade layer1a;
	dont-shade layer1b;
	dont-shade layer1c;
	dont-shade layer2a;
	dont-shade layer2b;
	dont-shade layer2c;
	dont-shade layer3a;
	dont-shade layer3b;
	dont-shade layer3c;
	dont-shade pad;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 )
	{
		piecenum = beam2;
	}
	Nano_1 = !Nano_1;
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 8000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <-32>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode beam1 type BITMAPONLY | BITMAP4;
		explode beam2 type BITMAPONLY | BITMAP5;
		explode gun1 type BITMAPONLY | BITMAP1;
		explode gun2 type BITMAPONLY | BITMAP2;
		explode layer1a type BITMAPONLY | BITMAP3;
		explode layer1b type BITMAPONLY | BITMAP4;
		explode layer1c type BITMAPONLY | BITMAP5;
		explode layer2a type BITMAPONLY | BITMAP1;
		explode layer2b type BITMAPONLY | BITMAP2;
		explode layer2c type BITMAPONLY | BITMAP3;
		explode layer3a type BITMAPONLY | BITMAP4;
		explode layer3b type BITMAPONLY | BITMAP5;
		explode layer3c type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type FALL | BITMAP1;
		explode arm2 type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode beam1 type FALL | BITMAP4;
		explode beam2 type FALL | BITMAP5;
		explode gun1 type FALL | BITMAP1;
		explode gun2 type FALL | BITMAP2;
		explode layer1a type BITMAPONLY | BITMAP3;
		explode layer1b type BITMAPONLY | BITMAP4;
		explode layer1c type BITMAPONLY | BITMAP5;
		explode layer2a type BITMAPONLY | BITMAP1;
		explode layer2b type BITMAPONLY | BITMAP2;
		explode layer2c type SHATTER | BITMAP3;
		explode layer3a type FALL | BITMAP4;
		explode layer3b type FALL | BITMAP5;
		explode layer3c type FALL | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode layer1a type BITMAPONLY | BITMAP3;
		explode layer1b type BITMAPONLY | BITMAP4;
		explode layer1c type BITMAPONLY | BITMAP5;
		explode layer2a type BITMAPONLY | BITMAP1;
		explode layer2b type BITMAPONLY | BITMAP2;
		explode layer2c type SHATTER | BITMAP3;
		explode layer3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode layer3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode layer3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode layer1a type BITMAPONLY | BITMAP3;
	explode layer1b type BITMAPONLY | BITMAP4;
	explode layer1c type BITMAPONLY | BITMAP5;
	explode layer2a type BITMAPONLY | BITMAP1;
	explode layer2b type BITMAPONLY | BITMAP2;
	explode layer2c type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode layer3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode layer3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode layer3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pad type BITMAPONLY | BITMAP2;
	return (0);
}
