#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  base, Lwing, Rwing, f1, f2, nano1, nano2, nano3;

static-var  inwater_1, nano_2; //buildingid, buildingpos, buildingtype, buildingcrc;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	/*set GRANT_UNITINFO to 1;
	get SET_UNITINFO(uiHealTime,20);*/
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*Static-var shieldcloaked, cloakcost, cloakcostm;

Cloak(cloakdist, shieldID)
{
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			shieldcloaked = 1;
			get SET_CLOAKED(1);
		}
		//if the shield is now cloakdist the unit, the unit uses no energy to cloak
		get SET_UNITINFO(uiCloakCost, 0);
		get SET_UNITINFO(uiCloakCostMoving, 0);
		//if unit somehow moves away from the shield (eg got transported) then reset cloak costs
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_UNITINFO(uiCloakCost, cloakcost);
		get SET_UNITINFO(uiCloakCostMoving, cloakcostm);
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	nano_2 = 0;
	/*shieldcloaked=0;
	cloakcost = get GET_UNITINFO(uiCloakCost);
	cloakcostm = get GET_UNITINFO(uiCloakCostMoving);
	buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	var bcheck;
	bcheck = get BUILD_PERCENT_LEFT;*/
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	/*if( bcheck != 0 )
	{
		{
			if (get LOCAL_SHARED_DATA(0,get UNIT_TEAM(get MY_ID)) < 4)
			{
		    	get LOCAL_SHARED_DATA(1,get UNIT_TEAM(get MY_ID),4);
		    }
		}
	}
	if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var lSearchId, lUnitId, nCurrIdx, nFoundCount, crc;
		lSearchId = get FREE_ARRAY_ID(1);
		nFoundCount = get UNITS_WHOLEMAP(25,0,lSearchId,0);
		if (nFoundCount > 240 AND ( rand(1,2) < 2 ) )
		{
			var unit;
			unit = 0;
			get RANDOMIZE_UNITS_ARRAY(lSearchId,1);
			nCurrIdx = 1;
			while (nCurrIdx <= nFoundCount)
			{
				lUnitId = get UNITS_ARRAY_RESULT(lSearchId,nCurrIdx,1);
				crc = get UNIT_TYPE_CRC(lUnitId);
				if (crc == CORGANT OR crc == CORXVP)
				{
					unit = lUnitId;
					break;
				}
			++nCurrIdx;
			}
		}
		get CLEAR_ARRAY_ID(1,lSearchId);
		if (unit)
		{
			get ORDER_UNIT_UNIT(49,get MY_ID,unit,0);
		}
	}*/
	start-script SmokeUnit();
}

/*MoveRate1()
{
	if ((get CURRENT_ORDER_TYPE) == 54 AND (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2) AND (get INBUILDSTANCE) == 0)
	{
		get ORDER_SELF(45,0);
		get RESET_ORDER;
	}
}*/

Activate()
{
	turn Lwing to z-axis <90.02> speed <98.49>;
	turn Rwing to z-axis <-90.02> speed <98.49>;
	sleep 924;
}

Deactivate()
{
	turn Lwing to z-axis <0.00> speed <120.03>;
	turn Rwing to z-axis <0.00> speed <120.03>;
	sleep 760;
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		if( inwater_1 == 3 )
		{
			emit-sfx 256 | 3 from base;
			emit-sfx 256 | 3 from Lwing;
			emit-sfx 256 | 3 from Rwing;
			emit-sfx 256 | 3 from f1;
			emit-sfx 256 | 3 from f2;
			emit-sfx 256 | 3 from nano2;
			emit-sfx 256 | 3 from nano3;
		}
		sleep 150;
	}
}

StopMoving()
{
	signal 2;
}

StartBuilding(sleeptime)
{
	sleeptime = Rand(1,500);
	sleep sleeptime;
	set INBUILDSTANCE to 1;
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 54)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}*/
	return (0);
}

StopBuilding()
{
	/*if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - (get GROUND_HEIGHT(get UNIT_XZ(buildingid)) / 131072);
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(54,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}*/
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(piecenum)
{
	if( nano_2 == 0 )
	{
		piecenum = nano1;
	}
	if( nano_2 == 1 )
	{
		piecenum = nano2;
	}
	++nano_2;
	if( nano_2 > 2 )
	{
		piecenum = nano3;
		nano_2 = 0;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode Lwing type BITMAPONLY | BITMAP2;
		explode Rwing type BITMAPONLY | BITMAP3;
		explode nano1 type BITMAPONLY | BITMAP5;
		explode nano2 type BITMAPONLY | BITMAP5;
		explode nano3 type BITMAPONLY | BITMAP5;
		explode f1 type BITMAPONLY | BITMAP4;
		explode f2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode Lwing type SHATTER | BITMAP2;
		explode Rwing type BITMAPONLY | BITMAP3;
		explode nano1 type FALL | SMOKE | BITMAP5;
		explode nano2 type FALL | SMOKE | BITMAP5;
		explode nano2 type FALL | SMOKE | BITMAP5;
		explode f1 type FALL | BITMAP4;
		explode f2 type FALL | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode Lwing type SHATTER | BITMAP2;
		explode Rwing type BITMAPONLY | BITMAP3;
		explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode nano3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode f1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode f2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode Lwing type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode Rwing type BITMAPONLY | BITMAP3;
	explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode nano3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode f1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode f2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
}

setSFXoccupy(Func_Var_1)
{
	inwater_1 = Func_Var_1;
}
