#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, beam, door1, door2, post, neck, nanogun,
       nanogun2, beam2, f1, f2, f3, f4, wake1, wake2,
       wake3, wake4, wake5, wake6, wake7, wake8;

static-var  Gun_1, Static_Var_2, Request_3, Busy_4, State_5,
            Nano_6, Depth_7, delay_8, moving;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(sleeptime)
{
	while( ( !Busy_4 ) AND Request_3 != State_5 )
	{
		Busy_4 = 1;
		if( Request_3 AND ( !State_5 ) )
		{
			turn door1 to z-axis <0.00> now;
			turn door1 to z-axis <-160.00> speed <235.00>;
			turn door2 to z-axis <0.00> now;
			turn door2 to z-axis <160.00> speed <235.00>;
			sleep 683;
			turn post to x-axis <60.00> speed <86.00>;
			turn neck to x-axis <-60.00> speed <86.00>;
			sleep 700;
			move nanogun to x-axis [0.50] speed [2.00];
			move nanogun2 to x-axis [-0.50] speed [2.00];
			sleep 250;
			turn nanogun to y-axis Static_Var_2 speed <160.00>;
			turn nanogun2 to y-axis Static_Var_2 speed <160.00>;
			wait-for-turn nanogun around y-axis;
			wait-for-turn nanogun2 around y-axis;
			sleeptime = Rand(1,500);
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			State_5 = 1;
		}
		if( ( !Request_3 ) AND State_5 )
		{
			State_5 = 0;
			set INBUILDSTANCE to 0;
			turn nanogun to y-axis <0.00> speed <160.00>;
			turn nanogun2 to y-axis <0.00> speed <160.00>;
			move nanogun to x-axis [-0.50] speed [2.00];
			move nanogun2 to x-axis [0.50] speed [2.00];
			turn door1 to z-axis <-160.00> now;
			turn door2 to z-axis <160.00> now;
			turn post to x-axis <60.00> now;
			turn neck to x-axis <-60.00> now;
			sleep 250;
			wait-for-turn nanogun around y-axis;
			wait-for-turn nanogun2 around y-axis;
			turn post to x-axis <0.00> speed <90.00>;
			turn neck to x-axis <0.00> speed <90.00>;
			sleep 672;
			turn door1 to z-axis <0.00> speed <235.00>;
			turn door2 to z-axis <0.00> speed <235.00>;
			sleep 701;
		}
		Busy_4 = 0;
	}
}

StartMoving(count)
{
	moving=1;
	signal 8;
	set-signal-mask 8;
	while (TRUE)
	{
		count = 0;
		if( Depth_7 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		while( count < 9 )
		{
			turn base to y-axis get XZ_ATAN(0) now;
			turn body to y-axis (0 - get XZ_ATAN(0)) speed <32>;
			++count;
			sleep 33;
		}
	}
}

StopMoving()
{
	moving=0;
}

setSFXoccupy(Func_Var_1)
{
	Depth_7 = Func_Var_1;
}

Create()
{
	Static_Var_2 = 0;
	Request_3 = 0;
	Busy_4 = 0;
	State_5 = 0;
	Nano_6 = 0;
	Gun_1 = 0;
	Delay_8 = 0;
	moving=0;
	turn nanogun to z-axis <-60.00> now;
	turn nanogun2 to z-axis <60.00> now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
		turn base to y-axis get XZ_ATAN(0) now;
		turn body to y-axis (0 - get XZ_ATAN(0)) now;
	}
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	Request_3 = 1;
	start-script RequestState();
	return (0);
}

StopBuilding()
{
	Request_3 = 0;
	sleep 5000;
	if( !Request_3 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	if( !Nano_6 )
	{
		piecenum = beam;
	}
	if( Nano_6 )
	{
		piecenum = beam2;
	}
	Nano_6 = !Nano_6;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	while( delay_8 )
	{
		sleep 200;
	}
	return (1);
}

FirePrimary()
{
	++Gun_1;
	if( Gun_1 >= 4 )
	{
		delay_8 = 1;
		Gun_1 = 0;
		sleep 4200;
		delay_8 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = body;
}

QueryPrimary(piecenum)
{
	if( Gun_1 == 0 )
	{
		piecenum = f1;
	}
	if( Gun_1 == 1 )
	{
		piecenum = f2;
	}
	if( Gun_1 == 2 )
	{
		piecenum = f3;
	}
	if( Gun_1 == 3 )
	{
		piecenum = f4;
	}
}

Killed(severity, corpsetype)
{
	hide wake1;
	hide wake2;
	hide wake3;
	hide wake4;
	hide wake5;
	hide wake6;
	hide wake7;
	hide wake8;
	if( Depth_7 >= 4 AND severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode post type BITMAPONLY | BITMAP5;
		explode neck type BITMAPONLY | BITMAP1;
		explode nanogun type BITMAPONLY | BITMAP2;
		explode nanogun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | SMOKE | BITMAP2;
		explode beam2 type FALL | SMOKE | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode post type FALL | BITMAP5;
		explode neck type SHATTER | BITMAP1;
		explode nanogun type FALL | BITMAP2;
		explode nanogun2 type FALL | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode nanogun type SHATTER | BITMAP2;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP4;
	explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode nanogun type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode nanogun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
