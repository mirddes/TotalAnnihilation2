#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flarea, flareb, flarec, barrela1, barrela2, barrela3, barrela4, barrela5,
       barrelb1, barrelb2, barrelb3, barrelb4, barrelb5, barrelc1, barrelc2, barrelc3, 
       barrelc4, barrelc5, sleevea1, sleevea2, sleevea3, sleevea4, sleevea5, sleeveb1,
       sleeveb2, sleeveb3, sleeveb4, sleeveb5, sleevec1, sleevec2, sleevec3, sleevec4,
       sleevec5, spinnera, spinnerb, spinnerc, sleeve, riser, turret, lid, 
       missile, base;

static-var  gun_1, restore_4, reset_5, ready_6, busy_7;

RestoreAfterDelay()
{
	sleep 8000;
	while( busy_7 )
	{
		sleep 300;
	}
	if( !restore_4 )
	{
		busy_7 = 1;
		signal 2;
		signal 4;
		move lid to z-axis [0] speed [2];
		set-signal-mask 0;
		turn turret to y-axis <0> speed <80>;
		turn sleeve to x-axis <0> speed <50>;
		move riser to y-axis [0] speed [2.9];
		move barrela1 to z-axis [0] speed [4];
		move barrela2 to z-axis [0] speed [4];
		move barrela3 to z-axis [0] speed [4];
		move barrela4 to z-axis [0] speed [4];
		move barrela5 to z-axis [0] speed [4];
		move barrelb1 to z-axis [0] speed [4];
		move barrelb2 to z-axis [0] speed [4];
		move barrelb3 to z-axis [0] speed [4];
		move barrelb4 to z-axis [0] speed [4];
		move barrelb5 to z-axis [0] speed [4];
		move barrelc1 to z-axis [0] speed [4];
		move barrelc2 to z-axis [0] speed [4];
		move barrelc3 to z-axis [0] speed [4];
		move barrelc4 to z-axis [0] speed [4];
		move barrelc5 to z-axis [0] speed [4];
		wait-for-move riser along y-axis;
		gun_1 = 0;
		ready_6 = 0;
		busy_7 = 0;
	}
	reset_5 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( restore_4 AND !reset_5 )
		{
			restore_4 = 0;
			reset_5 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	gun_1 = 0;
	reset_5 = 0;
	ready_6 = 0;
	busy_7 = 0;
	turn sleevea2 to x-axis <-72> NOW;
	turn sleeveb2 to x-axis <-72> NOW;
	turn sleevec2 to x-axis <-72> NOW;
	turn sleevea3 to x-axis <-144> NOW;
	turn sleeveb3 to x-axis <-144> NOW;
	turn sleevec3 to x-axis <-144> NOW;
	turn sleevea4 to x-axis <-216> NOW;
	turn sleeveb4 to x-axis <-216> NOW;
	turn sleevec4 to x-axis <-216> NOW;
	turn sleevea5 to x-axis <-288> NOW;
	turn sleeveb5 to x-axis <-288> NOW;
	turn sleevec5 to x-axis <-288> NOW;
	set ARMORED to TRUE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	restore_4 = 1;
	start-script SmokeUnit();
	/*if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var target,lasttarget;
		lasttarget=0;
		while (1)
		{
			if ((get CURRENT_ORDER_TYPE) == 6)
			{
				target=get CURRENT_ORDER_TARGET_ID;
				while ((get CURRENT_ORDER_TYPE) == 6)
				{
					target=get CURRENT_ORDER_TARGET_ID;
					if (target != lasttarget)
					{
						get LOCAL_SHARED_DATA(1,20 + (get UNIT_TEAM(get MY_ID)),target);
					}
					lasttarget=target;
					sleep 500;
				}
				if ((get CURRENT_ORDER_TYPE) == 41)
				{
					target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					while (!(get UNIT_XZ(target)))
					{
						sleep 500;
						target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					}
					get ORDER_UNIT_UNIT(6,get MY_ID,target,0);
				}
			}
			sleep 500;
		}
	}*/
}

AimPrimary(heading, pitch)
{
	while( busy_7 )
	{
		sleep 300;
	}
	while( !ready_6 )
	{
		busy_7 = 1;
		move riser to y-axis [3] speed [3];
		sleep 400;
		move barrela1 to z-axis [2.5] speed [4];
		move barrela2 to z-axis [2.5] speed [4];
		move barrela3 to z-axis [2.5] speed [4];
		move barrela4 to z-axis [2.5] speed [4];
		move barrela5 to z-axis [2.5] speed [4];
		move barrelb1 to z-axis [2.5] speed [4];
		move barrelb2 to z-axis [2.5] speed [4];
		move barrelb3 to z-axis [2.5] speed [4];
		move barrelb4 to z-axis [2.5] speed [4];
		move barrelb5 to z-axis [2.5] speed [4];
		move barrelc1 to z-axis [2.5] speed [4];
		move barrelc2 to z-axis [2.5] speed [4];
		move barrelc3 to z-axis [2.5] speed [4];
		move barrelc4 to z-axis [2.5] speed [4];
		move barrelc5 to z-axis [2.5] speed [4];
		wait-for-move riser along y-axis;
		sleep 50;
		ready_6 = 1;
		busy_7 = 0;
	}		
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn turret to y-axis heading speed <90>;
	turn sleeve to x-axis <0> - pitch speed <60>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	restore_4 = 1;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 0;
	set-signal-mask 4;
	move lid to z-axis [-2] speed [4];
	wait-for-move lid along z-axis;
	restore_4 = 1;
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		turn spinnera to x-axis 0 NOW;
		show flarea;
		sleep 150;
		hide flarea;
		turn spinnera to x-axis <-72> speed <180>;
	}
	if( gun_1 == 1 )
	{
		turn spinnerb to x-axis 0 NOW;
		show flareb;
		sleep 150;
		hide flareb;
		turn spinnerb to x-axis <-72> speed <180>;
	}
	++gun_1;
	if( gun_1 > 2 )
	{
		turn spinnerc to x-axis 0 NOW;
		show flarec;
		sleep 150;
		hide flarec;
		turn spinnerc to x-axis <-72> speed <180>;
		gun_1 = 0;
	}
	return (0);
}

FireTertiary()
{
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = missile;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrela1 type BITMAPONLY | BITMAP1;
		explode barrela2 type BITMAPONLY | BITMAP2;
		explode barrela3 type BITMAPONLY | BITMAP3;
		explode barrela4 type BITMAPONLY | BITMAP4;
		explode barrela5 type BITMAPONLY | BITMAP5;
		explode barrelb1 type BITMAPONLY | BITMAP2;
		explode barrelb2 type BITMAPONLY | BITMAP3;
		explode barrelb3 type BITMAPONLY | BITMAP4;
		explode barrelb4 type BITMAPONLY | BITMAP5;
		explode barrelb5 type BITMAPONLY | BITMAP1;
		explode barrelc1 type BITMAPONLY | BITMAP3;
		explode barrelc2 type BITMAPONLY | BITMAP4;
		explode barrelc3 type BITMAPONLY | BITMAP5;
		explode barrelc4 type BITMAPONLY | BITMAP1;
		explode barrelc5 type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP3;
		explode lid type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode sleevea1 type BITMAPONLY | BITMAP4;
		explode sleeveb2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrela1 type FALL | BITMAP1;
		explode barrela2 type FALL | BITMAP2;
		explode barrela3 type FALL | BITMAP3;
		explode barrela4 type FALL | BITMAP4;
		explode barrela5 type FALL | BITMAP5;
		explode barrelb1 type FALL | BITMAP2;
		explode barrelb2 type FALL | BITMAP3;
		explode barrelb3 type FALL | BITMAP4;
		explode barrelb4 type FALL | BITMAP5;
		explode barrelb5 type FALL | BITMAP1;
		explode barrelc1 type FALL | BITMAP3;
		explode barrelc2 type FALL | BITMAP4;
		explode barrelc3 type FALL | BITMAP5;
		explode barrelc4 type FALL | BITMAP1;
		explode barrelc5 type FALL | BITMAP2;
		explode sleeve type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lid type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode sleevea1 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode sleeveb2 type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode sleevec3 type FALL | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode barrela1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode barrela2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode barrela3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode barrela4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode barrela5 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode barrelb1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode barrelb2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode barrelb3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode barrelb4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode barrelb5 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelc1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode barrelc2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode barrelc3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode barrelc4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelc5 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode lid type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode sleevea1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode sleeveb2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode sleevec3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode barrela1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrela2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrela3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrela4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrela5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrelb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrelb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrelb3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrelb4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrelb5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelc1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrelc2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrelc3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrelc4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelc5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lid type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode sleevea1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode sleeveb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleevec3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}
