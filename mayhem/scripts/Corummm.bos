#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, base, cap, glowingthing, pylon1, pylon2, pylon3, pylon4,
       bubble1, bubble2, bubble3, bubble4, bubble5, bubble6, bubble7, bubble8;

static-var hit_1, On_2, timer_3, busy_4, state_5;

SmokeUnit(healthpercent, sleeptime, smoketype, smokepiece)
{
	while( TRUE )
	{
		smokepiece = Rand( 1, 4 );
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				if( smokepiece == 1 )
				{
					emit-sfx 259 from pylon1;
				}
				if( smokepiece == 2 )
				{
					emit-sfx 259 from pylon2;
				}
				if( smokepiece == 3 )
				{
					emit-sfx 259 from pylon3;
				}
				if( smokepiece == 4 )
				{
					emit-sfx 259 from pylon4;
				}
			}
			emit-sfx 259 from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


Bubble(Func_Var_1)
{
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble1;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble2;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble3;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble4;
	}
	sleep 100;
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble5;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble6;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble7;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble8;
	}
	sleep 1000;
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble1;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble2;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble3;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble4;
	}
	sleep 100;
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble5;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble6;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble7;
	}
	Func_Var_1 = Rand( 1, 3 );
	if( Func_Var_1 == 1 )
	{
		emit-sfx 259 from bubble8;
	}
}

RequestState()
{
	if( busy_4 )
	{
		return (0);
	}
	busy_4 = 1;
	while( on_2 != state_5 )
	{
		if( on_2 )
		{
			dont-cache cap;
			dont-cache glowingthing;
			start-script Bubble();
			set ARMORED to 0;
			turn cap to y-axis <45.010989> speed <84>;
			sleep 266;
			move cap to y-axis [-16.05] speed [30];
			sleep 267;
			turn cap to z-axis <-180.043956> speed <338>;
			sleep 266;
			move cap to y-axis [-0.7] speed [28];
			sleep 266;
			state_5 = 1;
		}
		if( !on_2 )
		{
			set ARMORED to 1;
			cache cap;
			cache glowingthing;
			move cap to y-axis [-0.7] now;
			move cap to y-axis [-16.05] speed [28];
			turn cap to y-axis <45.010989> now;
			turn cap to z-axis <-180.043956> now;
			sleep 265;
			turn cap to z-axis <0> speed <338>;
			sleep 266;
			move cap to y-axis [0] speed [30];
			sleep 266;
			turn cap to y-axis <0> speed <84>;
			sleep 266;
			state_5 = 0;
		}
	}
	busy_4 = 0;
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade glowingthing;
	cache glowingthing;
	dont-shade base;
	dont-shade cap;
	On_2 = 0;
	Timer_3 = 0;
	busy_4 = 0;
	state_5 = 0;
	sleep 50;
	hit_1 = 0;
	if( !( get BUILD_PERCENT_LEFT ) )
	{
		set ACTIVATION to 0;
	}
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
	set ARMORED to 1;
}

Activate()
{
	on_2 = 1;
	hit_1 = 0;
	timer_3 = 0;
	if( !busy_4 )
	{
		start-script RequestState();
	}
	while( On_2 )
	{
		emit-sfx 259 from pylon1;
		sleep 2000;
		if( On_2 )
		{
			emit-sfx 259 from pylon2;
			sleep 2000;
		}
		if( On_2 )
		{
			emit-sfx 259 from pylon3;
			sleep 2000;
		}
		if( On_2 )
		{
			emit-sfx 259 from pylon4;
			sleep 2000;
		}
	}
}

Deactivate()
{
	on_2 = 0;
	if( !busy_4 )
	{
		start-script RequestState();
	}
	if( hit_1 )
	{
		timer_3 = 6;
		hit_1 = 0;
		while ( timer_3 )
		{
			timer_3 = timer_3 - 1;
			sleep 1000;
			if( hit_1 )
			{
				timer_3 = 9;
				hit_1 = 0;
			}
		}
		if( !On_2 )
		{
			set ACTIVATION to 1;
		}
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	hit_1 = 1;
	if( on_2 )
	{
		set ACTIVATION to 0;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type BITMAPONLY | BITMAP2;
		explode pylon1 type BITMAPONLY | BITMAP3;
		explode pylon2 type BITMAPONLY | BITMAP4;
		explode pylon3 type BITMAPONLY | BITMAP5;
		explode pylon4 type BITMAPONLY | BITMAP1;
		explode cap type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode pylon1 type FALL | BITMAP3;
		explode pylon2 type FALL | BITMAP4;
		explode pylon3 type FALL | BITMAP5;
		explode pylon4 type FALL | BITMAP1;
		explode cap type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode pylon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pylon2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pylon3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode pylon4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode cap type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode glowingthing type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode pylon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pylon2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode pylon3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode pylon4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode cap type BITMAPONLY | BITMAP2;
}
