#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, door, nano1, nano2, nano3, nano4, tower, 
       light1, light2, beam1, beam2, beam3, beam4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState()
{
	while( ( !Static_Var_4 ) AND Static_Var_2 != Static_Var_3 )
	{
		Static_Var_4 = 1;
		if( Static_Var_2 AND ( !Static_Var_3 ) )
		{
			dont-cache beam1;
			dont-cache beam2;
			dont-cache beam3;
			dont-cache beam4;
			dont-cache door;
			dont-cache nano1;
			dont-cache nano2;
			dont-cache nano3;
			dont-cache nano4;
			move base to y-axis [1.5] speed [3];
			turn door to z-axis <-90> speed <200>;
			sleep 450;
			turn door to z-axis <-120> speed <120>;
			sleep 250;
			turn door to z-axis <-150> speed <60>;
			move nano1 to z-axis [1] speed [4];
			move nano2 to z-axis [-1] speed [4];
			sleep 250; 
			turn nano3 to z-axis <-20> speed <80>;
			turn nano4 to z-axis <-20> speed <80>;
			sleep 250;
			set YARD_OPEN to 1;
			while( !get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			set INBUILDSTANCE to 1;
			Static_Var_3 = 1;
		}
		if( ( !Static_Var_2 ) AND Static_Var_3 )
		{
			Static_Var_3 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			turn nano3 to z-axis <0> speed <80>;
			turn nano4 to z-axis <0> speed <80>;
			move nano1 to z-axis [0] speed [4];
			move nano2 to z-axis [0] speed [4];
			sleep 250;
			turn door to z-axis <-30.00> speed <240.00>;
			sleep 500;
			turn door to z-axis <0> speed <100>;
			move base to y-axis [0] speed [3];
			sleep 300;
			cache beam1;
			cache beam2;
			cache beam3;
			cache beam4;
			cache door;
			cache nano1;
			cache nano2;
			cache nano3;
			cache nano4;
		}
		Static_Var_4 = 0;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade nano1;
	dont-shade nano2;
	dont-shade nano3;
	dont-shade nano4;
	dont-cache light1;
	dont-cache light2;
	dont-shade pad;
	dont-cache pad;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beam2;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = beam3;
	}
	++Static_Var_1;
	if( Static_Var_1 > 3 )
	{
		piecenum = beam4;
		Static_Var_1 = 0;
	}
}

Activate()
{
	set BUGGER_OFF to 1;
	Static_Var_2 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
}

Deactivate()
{
	set BUGGER_OFF to 1;
	Static_Var_2 = 0;
	sleep 10000;
	if( !Static_Var_2 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door type BITMAPONLY | BITMAP2;
		explode light1 type BITMAPONLY | BITMAP3;
		explode light2 type BITMAPONLY | BITMAP3;
		explode nano3 type BITMAPONLY | BITMAP4;
		explode nano4 type BITMAPONLY | BITMAP5;
		explode pad type BITMAPONLY | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door type FALL | BITMAP2;
		explode light1 type SHATTER | BITMAP3;
		explode light2 type FALL | BITMAP3;
		explode nano3 type FALL | BITMAP4;
		explode nano4 type FALL | BITMAP5;
		explode pad type BITMAPONLY | BITMAP1;
		explode nano1 type FALL | BITMAP2;
		explode nano2 type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode light1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode light2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode nano3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode nano4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode pad type BITMAPONLY | BITMAP1;
		explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode light1 type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode light2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode nano3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode nano4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode pad type BITMAPONLY | BITMAP1;
	explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
}
