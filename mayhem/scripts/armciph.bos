#define TA

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, turret, packs, sfin1, sfin2, barrel1, barrel2;

static-var  gun_1, reload_2, restore_3;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	gun_1 = 0;
	reload_2 = 0;
	restore_3 = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

SetMaxrestoreTime(Restore)
{
	restore_3 = Restore * 2;
}

RestoreAfterDelay()
{
	sleep restore_3;
	turn turret to y-axis <0> speed <100>;
	turn packs to x-axis <0> speed <40>;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <160>;
	turn packs to x-axis <0> - pitch speed <45>;
	while( reload_2 )
	{
		wait-for-move barrel1 along z-axis;
		wait-for-move barrel2 along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn packs around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	reload_2 = 1;
	move packs to z-axis [-1] speed [200];
	if( !gun_1 )
	{
		move barrel1 to z-axis [-1.5] speed [500];
		show flare1;
		sleep 150;
		hide flare1;
		move barrel1 to z-axis [0.00] speed [1];
	}
	if( gun_1 )
	{
		move barrel2 to z-axis [-1.5] speed [500];
		show flare2;
		sleep 150;
		hide flare2;
		move barrel2 to z-axis [0.00] speed [1];
	}
	gun_1 = !gun_1;
	move packs to z-axis [0] speed [5];
	wait-for-move barrel1 along z-axis;
	wait-for-move barrel2 along z-axis;
	reload_2 = 0;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP1;
		explode packs type BITMAPONLY | BITMAP4;
		explode sfin1 type BITMAPONLY | BITMAP5;
		explode sfin2 type BITMAPONLY | BITMAP5;
		explode barrel1 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP1;
		explode packs type BITMAPONLY | BITMAP4;
		explode sfin1 type FALL | BITMAP5;
		explode sfin2 type FALL | BITMAP5;
		explode barrel1 type FALL | SMOKE | BITMAP3;
		explode barrel2 type FALL | SMOKE | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP1;
		explode packs type BITMAPONLY | BITMAP4;
		explode sfin1 type FALL | SMOKE | BITMAP5;
		explode sfin2 type FALL | SMOKE | BITMAP5;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode turret type BITMAPONLY | BITMAP1;
	explode packs type BITMAPONLY | BITMAP4;
	explode sfin1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sfin2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
