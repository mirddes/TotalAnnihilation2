#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam1, beam2, nano1, nano2, post1, post2, turret1, turret2,
       plate1, plate2, door1a, door1b, door2a, door2b, base;

static-var  Heading_1, Request_2, Busy_3, State_4, Nano_5, Moving_6; //buildingid, buildingpos, buildingtype, buildingcrc;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	//set GRANT_UNITINFO to 1;
	//get SET_UNITINFO(uiHealTime,20);
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(sleeptime)
{
	if( Busy_3 )
	{
		return (0);
	}
	Busy_3 = 1;
	while( Request_2 != State_4 )
	{
		if( Request_2 )
		{
			turn door1a to z-axis <0> now;
			turn door1a to z-axis <-85> speed <160>;
			turn door2a to z-axis <0> now;
			turn door2a to z-axis <85> speed <160>;
			turn door1b to z-axis <0> now;
			turn door1b to z-axis <-85> speed <160>;
			turn door2b to z-axis <0> now;
			turn door2b to z-axis <85> speed <160>;
			sleep 500;
			move door1a to y-axis [-3.5] speed [7.8];
			move door2a to y-axis [-3.5] speed [7.8];
			move door1b to y-axis [-3.5] speed [7.8];
			move door2b to y-axis [-3.5] speed [7.8];
			move plate1 to y-axis [3.5] speed [8.4];
			move plate2 to y-axis [3.5] speed [8.4];
			sleep 430;
			turn post1 to x-axis <85> speed <200.396>;
			turn post2 to x-axis <85> speed <200.396>;
			turn nano1 to x-axis <-70> speed <160.500>;
			turn nano2 to x-axis <-70> speed <160.500>;
			sleep 430;
			turn turret1 to y-axis Heading_1 speed <160.500>;
			turn turret2 to y-axis Heading_1 speed <160.500>;
			wait-for-turn turret1 around y-axis;
			wait-for-turn turret2 around y-axis;
			sleeptime = Rand( 1, 500 );
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			State_4 = 1;
		}
		if( !Request_2  )
		{
			State_4 = 0;
			set INBUILDSTANCE to 0;
			turn turret1 to y-axis <0> speed <160.500>;
			turn turret2 to y-axis <0> speed <160.500>;
			wait-for-turn turret1 around y-axis;
			wait-for-turn turret2 around y-axis;
			move plate1 to y-axis [3.300] now;
			move plate1 to y-axis [3.300] now;
			move door1a to y-axis [-3.300] now;
			move door2a to y-axis [-3.300] now;
			move door1b to y-axis [-3.300] now;
			move door2b to y-axis [-3.300] now;
			turn door1a to z-axis <-85> now;
			turn door2a to z-axis <85> now;
			turn door1b to z-axis <-85> now;
			turn door2b to z-axis <85> now;
			turn post1 to x-axis <0> speed <225>;
			turn post2 to x-axis <90> now;
			turn post2 to x-axis <0> speed <225>;
			turn nano1 to x-axis <-75> now;
			turn nano1 to x-axis <0> speed <180>;
			turn nano2 to x-axis <-75> now;
			turn nano2 to x-axis <0> speed <180>;
			sleep 390;
			move plate1 to y-axis [0] speed [10.5];
			move plate2 to y-axis [0] speed [10.5];
			move door1a to y-axis [0] speed [8.4];
			move door2a to y-axis [0] speed [8.4];
			move door1b to y-axis [0] speed [8.4];
			move door2b to y-axis [0] speed [8.4];
			sleep 390;
			turn door1a to z-axis <0> speed <170>;
			turn door2a to z-axis <0> speed <170>;
			turn door1b to z-axis <0> speed <170>;
			turn door2b to z-axis <0> speed <170>;
			sleep 450;
		}
	}
	Busy_3 = 0;
}

/*Static-var shieldcloaked, cloakcost, cloakcostm;

Cloak(cloakdist, shieldID)
{
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			shieldcloaked = 1;
			get SET_CLOAKED(1);
		}
		//if the shield is now cloakdist the unit, the unit uses no energy to cloak
		get SET_UNITINFO(uiCloakCost, 0);
		get SET_UNITINFO(uiCloakCostMoving, 0);
		//if unit somehow moves away from the shield (eg got transported) then reset cloak costs
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_UNITINFO(uiCloakCost, cloakcost);
		get SET_UNITINFO(uiCloakCostMoving, cloakcostm);
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	/*shieldcloaked=0;
	cloakcost = get GET_UNITINFO(uiCloakCost);
	cloakcostm = get GET_UNITINFO(uiCloakCostMoving);
	buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	var bcheck;
	bcheck = get BUILD_PERCENT_LEFT;*/
	Nano_5 = 0;
	Heading_1 = 0;
	Request_2 = 0;
	Busy_3 = 0;
	State_4 = 0;
	Moving_6 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	/*if( bcheck != 0 )
	{
		{
			if (get LOCAL_SHARED_DATA(0,get UNIT_TEAM(get MY_ID)) < 4)
			{
		    	get LOCAL_SHARED_DATA(1,get UNIT_TEAM(get MY_ID),4);
		    }
		}
	}*/
	start-script SmokeUnit();
}

StartMoving()
{
	Moving_6 = 1;
}

StopMoving()
{
	/*if ((get CURRENT_ORDER_TYPE) == 25 AND (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2))
	{
		sleep 1000;
		if (!Moving_6 AND !Request_2)
		{
			get ORDER_SELF(45,0);
		}
	}*/
}

TargetHeading(Func_Var_1)
{
	Heading_1 = 0 - Func_Var_1;
}

StartBuilding(Func_Var_1)
{
	Heading_1 = Func_Var_1;
	Request_2 = 1;
	start-script RequestState();
	/*buildingid=0;
	buildingpos=0;
	buildingtype=0;
	buildingcrc=0;
	if ((get CURRENT_ORDER_TYPE) == 25)
	{
		buildingid=get CURRENT_ORDER_TARGET_ID;
		if (buildingid)
		{
			buildingpos=get UNIT_XZ(buildingid);
			buildingcrc=get UNIT_TYPE_CRC(buildingid);
			buildingtype=get CURRENT_ORDER_PAR(1);
		}
	}*/
	return (0);
}

StopBuilding()
{
	/*if ((get UNIT_XZ(buildingid)) == 0)
	{
		if (get TEST_BUILD_SPOT(buildingcrc,buildingpos))
		{
			var unitz,unitx;
			unitz=get UNITZ(buildingid) - (get GROUND_HEIGHT(get UNIT_XZ(buildingid)) / 131072);
			unitx=get UNITX(buildingid);
			buildingpos=get MAKEDWORD(unitz,unitx);
			get ORDER_SELF_POS(25,1,buildingpos,buildingtype);
			buildingid=0;
			buildingpos=0;
			buildingtype=0;
			buildingcrc=0;
			return (0);
		}
	}*/
	Request_2 = 0;
	sleep 6000;
	if( !Request_2 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	if( !Nano_5 )
	{
		piecenum = beam1;
	}
	if( Nano_5 )
	{
		piecenum = beam2;
	}
	Nano_5 = !Nano_5;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode nano1 type BITMAPONLY | BITMAP3;
		explode beam1 type BITMAPONLY | BITMAP4;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode nano2 type FALL | BITMAP3;
		explode beam2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode nano1 type FALL | BITMAP3;
		explode beam1 type FALL | SMOKE | BITMAP4;
		explode turret1 type SHATTER | BITMAP2;
		explode nano2 type FALL | BITMAP3;
		explode beam2 type FALL | SMOKE | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode nano1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret1 type SHATTER | SMOKE | BITMAP2;
		explode nano2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
