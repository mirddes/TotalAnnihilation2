#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  tube1a, tube2a, tube1b, tube2b, tube1c, tube2c, launch1, torp1,
       launch2, torp2, tube3, launch3, torp3, wakeL, wakeR, bb1a, 
       bb1b, bb2a, bb2b, bb3a, bb3b, prop1, prop2, prop3, 
       tsL, tsR, glugglug, base;

static-var  gun_1, gun_2, moving_3, restore_4, reset_5;

RestoreAfterDelay()
{
	sleep 6000;
	if( !Restore_4 )
	{
		signal 2;
		signal 4;
		signal 16;
		turn torp1 to y-axis 0 speed <100>;
		turn launch1 to x-axis 0 speed <100>;
		turn torp2 to y-axis 0 speed <100>;
		turn launch2 to x-axis 0 speed <100>;
		turn torp3 to y-axis 0 speed <80>;
	}
	reset_5 = 0;
}

Smokeunit(healthpercent, sleeptime)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			emit-sfx 259 from base;
		}
		sleeptime = healthpercent * 100;
		if( sleeptime < 400 )
		{
			sleeptime = 400;
		}
		sleep sleeptime;
		if( restore_4 AND !reset_5 )
		{
			reset_5 = 1;
			restore_4 = 0;
			Start-script RestoreAfterDelay();
		}
	}
}
		

uboat()
{
	while( TRUE )
	{
		emit-sfx 259 from glugglug;
		sleep 650;
		if( !moving_3 )
		{
			sleep 3000;
		}
	}
}

Create()
{
	set ARMORED to 1;
	gun_1 = 0;
	gun_2 = 0;
	moving_3 = 0;
	restore_4 = 0;
	reset_5 = 0;
	move base to y-axis [-20] NOW;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script uboat();
	start-script Smokeunit();
}

StartMoving()
{
	move base to y-axis [0] NOW;
	signal 8;
	set-signal-mask 8;
	moving_3 = 1;
	while( moving_3 )
	{
		spin prop1 around z-axis speed <100> accelerate <10>;
		spin prop2 around z-axis speed <100> accelerate <10>;
		spin prop3 around z-axis speed <100> accelerate <10>;
		emit-sfx 4 from wakeL;
		emit-sfx 2 from wakeR;
		emit-sfx 259 from bb1a;
		emit-sfx 259 from bb1b;
		emit-sfx 259 from bb2a;
		emit-sfx 259 from bb2b;
		emit-sfx 259 from bb3a;
		emit-sfx 259 from bb3b;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
	spin prop1 around z-axis speed <0>;
	spin prop2 around z-axis speed <0>;
	spin prop3 around z-axis speed <0>;
	moving_3 = 0;
}

AimSecondary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn torp1 to y-axis heading speed <180>;
	turn torp2 to y-axis heading speed <180>;
	turn launch1 to x-axis (0 - pitch) speed <100>;
	turn launch2 to x-axis (0 - pitch) speed <100>;
	wait-for-turn torp1 around y-axis;
	wait-for-turn torp2 around y-axis;
	wait-for-turn launch1 around x-axis;
	wait-for-turn launch2 around x-axis;
	Restore_4 = 1;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	turn torp3 to y-axis heading speed <120>;
	wait-for-turn torp3 around y-axis;
	Restore_4 = 1;
	return (1);
}

FireSecondary()
{
	++gun_2;
	if( gun_2 > 5 )
	{
		gun_2 = 0;
	}
}

FirePrimary()
{
	gun_1 = !gun_1;
}

FireTertiary()
{
	move launch3 to z-axis [-3] speed [200]; 
	emit-sfx 259 from tube3;
	sleep 200;
	emit-sfx 259 from launch3;
	move launch3 to z-axis [0] speed [2];
}

AimFromSecondary(piecenum)
{
	piecenum = torp3;
}

AimFromTertiary(piecenum)
{
	piecenum = torp3;
}

QuerySecondary(piecenum)
{
	piecenum = gun_2;
}

QueryPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = tsL;
	}
	if( gun_1 )
	{
		piecenum = tsR;
	}
}

QueryTertiary(piecenum)
{
	piecenum = tube3;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wakeL type BITMAPONLY | BITMAP2;
		explode wakeR type BITMAPONLY | BITMAP3;
		explode torp1 type BITMAPONLY | BITMAP1;
		explode torp2 type BITMAPONLY | BITMAP2;
		explode launch1 type SHATTER | BITMAP3;
		explode launch1 type BITMAPONLY | BITMAP4;
		explode torp3 type BITMAPONLY | BITMAP3;
		explode launch3 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode wakeL type BITMAPONLY | BITMAP2;
		explode wakeR type BITMAPONLY | BITMAP3;
		explode glugglug type BITMAPONLY | BITMAP5;
		explode torp1 type FALL | BITMAP1;
		explode torp2 type BITMAPONLY | BITMAP2;
		explode launch1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode launch2 type FALL | BITMAP4;
		explode torp3 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode launch3 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode wakeL type BITMAPONLY | BITMAP2;
		explode wakeR type BITMAPONLY | BITMAP3;
		explode glugglug type BITMAPONLY | BITMAP5;
		explode torp1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode torp2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode launch1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode launch2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode torp3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode launch3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode wakeL type BITMAPONLY | BITMAP2;
	explode wakeR type BITMAPONLY | BITMAP3;
	explode torp1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode torp2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode launch1 type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode launch2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode torp3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode launch3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode glugglug type BITMAPONLY | BITMAP5;
}
