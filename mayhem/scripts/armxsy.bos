#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  turret1, turret2, turret3, turret4, light, light2, tower1, tower2, 
       beam1, beam2, beam3, beam4, nano1, nano2, nano3, nano4,
       base, slip;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ( ReqState_3 != On_4 ) )
	{
		Busy_5 = 1;
		if( ReqState_3 )
		{
		dont-cache beam1;
		dont-cache beam2;
		dont-cache beam3;
		dont-cache beam4;
		dont-cache nano1;
		dont-cache nano2;
		dont-cache nano3;
		dont-cache nano4;
		dont-cache slip;
		dont-cache turret1;
		dont-cache turret2;
		dont-cache turret3;
		dont-cache turret4;
		dont-cache light;
		dont-cache light2;
		move nano4 to y-axis [0] now;
		move nano4 to y-axis [7.80] speed [10.39];
		move nano3 to y-axis [0] now;
		move nano3 to y-axis [7.75] speed [10.32];
		move nano2 to y-axis [0] now;
		move nano2 to y-axis [7.80] speed [10.39];
		move nano1 to y-axis [0] now;
		move nano1 to y-axis [7.75] speed [10.32];
		sleep 751;
		turn nano4 to x-axis <311.92> speed <411.51>;
		turn nano3 to x-axis <312.37> speed <412.10>;
		turn nano2 to x-axis <-311.92> speed <411.51>;
		turn nano1 to x-axis <-312.37> speed <412.10>;
//		sleep 758;
		turn turret1 to y-axis <-45> speed <59.22>;
		turn turret2 to y-axis <45.46> speed <59.81>;
		turn turret3 to y-axis <45> speed <59.22>;
		turn turret4 to y-axis <-45.46> speed <59.81>;
		sleep 797;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
		move nano4 to y-axis [7.80] now;
		move nano3 to y-axis [7.75] now;
		move nano2 to y-axis [7.80] now;
		move nano1 to y-axis [7.75] now;
		turn turret1 to y-axis <-45> now;
		turn turret1 to y-axis <0> speed <60>;
		turn turret2 to y-axis <45.46> now;
		turn turret2 to y-axis <0> speed <60.61>;
		turn turret3 to y-axis <45> now;
		turn turret3 to y-axis <0> speed <60>;
		turn turret4 to y-axis <-45.46> now;
		turn turret4 to y-axis <0> speed <60.61>;
		turn nano4 to x-axis <311.92> now;
		turn nano3 to x-axis <312.37> now;
		turn nano2 to x-axis <-311.92> now;
		turn nano1 to x-axis <-312.37> now;
//		sleep 750;
		turn nano4 to x-axis <0> speed <412.05>;
		turn nano3 to x-axis <0> speed <412.65>;
		turn nano2 to x-axis <0> speed <412.05>;
		turn nano1 to x-axis <0> speed <412.65>;
		sleep 757;
		move nano4 to y-axis [0] speed [10.26];
		move nano3 to y-axis [0] speed [10.20];
		move nano2 to y-axis [0] speed [10.26];
		move nano1 to y-axis [0] speed [10.20];
		sleep 797;
		cache beam1;
		cache beam2;
		cache beam3;
		cache beam4;
		cache nano1;
		cache nano2;
		cache nano3;
		cache nano4;
		cache slip;
		cache turret1;
		cache turret2;
		cache turret3;
		cache turret4;
		cache light;
		cache light2;
		}
		Busy_5 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade light;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade slip;
	dont-shade turret1;
	dont-shade turret1;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	dont-cache light;
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 == 1 )
	{
		piecenum = beam2;
	}	
	if( Nano_1 == 2 )
	{
		piecenum = beam3;
	}
	++Nano_1;
	if( Nano_1 > 3 )
	{
		piecenum = beam4;
		Nano_1 = 0;
	}
	return (0);
}

Activate()
{
	signal 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 10000;
	set-signal-mask 0;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = slip;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = light;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turret3 type BITMAPONLY | BITMAP1;
		explode turret4 type BITMAPONLY | BITMAP2;
		explode light type BITMAPONLY | BITMAP3;
		explode light2 type BITMAPONLY | BITMAP3;
		explode beam1 type BITMAPONLY | BITMAP4;
		explode beam2 type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;
		explode slip type BITMAPONLY | BITMAP2;
		explode nano4 type BITMAPONLY | BITMAP3;
		explode nano3 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode tower1 type BITMAPONLY | BITMAP5;
		explode tower2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret1 type FALL | BITMAP1;
		explode turret2 type FALL | BITMAP2;
		explode turret3 type FALL | BITMAP1;
		explode turret4 type FALL | BITMAP2;
		explode light type FALL | BITMAP3;
		explode light2 type FALL | BITMAP3;
		explode beam1 type BITMAPONLY | BITMAP4;
		explode beam2 type BITMAPONLY | BITMAP5;
		explode beam3 type BITMAPONLY | BITMAP4;
		explode beam4 type BITMAPONLY | BITMAP5;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode slip type BITMAPONLY | BITMAP2;
		explode nano4 type FALL | BITMAP3;
		explode nano3 type FALL | BITMAP4;
		explode nano2 type FALL | BITMAP3;
		explode nano1 type FALL | BITMAP4;
		explode tower1 type BITMAPONLY | BITMAP5;
		explode tower2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode light type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode light2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode beam3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode beam4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode slip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nano4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nano3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode tower1 type BITMAPONLY | BITMAP5;
		explode tower2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode light type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode light2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode beam3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode beam4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode slip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nano4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode nano3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode tower1 type BITMAPONLY | BITMAP5;
	explode tower2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}