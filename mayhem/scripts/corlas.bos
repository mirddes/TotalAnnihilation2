#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"
//#include "unitsweaps.h"

piece  base, turretbase, turret, gun, Flare, flash;

static-var  hit_1, reload_2;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( !hit_1 )
	{
		hit_1 = 1;
		turn base to z-axis Func_Var_2 speed <105>;
		turn base to x-axis Func_Var_1 speed <105>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0> speed <30>;
		turn base to x-axis <0> speed <30>;
		sleep 100;
		hit_1 = 0;
	}
}	

Create()
{
	hit_1 = 0;
	reload_2 = 0;
	hide Flare;
	hide flash;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 2000;
	hide flash;
	sleep 4000;
	set-signal-mask 0;
	hide flash;
	turn turret to y-axis <0> speed <90>;
	turn gun to x-axis <0> speed <50>;
	move turretbase to y-axis [0] speed [3.2];
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = Flare;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	move turretbase to y-axis [3.2] speed [4];
	turn turret to y-axis heading speed <120>;
	turn gun to x-axis <0> - pitch speed <50>;
	wait-for-move turretbase along y-axis;
	while( reload_2 )
	{
		wait-for-move gun along z-axis;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	show flash;
	sleep 120;
	hide flash;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	reload_2 = 1;
	show flash;
	show Flare;
	move gun to z-axis [-1] NOW;
	sleep 120;
	hide Flare;
	hide flash;
	move gun to z-axis [0] speed [0.2];
	wait-for-move gun along z-axis;
	reload_2 = 0;
}

Killed(severity, corpsetype)
{
	hide Flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode turretbase type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode flash type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode turretbase type FALL | BITMAP3;
		explode gun type FALL | SMOKE | BITMAP4;
		explode flash type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turretbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flash type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
