#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Base, Turret1, Sleeve1, Barrel1, Flare1, Turret2, Turret2front, Sleeve2,   
       Barrel2A, Barrel2B, Flare2A, Flare2B, Turret3, Sleeve3, Barrel3, Flare3, 
       shell1, shell2a, shell2b, shell3a, shell3b, plate;

static-var  request_1, gun_2, state_3, stayopen_4, Restore_5, Reset_6, reload_7, delay_8;

RestoreAfterDelay()
{
	sleep 8000;
	if( !Restore_5 )
	{		
		turn turret3 to y-axis 0 speed <200>;
		turn turret2 to y-axis 0 speed <150>;
		turn turret1 to y-axis 0 speed <100>;
		turn sleeve1 to x-axis 0 speed <60>;
		signal 2;
		signal 4;
		signal 16;
		if( !stayopen_4 )
		{
			request_1 = 0;
		}
	}
	Reset_6 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Restore_5 AND ( !Reset_6 ) )
		{
			Restore_5 = FALSE;
			Reset_6 = 1;
			start-script RestoreAfterDelay();
		}
	}
	return (0);
}

RequestState()
{
	while( TRUE )
	{
		if( ( !request_1 ) AND state_3 AND ( !stayopen_4 ) )
		{
			state_3 = 0;
			signal 2;
			signal 4;
			signal 16;
			turn turret3 to y-axis 0 speed <200>;
			turn turret2 to y-axis 0 speed <150>;
			turn turret1 to y-axis 0 speed <100>;
			turn sleeve1 to x-axis 0 speed <60>;
			wait-for-turn turret1 around y-axis;
			wait-for-turn turret2 around y-axis;
			wait-for-turn turret3 around y-axis;
			move sleeve2 to z-axis [0] speed [8];
			move sleeve3 to z-axis [0] speed [8];
			sleep 125;
			move turret2front to z-axis [0] speed [4];
			move barrel1 to z-axis [0] speed [12];
			sleep 250;
			move barrel2a to z-axis [0] speed [12];
			move barrel2b to z-axis [0] speed [12];
			move barrel3 to z-axis [0] speed [12];
			sleep 250;
			move turret2 to y-axis [0] speed [4];
			move turret1 to y-axis [0] speed [6];
			sleep 250;
			move plate to y-axis [0] speed [8];
			move plate to z-axis [0] speed [2];
			sleep 500;
			turn shell1 to x-axis <-30> speed <150>;
			sleep 800;
			turn shell1 to x-axis <0> speed <60>;
			move shell1 to y-axis [0] speed [2];
			move shell1 to z-axis [0] speed [2];
			turn shell2a to z-axis <0> speed <120>;
			turn shell3a to z-axis <0> speed <120>;
			sleep 250;
			move shell2a to z-axis 0 speed [8];
			move shell3a to z-axis 0 speed [8];
			move shell2b to z-axis 0 speed [6];
			move shell3b to z-axis 0 speed [6];
			set ARMORED to 1;
			sleep 250;
		}
		if( request_1 AND ( !state_3 ) )
		{
			move shell1 to y-axis [0.5] speed [4];
			move shell2a to y-axis [-0.5] speed [4];
			move shell3a to y-axis [-0.5] speed [4];
			sleep 125;
			move shell2a to z-axis [-1] speed [4];
			move shell3a to z-axis [-1] speed [4];
			move shell2b to z-axis [2] speed [8];
			move shell3b to z-axis [2] speed [8];
			sleep 250;
			set ARMORED to 0;
			turn shell1 to x-axis <-30> speed <75>;
			turn shell2a to z-axis <45> speed <120>;
			turn shell3a to z-axis <-45> speed <120>;
			move shell2a to y-axis [0] speed [1.25];
			move shell2b to y-axis [0] speed [1.25];
			sleep 400;
			turn shell1 to x-axis <-150> speed <150>;
			move shell1 to y-axis [-0.5] speed [1];
			move plate to y-axis [8] speed [8];
			move plate to z-axis [-2] speed [2];
			move turret1 to z-axis [2] speed [2];
			move turret2 to z-axis [1] speed [1];
			sleep 500;
			move turret1 to y-axis [6] speed [12];
			move turret2 to y-axis [2] speed [12];
			move sleeve2 to z-axis [3] speed [3];
			move sleeve3 to z-axis [5] speed [5];
			sleep 300;
			move shell1 to z-axis [1] speed [2];
			move turret2front to z-axis [2] speed [8];
			move barrel1 to z-axis [4] speed [6];
			move barrel2a to z-axis [3] speed [6];
			move barrel2b to z-axis [3] speed [6];
			move barrel3 to z-axis [3] speed [6];
			sleep 500;
			state_3 = 1;
		}
		sleep 250;
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	request_1 = 0;
	gun_2 = 0;
	state_3 = 0;
	stayopen_4 = 0;
	restore_5 = 0;
	reset_6 = 0;
	reload_7 = 0;
	delay_8 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script RequestState();
	request_1 = 1;
	restore_5 = 1;
	/*if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var target,lasttarget;
		lasttarget=0;
		while (1)
		{
			if ((get CURRENT_ORDER_TYPE) == 6)
			{
				target=get CURRENT_ORDER_TARGET_ID;
				while ((get CURRENT_ORDER_TYPE) == 6)
				{
					target=get CURRENT_ORDER_TARGET_ID;
					if (target != lasttarget)
					{
						get LOCAL_SHARED_DATA(1,20 + (get UNIT_TEAM(get MY_ID)),target);
					}
					lasttarget=target;
					sleep 500;
				}
				if ((get CURRENT_ORDER_TYPE) == 41)
				{
					target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					while (!(get UNIT_XZ(target)))
					{
						sleep 500;
						target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					}
					get ORDER_UNIT_UNIT(6,get MY_ID,target,0);
				}
			}
			sleep 500;
		}
	}*/
}

Activate()
{
	stayopen_4 = 1;
	request_1 = 1;
}

Deactivate()
{
	signal 2;
	signal 4;
	signal 8;
	set-signal-mask 0;
	stayopen_4 = 0;
	request_1 = 0;
}

AimPrimary(heading, pitch)
{
	while( !state_3 )
	{
		request_1 = 1;
		while( !state_3 )
		{
			sleep 300;
		}
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	turn Turret1 to y-axis heading speed <90>;
	turn Sleeve1 to x-axis <0> - pitch speed <50>;
	while( reload_7 )
	{
		wait-for-move Barrel1 along z-axis;
		reload_7 = 0;
	}
	wait-for-turn Turret1 around y-axis;
	wait-for-turn Sleeve1 around x-axis;
	Reset_6 = 9000;
	return (1);
}

AimSecondary(heading, pitch)
{
	while( !state_3 )
	{
		request_1 = 1;
		while( !state_3 )
		{
			sleep 300;
		}
	}
	signal 4;
	set-signal-mask 4;
	turn Turret2 to y-axis heading speed <240>;
	while( delay_8 )
	{
		sleep 150;
		wait-for-move Barrel2A along z-axis;
		wait-for-move Barrel2B along z-axis;
		delay_8 = 0;
	}
	wait-for-turn Turret2 around y-axis;
	Reset_6 = 4000;
	return (1);
}

AimTertiary(heading, pitch)
{
	while( !state_3 )
	{
		request_1 = 1;
		while( !state_3 )
		{
			sleep 300;
		}
	}
	signal 16;
	set-signal-mask 16;
	turn Turret3 to y-axis heading speed <300>;
	wait-for-turn Turret3 around y-axis;
	Reset_6 = 4000;
	return (1);
}

FirePrimary()
{
	reload_7 = 1;
	move Barrel1 to z-axis [2.2] NOW;
	move Barrel1 to z-axis [4] speed [0.5];
	wait-for-move Barrel1 along z-axis;
	reload_7 = 0;
	return (0);
}

FireSecondary()
{
	delay_8 = 1;
	if( !gun_2 )
	{
		move Barrel2A to z-axis [2] speed [500];
		sleep 150;
		move Barrel2A to z-axis [3] speed [1.25];
	}
	if( gun_2 )
	{
		move Barrel2B to z-axis [2] speed [500];
		sleep 150;
		move Barrel2B to z-axis [3] speed [1.25];
	}
	gun_2 = !gun_2;
	wait-for-move Barrel2A along z-axis;
	wait-for-move Barrel2B along z-axis;
	delay_8 = 0;
}

QueryPrimary(piecenum)
{
	piecenum = Flare1;
	return (0);
}

QuerySecondary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = Flare2A;
		return (0);
	}
	piecenum = Flare2B;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = Flare3;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = Sleeve1;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = Turret2;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = Sleeve3;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = Base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide Flare1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode Turret1 type BITMAPONLY | BITMAP2;
		explode Flare1 type BITMAPONLY | BITMAP3;
		explode Barrel1 type BITMAPONLY | BITMAP4;
		explode Sleeve1 type BITMAPONLY | BITMAP5;
		explode Turret2 type BITMAPONLY | BITMAP2;
		explode Barrel2A type BITMAPONLY | BITMAP4;
		explode Sleeve2 type BITMAPONLY | BITMAP5;
		explode Barrel2B type BITMAPONLY | BITMAP4;
		explode Barrel3 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode Turret1 type BITMAPONLY | BITMAP2;
		explode Sleeve1 type BITMAPONLY | BITMAP4;
		explode Barrel1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode Flare1 type FALL | BITMAP3;
		explode Turret2 type BITMAPONLY | BITMAP3;
		explode Barrel2A type BITMAPONLY | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Sleeve2 type FALL | BITMAP5;
		explode Barrel2B type BITMAPONLY | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Barrel3 type BITMAPONLY | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Sleeve3 type FALL | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode Turret1 type BITMAPONLY | BITMAP2;
		explode Barrel1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode Turret2 type BITMAPONLY | BITMAP2;
		explode Barrel2A type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Barrel2B type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Turret3 type BITMAPONLY | BITMAP2;
		explode Barrel3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode Sleeve3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode Turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Barrel1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode Sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode Turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Barrel2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Barrel2B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Turret3 type BITMAPONLY | BITMAPNUKE;
	explode Barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Sleeve3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
