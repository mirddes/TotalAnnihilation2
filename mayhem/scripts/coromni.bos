#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  r1, r2, r3, r4, aa1, aa2, door1, door2, 
       lid, radar, wake1, wake2, base;

static-var  gun_1, ready_2, gun_3, busy_4, Restore_5, Reset_6, open_7;

RestoreAfterDelay()
{
	sleep 5000;
	if( !Restore_5 )
	{
		move door1 to z-axis [0] speed [3.5];
		move door2 to z-axis [0] speed [3.5];
		turn door1 to x-axis <0> speed <15>;
		turn door2 to x-axis <0> speed <15>;
		move lid to z-axis [0] speed [3.5];
		ready_2 = 0;
		set ARMORED to 1;
		signal 2;
		signal 4;
	}
	Reset_6 = 0;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( Restore_5 AND ( !Reset_6 ) )
		{
			Restore_5 = 0;
			Reset_6 = 1;
			start-script RestoreAfterDelay();
		}
	}
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	gun_1 = 0;
	ready_2 = 0;
	gun_3 = 0;
	busy_4 = 0;
	restore_5 = 0;
	reset_6 = 0;
	open_7 = 0;
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	/*if (get PLAYER_TYPE(get UNIT_TEAM(get MY_ID)) == 2)
	{
		var target,lasttarget;
		lasttarget=0;
		while (1)
		{
			if ((get CURRENT_ORDER_TYPE) == 6)
			{
				target=get CURRENT_ORDER_TARGET_ID;
				while ((get CURRENT_ORDER_TYPE) == 6)
				{
					target=get CURRENT_ORDER_TARGET_ID;
					if (target != lasttarget)
					{
						get LOCAL_SHARED_DATA(1,20 + (get UNIT_TEAM(get MY_ID)),target);
					}
					lasttarget=target;
					sleep 500;
				}
				if ((get CURRENT_ORDER_TYPE) == 41)
				{
					target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					while (!(get UNIT_XZ(target)))
					{
						sleep 500;
						target=get LOCAL_SHARED_DATA(0,20 + (get UNIT_TEAM(get MY_ID)));
					}
					get ORDER_UNIT_UNIT(6,get MY_ID,target,0);
				}
			}
			sleep 500;
		}
	}*/
}

Activate()
{
	spin radar around y-axis speed <70>;
}

Deactivate()
{
	spin radar around y-axis speed <0>;
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 4 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	if( !open_7 )
	{
		set ARMORED to 0;
		open_7 = 1;
	}
	move lid to z-axis [-2.7] speed [3.5];
	wait-for-move lid along z-axis;
	wait-for-move aa1 along y-axis;
	wait-for-move aa2 along y-axis;	
	restore_5 = 1;
	return (1);
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	if( !ready_2 )
	{
		if( !open_7 )
		{
			set ARMORED to 0;
			open_7 = 1;
		}
		move door1 to z-axis [-3.5] speed [3.5];
		move door2 to z-axis [3.5] speed [3.5];
		turn door1 to x-axis <-15> speed <15>;
		turn door2 to x-axis <15> speed <15>;
		wait-for-move door1 along z-axis;
		ready_2 = 1;
	}
	restore_5 = 1;
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 > 4 )
	{
		gun_1 = 0;
	}
}

FireSecondary()
{
	gun_3 = !gun_3;
	move aa1 to y-axis [0.6] speed [500];
	move aa2 to y-axis [0.6] speed [500];
	sleep 200;
	move aa1 to y-axis [0] speed [0.2];
	move aa2 to y-axis [0] speed [0.2];
	wait-for-move aa1 along y-axis;
	wait-for-move aa2 along y-axis;	
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = r1;
	}
	if( gun_1 == 1 )
	{
		piecenum = r2;
	}
	if( gun_1 == 2 )
	{
		piecenum = r3;
	}
	if( gun_1 >= 3 )
	{
		piecenum = r4;
	}
}

QuerySecondary(piecenum)
{
	if( !gun_3 )
	{
		piecenum = aa1;
	}
	if( gun_3 )
	{
		piecenum = aa2;
	}
}

SweetSpot(piecenum)
{
	piecenum = door1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode RADAR type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode wake1 type BITMAPONLY | BITMAP2;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode door1 type FALL | SMOKE | BITMAP2;
		explode RADAR type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode door1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode RADAR type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode door2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode RADAR type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
