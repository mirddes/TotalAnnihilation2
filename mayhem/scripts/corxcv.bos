#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, armbase1, armbase2, arm1, arm2, nano1, nano2, emit1,
       emit2, door1, door2, armtur1, armtur2;

static-var  heading_1, Building_2, busy_3, ready_4, nano_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(sleeptime)
{
	while( ( !busy_3 ) AND ( Building_2 != ready_4 ) )
	{
		busy_3 = 1;
		if( Building_2 )
		{
			turn door1 to z-axis <-89.02> speed <180>;
			turn door2 to z-axis <89.02> speed <180>;
			sleep 500;
			move armbase1 to y-axis [1.05] speed [3.15];
			move armbase1 to x-axis [3.15] speed [10.5];
			move armbase2 to y-axis [1.05] speed [3.15];
			move armbase2 to x-axis [-3.15] speed [10.5];
			sleep 300;
			turn arm1 to x-axis <110.02> speed <220>;
			turn nano1 to x-axis <-90.02> speed <180>;
			turn arm2 to x-axis <110.02> speed <220>;
			turn nano2 to x-axis <-90.02> speed <180>;
			sleep 500;
			turn armtur1 to y-axis heading_1 speed <100>;
			turn armtur2 to y-axis heading_1 speed <100>;
			wait-for-turn armtur1 around y-axis;
			wait-for-turn armtur2 around y-axis;
			sleeptime = Rand(1,500);
			sleep sleeptime;
			set INBUILDSTANCE to 1;
			ready_4 = 1;
		}
		if( !Building_2 )
		{
			ready_4 = 0;
			set INBUILDSTANCE to 0;
			turn armtur1 to y-axis <0> speed <90>;
			turn armtur2 to y-axis <0> speed <90>;
			wait-for-turn armtur1 around y-axis;
			wait-for-turn armtur2 around y-axis;
			turn nano1 to x-axis <0> speed <180>;
			turn arm1 to x-axis <0> speed <180>;
			turn nano2 to x-axis <0> speed <180>;
			turn arm2 to x-axis <0> speed <180>;
			sleep 600;
			move armbase1 to y-axis [0] speed [3.15];
			move armbase1 to x-axis [0] speed [10.5];
			move armbase2 to y-axis [0] speed [3.15];
			move armbase2 to x-axis [0] speed [10.5];
			sleep 300;
			turn door1 to z-axis <0> speed <135>;
			turn door2 to z-axis <0> speed <135>;
			sleep 750;
		}
		busy_3 = 0;
	}
}

Create()
{
	heading_1 = 0;
	Building_2 = 0;
	busy_3 = 0;
	ready_4 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

TargetHeading(Func_Var_1)
{
	heading_1 = 0 - Func_Var_1;
}

StartBuilding(Func_Var_1)
{
	heading_1 = Func_Var_1;
	Building_2 = 1;
	start-script RequestState();
	return (0);
}

StopBuilding()
{
	Building_2 = 0;
	sleep 6000;
	if( !Building_2 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	if( !nano_5 )
	{
		piecenum = emit1;
	}
	if( nano_5 )
	{
		piecenum = emit2;
	}
	nano_5 = !nano_5;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode armbase1 type BITMAPONLY | BITMAP3;
		explode armbase2 type BITMAPONLY | BITMAP3;
		explode arm1 type BITMAPONLY | BITMAP3;
		explode arm2 type BITMAPONLY | BITMAP3;
		explode nano1 type BITMAPONLY | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP4;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode armbase1 type BITMAPONLY | BITMAP3;
		explode armbase2 type BITMAPONLY | BITMAP3;
		explode arm1 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode arm2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode nano1 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode nano2 type FALL | EXPLODE_ON_HIT | BITMAP4;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode armbase1 type BITMAPONLY | BITMAP3;
		explode armbase2 type BITMAPONLY | BITMAP3;
		explode arm1 type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode arm2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode armbase1 type BITMAPONLY | BITMAP3;
	explode armbase2 type BITMAPONLY | BITMAP3;
	explode arm1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode arm2 type SHATTER | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP3;
}
