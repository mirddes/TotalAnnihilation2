#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  dish2, dish3, pivot1, pivot2, dish1, holder, arm2, arm1,
       turret, base;

static-var  On_1, busy_2, state_3, timer_4, hit_5;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from turret;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		if( timer_4 > 0 AND ( !on_1 ) )
		{
			timer_4 = timer_4 - sleeptime;
		}
		sleep sleeptime;
		if( ( timer_4 <= 0 ) AND hit_5 )
		{
			timer_4 = 0;
			hit_5 = 0;
			if( !on_1 )
			{
				set ACTIVATION to 1;
			}
		}
	}
}

RequestState()
{
	if( busy_2 )
	{
		return (0);
	}
	busy_2 = 1;
	while( On_1 != State_3 )
	{
		if( On_1 )
		{
			turn arm2 to z-axis <179> speed <90>;
			sleep 500;
			turn arm1 to z-axis <-90> speed <90>;
			set ARMORED to 0;
			sleep 1000;
			move pivot1 to y-axis [-2] speed [4];
			move dish2 to y-axis [1] speed [2];
			move pivot2 to y-axis [-2] speed [4];
			turn holder to z-axis <30> speed <60>;
			sleep 500;
			spin turret around y-axis speed <30> accelerate <5>;
			spin pivot1 around x-axis speed <108> accelerate <20>;
			spin pivot2 around x-axis speed <-128> accelerate <24>;
			state_3 = 1;
		}
		if( !On_1 )
		{
			spin turret around y-axis speed 0;
			spin pivot1 around x-axis speed 0;
			spin pivot2 around x-axis speed 0;
			turn turret to y-axis <0> speed <120>;
			turn pivot1 to x-axis <0> speed <120>;
			turn pivot2 to x-axis <0> speed <120>;			
			wait-for-turn turret around y-axis;
			wait-for-turn dish1 around y-axis;
			wait-for-turn pivot1 around x-axis;
			wait-for-turn pivot2 around x-axis;
			turn holder to z-axis <0> speed <60>;
			sleep 500;
			turn arm1 to z-axis <0> speed <120>;
			turn arm2 to z-axis <0> speed <120>;
			move pivot1 to y-axis [0] speed [4];
			move dish2 to y-axis [0] speed [2];
			move pivot2 to y-axis [0] speed [4];
			sleep 1500;
			set ARMORED to 1;
			state_3 = 0;
		}
	}
	busy_2 = 0;
}
	
			

HitByWeapon()
{
	if( get BUILD_PERCENT_LEFT )
	{
		return(0);
	}
	timer_4 = 8000;
	if( on_1 )
	{
		hit_5 = 1;
		set ACTIVATION to 0;
	}
}

/*Static-var shieldcloaked, cloakcost, cloakcostm;

Cloak(cloakdist, shieldID)
{
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			shieldcloaked = 1;
			get SET_CLOAKED(1);
		}
		//if the shield is now cloakdist the unit, the unit uses no energy to cloak
		get SET_UNITINFO(uiCloakCost, 0);
		get SET_UNITINFO(uiCloakCostMoving, 0);
		//if unit somehow moves away from the shield (eg got transported) then reset cloak costs
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_UNITINFO(uiCloakCost, cloakcost);
		get SET_UNITINFO(uiCloakCostMoving, cloakcostm);
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	/*shieldcloaked=0;
	cloakcost = get GET_UNITINFO(uiCloakCost);
	cloakcostm = get GET_UNITINFO(uiCloakCostMoving);*/
	dont-shade dish2;
	dont-shade dish3;
	dont-shade pivot1;
	dont-shade pivot2;
	dont-shade dish1;
	dont-shade holder;
	dont-shade arm2;
	dont-shade arm1;
	dont-shade turret;
	On_1 = 1;
	busy_2 = 0;
	state_3 = 0;
	timer_4 = 0;
	hit_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

Activate()
{
	On_1 = 1;
	start-script RequestState();
}

Deactivate()
{
	On_1 = 0;
	start-script RequestState();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode dish3 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode dish1 type BITMAPONLY | BITMAP3;
		explode dish2 type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode dish3 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode dish1 type BITMAPONLY | BITMAP3;
		explode dish2 type BITMAPONLY | BITMAP4;
		explode turret type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode dish3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode dish1 type BITMAPONLY | BITMAP3;
		explode dish2 type BITMAPONLY | BITMAP4;
		explode turret type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode dish3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode dish1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode dish2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
