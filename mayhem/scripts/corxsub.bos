#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  t1a, t2a, t1b, t2b, t1c, t2c, t3a, t4a,  
       t3b, t4b, t3c, t4c, torp1, torp2, torp3, torp4,
       atorp, barrel, flare, coil1, coil2, coil3, bubbles, sonar,
       bba, bbb, bbc, bbd, ba, bb, bc, bd,
       t2, t3, base;

static-var  gun_1, gun_2, moving_3, restore_4, reset_5;

RestoreAfterDelay()
{
	sleep 6000;
	if( !Restore_4 )
	{
		signal 2;
		signal 4;
		signal 16;
		turn torp1 to y-axis 0 speed <100>;
		turn torp2 to y-axis 0 speed <100>;
		turn torp3 to y-axis 0 speed <100>;
		turn torp4 to y-axis 0 speed <100>;
		turn atorp to y-axis 0 speed <80>;
	}
	reset_5 = 0;
}

Smokeunit(healthpercent, sleeptime)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			emit-sfx 259 from base;
		}
		sleeptime = healthpercent * 100;
		if( sleeptime < 400 )
		{
			sleeptime = 400;
		}
		if( restore_4 AND !reset_5 )
		{
			reset_5 = 1;
			restore_4 = 0;
			Start-script RestoreAfterDelay();
		}
		sleep sleeptime;
	}
}

uboat()
{
	while( TRUE )
	{
		emit-sfx 259 from bubbles;
		sleep 1000;
		if( !moving_3 )
		{
			sleep 3500;
		}
	}
}

Create()
{
	set ARMORED to 1;
	gun_1 = 0;
	gun_2 = 0;
	moving_3 = 0;
	restore_4 = 0;
	reset_5 = 0;
	move base to y-axis [-20] NOW;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script uboat();
	start-script Smokeunit();
	spin sonar around y-axis speed <10>;
}

StartMoving()
{
	move base to y-axis [0] NOW;
	signal 8;
	set-signal-mask 8;
	spin bba around z-axis speed <200> accelerate <10>;
	spin bbb around z-axis speed <200> accelerate <10>;
	spin bbc around z-axis speed <200> accelerate <10>;
	spin bbd around z-axis speed <200> accelerate <10>;
	moving_3 = 1;
	while( moving_3 )
	{
		emit-sfx 259 from ba;
		emit-sfx 259 from bb;
		emit-sfx 259 from bc;
		emit-sfx 259 from bd;
		sleep 300;
	}
}

StopMoving()
{
	signal 8;
	moving_3 = 0;
	spin bba around z-axis speed <0>;
	spin bbb around z-axis speed <0>;
	spin bbc around z-axis speed <0>;
	spin bbd around z-axis speed <0>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn atorp to y-axis heading speed <120>;
	wait-for-turn torp1 around y-axis;
	Restore_4 = 1;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn torp1 to y-axis heading speed <180>;
	turn torp2 to y-axis heading speed <180>;
	wait-for-turn torp1 around y-axis;
	wait-for-turn torp2 around y-axis;
	Restore_4 = 1;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	turn torp3 to y-axis heading speed <180>;
	turn torp4 to y-axis heading speed <180>;
	wait-for-turn torp3 around y-axis;
	wait-for-turn torp4 around y-axis;
	Restore_4 = 1;
	return (1);
}

FireSecondary()
{
	if( !gun_1 )
	{
		emit-sfx 256 | 3 from t1a;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 256 | 3 from t2a;
	}
	if( gun_1 == 2 )
	{
		emit-sfx 256 | 3 from t1b;
	}
	if( gun_1 == 3 )
	{
		emit-sfx 256 | 3 from t2b;
	}
	if( gun_1 == 4 )
	{
		emit-sfx 256 | 3 from t1c;
	}
	++gun_1;
	if( gun_1 > 5 )
	{
		gun_1 = 0;
		emit-sfx 256 | 3 from t2c;
	}
}

FireTertiary()
{
	if( !gun_2 )
	{
		emit-sfx 256 | 3 from t3a;
	}
	if( gun_2 == 1 )
	{
		emit-sfx 256 | 3 from t4a;
	}
	if( gun_2 == 2 )
	{
		emit-sfx 256 | 3 from t3b;
	}
	if( gun_2 == 3 )
	{
		emit-sfx 256 | 3 from t4b;
	}
	if( gun_2 == 4 )
	{
		emit-sfx 256 | 3 from t3c;
	}
	++gun_2;
	if( gun_2 > 5 )
	{
		gun_2 = 0;
		emit-sfx 256 | 3 from t4c;
	}
}

FirePrimary()
{
	emit-sfx 256 | 3 from flare;
	move barrel to z-axis [0] now;
	move barrel to z-axis [-2.6] speed [50];
	move coil1 to z-axis [0] now;
	move coil1 to z-axis [-0.75] speed [12];
	move coil2 to z-axis [0] now;
	move coil2 to z-axis [-1.5] speed [25];
	move coil3 to z-axis [0] now;
	move coil3 to z-axis [-2.2] speed [40];
	sleep 55;
	emit-sfx 256 | 3 from bubbles;
	move barrel to z-axis [0] speed [3.8];
	move coil1 to z-axis [0] speed [1.1];
	move coil2 to z-axis [0] speed [2.15];
	move coil3 to z-axis [0] speed [3.16];
	sleep 705;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = t3;
}

AimFromSecondary(piecenum)
{
	piecenum = t2;
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
}

QuerySecondary(piecenum)
{
	piecenum = gun_1;
}

QueryTertiary(piecenum)
{
	if( !gun_2 )
	{
		piecenum = t3a;
	}
	if( gun_2 == 1 )
	{
		piecenum = t4a;
	}
	if( gun_2 == 2 )
	{
		piecenum = t3b;
	}
	if( gun_2 == 3 )
	{
		piecenum = t4b;
	}
	if( gun_2 == 4 )
	{
		piecenum = t3c;
	}
	if( gun_2 >= 5 )
	{
		piecenum = t4c;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode bbc type BITMAPONLY | BITMAP2;
		explode bbd type BITMAPONLY | BITMAP3;
		explode bba type BITMAPONLY | BITMAP4;
		explode bbb type BITMAPONLY | BITMAP5;
		explode coil1 type BITMAPONLY | BITMAP5;
		explode coil2 type BITMAPONLY | BITMAP5;
		explode coil3 type BITMAPONLY | BITMAP5;
		explode torp1 type BITMAPONLY | BITMAP1;
		explode torp2 type BITMAPONLY | BITMAP2;
		explode torp3 type BITMAPONLY | BITMAP2;
		explode torp4 type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode bbc type SHATTER | BITMAP2;
		explode bbd type BITMAPONLY | BITMAP3;
		explode bba type FALL | BITMAP4;
		explode bbb type FALL | BITMAP5;
		explode coil1 type BITMAPONLY | BITMAP5;
		explode coil2 type BITMAPONLY | BITMAP5;
		explode coil3 type BITMAPONLY | BITMAP5;
		explode torp1 type FALL | BITMAP1;
		explode torp2 type BITMAPONLY | BITMAP2;
		explode torp3 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode torp4 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode bbc type SHATTER | BITMAP2;
		explode bbd type BITMAPONLY | BITMAP3;
		explode bba type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode bbb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode coil1 type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode coil2 type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode coil3 type FALL | EXPLODE_ON_HIT | BITMAP5;
		explode torp1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode torp2 type BITMAPONLY | BITMAP2;
		explode torp3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode torp4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode bbc type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode bbd type BITMAPONLY | BITMAP3;
	explode bba type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode bbb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode coil1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode coil2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode coil3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode torp1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode torp2 type BITMAPONLY | BITMAP2;
	explode torp3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode torp4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
}
