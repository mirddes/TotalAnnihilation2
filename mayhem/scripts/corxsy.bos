#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam1, beam2, beam3, beam4, gun1, gun2, gun3, gun4,
       lights, body, nano, base;

static-var  Nano_1, ReqState_3, On_4, Busy_5;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = ( get HEALTH );
		if( healthpercent < 66 )
		{
			smoketype = ( 256 | 2 );
			if( Rand(1,66) < healthpercent )
			{
				smoketype = ( 256 | 1 );
			}
			emit-sfx smoketype from base;
		}
		sleeptime = ( healthpercent * 50 );
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RequestState()
{
	while( !Busy_5 AND ( ReqState_3 != On_4 ) )
	{
		Busy_5 = 1;
		if( ReqState_3 )
		{
			dont-cache beam1;
			dont-cache beam2;
			dont-cache beam3;
			dont-cache beam4;
			dont-cache gun1;
			dont-cache gun2;
			dont-cache gun3;
			dont-cache gun4;
			turn gun1 to z-axis <0> now;
			turn gun1 to z-axis <-89.75> speed <60.07>;
			sleep 200;
			turn gun2 to z-axis <0> now;
			turn gun2 to z-axis <-89.75> speed <60.07>;
			sleep 400;
			turn gun3 to z-axis <0> now;
			turn gun3 to z-axis <89.75> speed <60.07>;
			sleep 200;
			turn gun4 to z-axis <0> now;
			turn gun4 to z-axis <89.75> speed <60.07>;
			sleep 702;
			set YARD_OPEN to 1;
			while( !( get YARD_OPEN ) )
			{
				sleep 1500;
				set YARD_OPEN to 1;
			}
			set INBUILDSTANCE to 1;
			On_4 = 1;
		}
		if( !ReqState_3 )
		{
			On_4 = 0;
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				sleep 1500;
				set YARD_OPEN to 0;
			}
			turn gun1 to z-axis <-89.75> now;
			turn gun1 to z-axis <0> speed <60.36>;
			turn gun2 to z-axis <-89.75> now;
			turn gun2 to z-axis <0> speed <60.36>;
			turn gun3 to z-axis <89.75> now;
			turn gun3 to z-axis <0> speed <60.36>;
			turn gun4 to z-axis <89.75> now;
			turn gun4 to z-axis <0> speed <60.36>;
			sleep 1498;
			cache beam1;
			cache beam2;
			cache beam3;
			cache beam4;
			cache gun1;
			cache gun2;
			cache gun3;
			cache gun4;
		}
		Busy_5 = 0;
	}
	return (0);
}

/*Cloak(cloakdist, shieldID)
{
	//if the shield is cloaked and this unit hasn't run this bit yet, then go
	if( cloakdist )
	{
		if ((get GET_CLOAKED) == 0)
		{
			get SET_CLOAKED(1);
		}
		while( (get DISTANCE (get MY_ID, shieldID)) <= cloakdist AND get GET_CLOAKED(shieldID) )
		{
			sleep 133;
		}
		get SET_CLOAKED(0);
	}
}*/

Create()
{
	dont-shade lights;
	dont-cache lights;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade beam3;
	dont-shade beam4;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade gun3;
	dont-shade gun4;
	dont-shade body;
	Nano_1 = 0;
	ReqState_3 = 0;
	On_4 = 0;
	Busy_5 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( !Nano_1 )
	{
		piecenum = beam1;
	}
	if( Nano_1 == 1 )
	{
		piecenum = beam2;
	}
	if( Nano_1 == 2 )
	{
		piecenum = beam3;
	}
	++Nano_1;
	if( Nano_1 > 3 )
	{
		piecenum = beam4;
		Nano_1 = 0;
	}
	return (0);
}

Activate()
{
	set BUGGER_OFF to 1;
	ReqState_3 = 1;
	call-script RequestState();
	set BUGGER_OFF to 0;
	return (0);
}

Deactivate()
{
	set BUGGER_OFF to 1;
	ReqState_3 = 0;
	sleep 10000;
	if( !ReqState_3 )
	{
		call-script RequestState();
	}
	set BUGGER_OFF to 0;
	return (0);
}


QueryBuildInfo(piecenum)
{
	piecenum = base;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = lights;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode beam3 type BITMAPONLY | BITMAP2;
		explode beam4 type BITMAPONLY | BITMAP3;
		explode lights type BITMAPONLY | BITMAP4;
		explode gun1 type BITMAPONLY | BITMAP5;
		explode gun2 type BITMAPONLY | BITMAP1;
		explode gun3 type BITMAPONLY | BITMAP5;
		explode gun4 type BITMAPONLY | BITMAP1;
		explode nano type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type SHATTER | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode beam3 type BITMAPONLY | BITMAP2;
		explode beam4 type BITMAPONLY | BITMAP3;
		explode lights type SHATTER | BITMAP4;
		explode gun1 type FALL | BITMAP5;
		explode gun2 type FALL | BITMAP1;
		explode gun3 type FALL | BITMAP5;
		explode gun4 type FALL | BITMAP1;
		explode nano type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode body type SHATTER | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beam3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lights type SHATTER | BITMAP4;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lights type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}