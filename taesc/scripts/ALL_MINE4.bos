#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"


piece  base, arm_mine_land, beacon, core_mine_land, post, sphere;

static-var  myteam, my_id, Static_Var_1, statechg_DesiredState, statechg_StateChanging;

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

go()
{
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
	}
	spin beacon around y-axis speed <-100.060440>;
	move post to y-axis [3.000000] speed [5.000000];
	spin sphere around y-axis speed <100.060440>;
}

stop()
{
	stop-spin beacon around y-axis;
	stop-spin sphere around y-axis;
	move post to y-axis [0.000000] speed [15.000000];
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


Create()
{
	dont-shade arm_mine_land;
	dont-cache arm_mine_land;
	
	dont-shade core_mine_land;
	dont-cache core_mine_land;
	
	dont-shade beacon;
	dont-cache beacon;
	dont-shade post;
	dont-cache post;
	dont-shade sphere;
	dont-cache sphere;
	
	hide core_mine_land;
	hide post;
	hide sphere;
	
	
//	set ARMORED to 0;
	
	var unit_ID, max, min, minid, maxid;
	var distance, xz, x, z;
	min = get MIN_ID;
	max = get MAX_ID;
	
	my_id=get MY_ID;
	myteam=get UNIT_TEAM(get MY_ID);
	
	for (unit_ID = min; unit_ID <= max; ++unit_ID)
	{
		if((get UNIT_TEAM(unit_id))==myteam)
		{
//			if (get UNIT_HEIGHT(unit_ID) == CORMLV)
			if (get UNIT_HEIGHT(unit_ID) == CORMLV || get UNIT_HEIGHT(unit_ID) == CORMLA)
			{
				if(get UNIT_BUILD_PERCENT_LEFT(unit_ID) == 0)
				{
					xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
					SECURE_XZ;
					distance=get XZ_HYPOT(xz);
					
					if (distance <= BOOST_RADIUS)
					{
						hide arm_mine_land;
						hide beacon;
						show core_mine_land;
						show post;
						show sphere;
					}
				}
			}
		}
	}
	call-script InitState();
	start-script SmokeUnit();
	Static_Var_1 = 0;	
}

Activate()
{
	start-script RequestState(0);
	
}

Deactivate()
{
	start-script RequestState(1);
}
