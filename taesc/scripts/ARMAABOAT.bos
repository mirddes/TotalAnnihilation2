#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare2a, flare2b, base, body, wake1, wake2,
	   turret1, sleeves1, turret2, sleeves2, depth;  
       
static-var  gun_1, restore_delay, firing, firedelay;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_MOVE			32



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	set ACTIVATION to 100;
	
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	
	firedelay = 2000;
	firing = 0;
	gun_1 = 0;

	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep 10000;
	turn turret1 to y-axis <0.000000> speed <180.005495>;
	turn sleeves1 to x-axis <0.000000> speed <180.005495>;
	turn turret2 to y-axis <0.000000> speed <180.005495>;
	turn sleeves2 to x-axis <0.000000> speed <180.005495>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}


AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	
	if( gun_1 < 2 )
	{
		turn turret1 to y-axis heading speed <360.021978>;
		turn sleeves1 to x-axis <0.000000> - pitch speed <360.016484>;
	}
	if( gun_1 >= 2 )
	{
		turn turret2 to y-axis heading speed <360.021978>;
		turn sleeves2 to x-axis <0.000000> - pitch speed <360.016484>;
	}
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeves1 around x-axis;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeves2 around x-axis;
	while (firing)
	{
		sleep 50;
	}	
	start-script RestoreAfterDelay();
	return (1);
}


FireTertiary()
{
	if( gun_1 == 0 )
	{
		firing = 1;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 1 )
	{
		firing = 1;
		sleep firedelay;
		firing = 0;
	}	
	if( gun_1 == 2 )
	{
		firing = 1;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 3 )
	{
		firing = 1;
		sleep firedelay;
		firing = 0;
	}	
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 0;
	}
}

AimFromTertiary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = turret1;
	}
	if( gun_1 == 1 )
	{
		piecenum = turret1;
	}
	if( gun_1 == 2 )
	{
		piecenum = turret2;
	}
	if( gun_1 == 3 )
	{
		piecenum = turret2;
	}
}

QueryTertiary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1b;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2a;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare2b;
	}
}

AimPrimary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	sleep 150;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = depth;
}



SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode sleeves1 type BITMAPONLY | BITMAP5;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode sleeves1 type SHATTER | BITMAP5;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode turret1 type BITMAPONLY | BITMAP1;
	explode sleeves1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
