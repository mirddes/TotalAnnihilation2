#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Flare1, Flare2, Flare3, base, Box, wake1, wake2, wake3,
       wake4, wake5, wake6, wake7, wake8, Bottom, body;

static-var  Static_Var_1, gun_3, Static_Var_3, restore_delay, statechg_DesiredState,
            statechg_StateChanging;
static-var  firedelay, firing;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_MOVE			4


activatescr()
{
	if( TRUE )
	{
		move Box to y-axis [0.000000] now;
		move Box to y-axis [1.950000] speed [14.000000];
		move Box to z-axis [0.000000] now;
		move Box to z-axis [-0.600000] speed [4.000000];
		turn body to x-axis <0.000000> now;
		turn body to x-axis <-2.000000> speed <15.000000>;
		turn Box to x-axis <0.000000> now;
		turn Box to x-axis <23.005495> speed <174.000000>;
		sleep 135;
	}
	if( TRUE )
	{
		move Box to y-axis [2.900000] speed [6.000000];
		turn body to x-axis <0.000000> speed <15.000000>;
		turn Box to x-axis <0.000000> speed <172.000000>;
		sleep 137;
	}
	if( TRUE )
	{
		move Box to y-axis [3.350000] speed [3.000000];
		move Box to z-axis [2.239996] speed [20.000000];
		sleep 137;
	}
	sleep 7;
}

deactivatescr()
{
	if( TRUE )
	{
		move Box to y-axis [3.350000] now;
		move Box to y-axis [2.900000] speed [3.000000];
		move Box to z-axis [2.239996] now;
		move Box to z-axis [-0.600000] speed [18.000000];
		turn Box to x-axis <0.000000> now;
		sleep 150;
	}
	if( TRUE )
	{
		move Box to y-axis [1.950000] speed [6.000000];
		turn base to x-axis <-2.000000> speed <13.000000>;
		turn Box to x-axis <23.005495> speed <157.000000>;
		sleep 150;
	}
	if( TRUE )
	{
		move Box to y-axis [0.000000] speed [12.000000];
		move Box to z-axis [0.000000] speed [3.000000];
		turn base to x-axis <0.000000> speed <13.000000>;
		turn Box to x-axis <0.000000> speed <156.000000>;
		sleep 151;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}
*/

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_3 == 1 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		if( Static_Var_3 == 2 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
	
	if( Static_Var_3 == 2 || Static_Var_3 == 1 )
	{
		dont-cache Flare1;
		dont-cache Flare2;
		dont-cache Flare3;
		dont-cache body;
		dont-cache Box;
		dont-cache Bottom;

	}
	if( Static_Var_3 != 2 && Static_Var_3 != 1 )
	{
		cache Flare1;
		cache Flare2;
		cache Flare3;
		cache body;
		cache Box;
		cache Bottom;

	}
}

Create()
{
	firedelay = 2000;
	firing = 0;
	
	Static_Var_1 = 0;
	restore_delay = 3000;
	gun_3 = Flare2;
	call-script InitState();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn Box to y-axis <0.000000> speed <250.000000>;
	start-script RequestState(1);
	wait-for-turn Box around y-axis;
}

AimTertiary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !Static_Var_1 )
	{
		sleep 200;
	}
	turn Box to y-axis heading speed <250.000000>;
	wait-for-turn Box around y-axis;
	while( firing )
	{
		sleep 50;

	}
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	firing = 1;
	++gun_3;
	sleep firedelay;
	firing = 0;
	if( gun_3 == 4 )
	{
		gun_3 = Flare2;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = Box;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = Flare1;
	}
	if( gun_3 == 2 )
	{
		piecenum = Flare2;
	}
	if( gun_3 == 3 )
	{
		piecenum = Flare3;
	}
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	if( Static_Var_3 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode body type BITMAPONLY | BITMAP1;
			explode Box type SHATTER | BITMAP5;
			explode Flare1 type FALL | BITMAP1;
			explode Flare2 type FALL | BITMAP5;
			explode Flare3 type FALL | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP5;
		explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( Static_Var_3 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode body type BITMAPONLY | BITMAP1;
			explode Box type SHATTER | BITMAP5;
			explode Flare1 type FALL | BITMAP1;
			explode Flare2 type FALL | BITMAP5;
			explode Flare3 type FALL | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP5;
		explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode body type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP5;
		explode Flare1 type FALL | BITMAP1;
		explode Flare2 type FALL | BITMAP5;
		explode Flare3 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP5;
		explode Flare1 type FALL | BITMAP1;
		explode Flare2 type FALL | BITMAP5;
		explode Flare3 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode Box type SHATTER | BITMAP5;
		explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode Box type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode Flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
