#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  fp1, fp2, fp3, fp4, base, body, door1, door2, door3, door4, pod1, pod2, pod3, pod4, cover;

static-var  open, restore_delay, statechg_DesiredState, statechg_StateChanging ;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 
static-var 	firedelay, firing, firing_2, salvo;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;	
				}
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;	
				}
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	




activatescr()
{
	if( TRUE )
	{
		move door1 to y-axis [0.000000] now;
		move door1 to y-axis [-5] speed [8.000000];
		move door2 to y-axis [0.000000] now;
		move door2 to y-axis [-5] speed [8.000000];
		move door3 to y-axis [0.000000] now;
		move door3 to y-axis [-5] speed [8.000000];
		move door4 to y-axis [0.000000] now;
		move door4 to y-axis [-5] speed [8.000000];
		turn door1 to x-axis <90.401099> now;
		turn door1 to x-axis <0.000000> speed <227.054945>;
		turn door2 to z-axis <-90.401099> now;
		turn door2 to z-axis <0.000000> speed <227.054945>;
		turn door3 to x-axis <-90.401099> now;
		turn door3 to x-axis <0.000000> speed <227.054945>;
		turn door4 to z-axis <90.401099> now;
		turn door4 to z-axis <0.000000> speed <227.054945>;
		sleep 398;
	}
	if( TRUE )
	{
		move door1 to y-axis [-5] speed [0.000000];
		move door2 to y-axis [-5] speed [0.000000];
		move door3 to y-axis [-5] speed [0.000000];
		move door4 to y-axis [-5] speed [0.000000];
		sleep 539;
	}
	if( TRUE )
	{
		move pod1 to y-axis [0] speed [5.000000];
		move pod2 to y-axis [0] speed [5.000000];
		move pod3 to y-axis [0] speed [5.000000];
		move pod4 to y-axis [0] speed [5.000000];
		sleep 539;
	}
	sleep 25;
}

deactivatescr()
{
	if( TRUE )
	{
		move pod1 to y-axis [-3] speed [5.000000];
		move pod2 to y-axis [-3] speed [5.000000];
		move pod3 to y-axis [-3] speed [5.000000];
		move pod4 to y-axis [-3] speed [5.000000];
		sleep 539;
	}
	if( TRUE )
	{
		move door1 to y-axis [-5] now;
		move door1 to y-axis [-5] speed [0.000000];
		move door2 to y-axis [-5] now;
		move door2 to y-axis [-5] speed [0.000000];
		move door3 to y-axis [-5] now;
		move door3 to y-axis [-5] speed [0.000000];
		move door4 to y-axis [-5] now;
		move door4 to y-axis [-5] speed [0.000000];
		sleep 320;
	}
	
	if( TRUE )
	{
		move door1 to y-axis [0.000000] speed [6.000000];
		move door2 to y-axis [0.000000] speed [6.000000];
		move door3 to y-axis [0.000000] speed [6.000000];
		move door4 to y-axis [0.000000] speed [6.000000];
		sleep 509;
	}
	if( TRUE )
	{
		turn door1 to x-axis <90.038462> speed <225.049451>;
		turn door2 to z-axis <-90.038462> speed <225.049451>;
		turn door3 to x-axis <-90.038462> speed <225.049451>;
		turn door4 to z-axis <90.038462> speed <225.049451>;
		sleep 400;
	}
	sleep 17;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	
	dont-cache pod1;
	dont-cache pod2;
	dont-cache pod3;
	dont-cache pod4;
	
	if( !open )
	{
		call-script activatescr();
	}
	open = 1;
	set ARMORED to 0;
	if(( shield_on || dome_on))
	{
		set ARMORED to 1;
	}
}

Stop()
{
	stop-spin pod1 around y-axis;
	stop-spin pod2 around y-axis;
	stop-spin pod3 around y-axis;
	stop-spin pod4 around y-axis;
	open = 0;
	call-script deactivatescr();
	set ARMORED to 1;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	
	cache pod1;
	cache pod2;
	cache pod3;
	cache pod4;
	
	
	
	
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	firedelay = 0;
	firing = 0;
	salvo = 0;
	
	dont-cache cover;
	hide cover;
	
	dont-shade base;
	dont-shade body;

	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;

	dont-shade pod1;
	dont-shade pod2;
	dont-shade pod3;
	dont-shade pod4;

	open = 1;
	restore_delay = 3000;
	call-script InitState();
	start-script RequestState(0);

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
	sleep 50;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	show cover;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}



AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !open )
	{
		sleep 250;
	}
//	while( firing )
//	{
//		sleep 100;
//	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	spin pod1 around y-axis speed <720>;
	spin pod2 around y-axis speed <720>;
	spin pod3 around y-axis speed <720>;
	spin pod4 around y-axis speed <720>;
	
	if( salvo == 0 )
	{
		firing = 1;
//		show fp1;
//		sleep firedelay;
//		hide fp1;
		firing = 0;
	}
	if( salvo == 1 )
	{
		firing = 1;
		
//		show fp2;
//		sleep firedelay;
//		hide fp2;
		firing = 0;
	}
	if( salvo == 2 )
	{
		firing = 1;
//		show fp3;
//		sleep firedelay;
//		hide fp3;
		firing = 0;
	}
	if( salvo == 3 )
	{
		firing = 1;
//		show fp4;
//		sleep firedelay;
//		hide fp4;
		firing = 0;
	}
	++salvo;
	if( salvo == 4 )
	{
		salvo = 0;
	
	}
}

AimFromPrimary(piecenum)
{
	piecenum = salvo;
}

QueryPrimary(piecenum)
{
	piecenum = salvo;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide fp1;
	hide fp2;
	hide fp3;
	hide fp4;
	if( severity <= 25 )
	{
		if( open )
		{
			corpsetype = 1;
		}
		if( !open )
		{
			corpsetype = 2;
		}
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode door3 type BITMAPONLY | BITMAP1;
		explode door4 type BITMAPONLY | BITMAP1;
		explode pod1 type BITMAPONLY | BITMAP1;
		explode pod2 type BITMAPONLY | BITMAP1;
		explode pod3 type BITMAPONLY | BITMAP5;
		explode pod4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		if( open )
		{
			corpsetype = 2;
		}
		if( !open )
		{
			corpsetype = 3;
		}
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type FALL | BITMAP1;
		explode door2 type FALL | BITMAP1;
		explode door3 type FALL | BITMAP1;
		explode door4 type FALL | BITMAP1;
		explode pod1 type FALL | BITMAP1;
		explode pod2 type BITMAPONLY | BITMAP1;
		explode pod3 type BITMAPONLY | BITMAP5;
		explode pod4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		if( open )
		{
			corpsetype = 3;
		}
		if( !open )
		{
			corpsetype = 4;
		}
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pod1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pod2 type BITMAPONLY | BITMAP1;
		explode pod3 type BITMAPONLY | BITMAP5;
		explode pod4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 4;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pod1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pod2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pod3 type BITMAPONLY | BITMAP5;
	explode pod4 type BITMAPONLY | BITMAP1;
}
