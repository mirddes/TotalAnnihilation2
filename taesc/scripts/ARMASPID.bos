#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, glow, dome, rupleg1, rupleg2, rupleg3, lupleg1, lupleg2, lupleg3,
	   rfoot1, rfoot2, rfoot3, lfoot1, lfoot2, lfoot3, firepoint;

static-var  statechg_DesiredState, statechg_StateChanging, moving, firing, turning, swimming, firedelay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4
walk()
{
	if( moving )
//	if(( moving || turning ))
	{
		TURN rupleg1 to y-axis <0> SPEED <50>;
		TURN rupleg1 to z-axis <0> SPEED <50>;
		TURN rupleg2 to z-axis <15> SPEED <50>;
		TURN rupleg3 to y-axis <16.5> SPEED <50>;
		TURN rupleg3 to z-axis <0> SPEED <50>;
		TURN lupleg1 to y-axis <-19.5> SPEED <50>;
		TURN lupleg1 to z-axis <0> SPEED <50>;
		TURN lupleg2 to y-axis <0> SPEED <50>;
		TURN lupleg2 to z-axis <0> SPEED <50>;
		TURN lupleg3 to y-axis <-14.5> SPEED <50>;
		TURN lupleg3 to z-axis <-22.5> SPEED <50>;
		SLEEP 120;
	}
	if( moving )
//	if(( moving || turning ))
	{
		TURN rupleg2 to y-axis <16.5> SPEED <50>;
		TURN rupleg2 to z-axis <15> SPEED <50>;
		TURN lupleg1 to y-axis <0> SPEED <50>;
		TURN lupleg2 to z-axis <-15> SPEED <50>;
		TURN lupleg3 to z-axis <1> SPEED <50>;
		TURN rupleg1 to z-axis <15> SPEED <50>;
		TURN rupleg3 to y-axis <0> SPEED <50>;
		TURN rupleg3 to z-axis <0> SPEED <50>;
		SLEEP 120;
	}
	if( moving )
//	if(( moving || turning ))
	{
		TURN lupleg2 to y-axis <-15> SPEED <50>;
		TURN lupleg2 to z-axis <-15> SPEED <50>;
		TURN lupleg3 to y-axis <1.5> SPEED <50>;
		TURN rupleg2 to y-axis <16.5> SPEED <50>;
		TURN rupleg2 to z-axis <0> SPEED <50>;
		TURN rupleg3 to z-axis <15> SPEED <50>;
		TURN rupleg1 to y-axis <27> SPEED <50>;
		TURN rupleg1 to z-axis <15> SPEED <50>;
		TURN lupleg1 to y-axis <0> SPEED <50>;
		TURN lupleg1 to z-axis <-15> SPEED <50>;
		SLEEP 120;
	}
	if( moving )
//	if(( moving || turning ))
	{
		TURN lupleg2 to y-axis <-18> SPEED <50>;
		TURN lupleg2 to z-axis <0> SPEED <50>;
		TURN lupleg3 to y-axis <0> SPEED <50>;
		TURN lupleg3 to z-axis <-22.5> SPEED <50>;
		TURN rupleg2 to y-axis <0> SPEED <50>;
		TURN rupleg2 to z-axis <0> SPEED <50>;
		TURN rupleg3 to y-axis <16.5> SPEED <50>;
		TURN rupleg1 to y-axis <21> SPEED <50>;
		TURN rupleg1 to z-axis <0> SPEED <50>;
		TURN rupleg3 to z-axis <15> SPEED <50>;
		TURN lupleg1 to y-axis <-19.5> SPEED <50>;
		TURN lupleg1 to z-axis <-15> SPEED <50>;
		SLEEP 120;
	}
}

activatescr()
{
	if( TRUE )
	{
		sleep 770;
	}
	sleep 20;
}

deactivatescr()
{
	if( TRUE )
	{
		sleep 570;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MotionControl(Func_Var_1)
{
//	var preang;
//	var ang;
	while( TRUE )
	{
//		ang = get XZ_ATAN(-419);
//		turning = 0;
//		if (ang != preang)
//		{
//			turning = 1;
//		}
//		sleep 100;
//		preang = ang;
		
		Func_Var_1 = moving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}
/*
EmitSFX()
{
	while( TRUE )
	{
		if( swimming == 3 )
		{
			set ARMORED to 1;
			if( bMoving )
			{
				emit-sfx 259 from wake1;
				emit-sfx 259 from wake2;
				emit-sfx 259 from wake3;
			}
		}
		if( swiming != 3 )
		{
			set ARMORED to 0;
		}	
		sleep 250;
	}
}
*/

Create()
{
	set ARMORED to TRUE;
	
	moving = 0;
	firing = 0;
	turning = 0;
	swimming = 4;
	firedelay = 1000;
	
	
//	set ACTIVATION to FALSE;
//	call-script InitState();
		
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 1000;
	}
	start-script MotionControl();
	start-script SmokeUnit();
//	start-script EmitSFX();
//	set ACTIVATION to TRUE;
	
}

setSFXoccupy(Func_Var_1)
{
	swimming = Func_Var_1;
}

Activate()
{
//	signal SIG_ACTIVATE;
//	set-signal-mask SIG_ACTIVATE;
	
	cache glow;
	
	if (!firing)
	{
		dont-cache glow;
	}	
}

Deactivate()
{
//	signal SIG_ACTIVATE;
//	set-signal-mask SIG_ACTIVATE;
	cache glow;
}

StartMoving()
{
//	signal SIG_MOVE;
//	set-signal-mask SIG_MOVE;
	moving=1;

}


StopMoving()
{
//	signal SIG_MOVE;
	moving=0;
}

AimPrimary()
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
//	while (firing)
	while(!get ACTIVATION OR firing) 
	{
		sleep 50;
	}	
	return(1);
}

FirePrimary()
{
	firing = 1;
	
	cache glow;
	
	explode firepoint type BITMAPONLY | BITMAP5;
	
	sleep firedelay;
	
	firing = 0;
	
	if (get ACTIVATION)
	{
		dont-cache glow;
	}	
	
}

QueryPrimary(p)
{
	p = firepoint;
}

AimFromPrimary(p)
{
	p = base;
}

AimSecondary()
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
//	while (firing)
//	while(!get ACTIVATION OR firing) 
	while(!get ACTIVATION) 
	{
		sleep 50;
	}	
	return(1);
}

FireSecondary()
{
//	firing = 1;
	
//	cache glow;
	
//	explode firepoint type BITMAPONLY | BITMAP5;
	
//	sleep firedelay;
	
	firing = 0;
	
	if (get ACTIVATION)
	{
		dont-cache glow;
	}	
	
}

QuerySecondary(p)
{
	p = firepoint;
}

AimFromSecondary(p)
{
	p = base;
}

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode body type BITMAPONLY | BITMAP1;
		explode lupleg1 type BITMAPONLY | BITMAP1;
		explode lupleg2 type BITMAPONLY | BITMAP5;
		explode lupleg3 type BITMAPONLY | BITMAP1;
		explode rupleg1 type BITMAPONLY | BITMAP1;
		explode rupleg2 type BITMAPONLY | BITMAP1;
		explode rupleg3 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode lupleg1 type FALL | BITMAP1;
		explode lupleg2 type FALL | BITMAP5;
		explode lupleg3 type FALL | BITMAP1;
		explode rupleg1 type FALL | BITMAP1;
		explode rupleg2 type FALL | BITMAP1;
		explode rupleg3 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
}
