#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare2a, flare2b, flare3, base, body,
	   turret1, sleeve1, bit1a, bit1b, turret2, sleeve2, bit2a, bit2b,
	   support, turret3, sleeve3, fusionbits, wake1, wake2;  
       
static-var  gun_1, gun_2, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_R				16
#define SIG_MOVE			32

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	set ARMORED to TRUE;
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	hide flare3;	
	

	dont-cache flare1a;
	dont-cache flare1b;
	dont-cache flare2a;
	dont-cache flare2b;
	dont-cache flare3;
	
	gun_1 = 0;
	gun_2 = 2;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	
	signal SIG_R;
	set-signal-mask SIG_R;

	sleep 15000;

	turn turret1 to y-axis <0.000000> speed <125.005495>;
	turn sleeve1 to x-axis <0.000000> speed <125.005495>;

	turn turret2 to y-axis <0.000000> speed <125.005495>;
	turn sleeve2 to x-axis <0.000000> speed <125.005495>;

	turn turret3 to y-axis <0.000000> speed <60>;
	turn sleeve3 to x-axis <0.000000> speed <60>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret1 to y-axis heading speed <125.021978>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <125.016484>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return 1;
}


AimSecondary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn turret2 to y-axis heading speed <125.021978>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <125.016484>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
//	var gun_1_tmp;
//	gun_1_tmp = gun_1;

	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
	
	if( gun_1 == 0 )
	{
//		show flare1a;
		sleep 150;
//		hide flare1a;
	}
	if( gun_1 == 1 )
	{
//		show flare1b;
		sleep 150;
//		hide flare1b;
	}	
	
}


FireSecondary()
{
//	var gun_2_tmp;
//	gun_2_tmp = gun_2;

	++gun_2;
	if( gun_2 == 4 )
	{
		gun_2 = 2;
	}
	
	if( gun_2 == 2 )
	{
//		show flare2a;
		sleep 150;
//		hide flare2a;
	}
	if( gun_2 == 3 )
	{
//		show flare2b;
		sleep 150;
//		hide flare2b;
	}	
	
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1b;
	}
}



QuerySecondary(piecenum)
{
	if( gun_2 == 2 )
	{
		piecenum = flare2a;
	}
	if( gun_2 == 3 )
	{
		piecenum = flare2b;
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <80.016484>;
	wait-for-turn turret3 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	move sleeve3 to z-axis [-5.000000] speed [200.000000];
//	emit-sfx 256 | 3 from flare;
	sleep 250;
	move sleeve3 to z-axis [0.000000] speed [3.000000];
}

AimFromTertiary(piecenum)
{
	piecenum = turret3;
}

QueryTertiary(piecenum)
{
	piecenum = flare3;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
//		explode flare1a type BITMAPONLY | BITMAP1;
//		explode flare1b type BITMAPONLY | BITMAP1;
//		explode flare1c type BITMAPONLY | BITMAP5;
//		explode flare2a type BITMAPONLY | BITMAP1;
//		explode flare2b type BITMAPONLY | BITMAP1;
//		explode flare2c type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP5;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
//		explode flare1a type FALL | EXPLODE_ON_HIT | BITMAP1;
//		explode flare1b type FALL | EXPLODE_ON_HIT | BITMAP1;
//		explode flare1c type FALL | EXPLODE_ON_HIT | BITMAP5;
//		explode flare2a type FALL | EXPLODE_ON_HIT | BITMAP1;
//		explode flare2b type FALL | EXPLODE_ON_HIT | BITMAP1;
//		explode flare2c type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type SHATTER | BITMAP5;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
//	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flare1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flare1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
//	explode flare2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flare2c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret1 type BITMAPONLY | BITMAP1;
	explode turret2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
