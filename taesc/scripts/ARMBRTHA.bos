#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, flare, turret, barrel, sleeve, body, turret2, neck, spindle, housing01, barrel01, long01,
	 housing02, barrel02, long02, housing03, barrel03, long03, barrel04, housing04, long04, flare2, 
	 cover, hole, this, plat, plat2, darkness, tip01, tip02, tip03, tip04, t_shaded, b_shaded, spinner, aimer ;

#define SIG_AIM				2
#define SIG_AIM_2			4

static-var  Static_Var_1, gun_1, upgraded, firedelay, firing, inlimbo, closing, building ;
static-var	shield_on, charge_on, nbr_charge, nbr_shield, dome_on, nbr_dome ; 

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	inlimbo=1;
	if ( upgraded )
	{
		while(closing)
		{
			sleep 100;
		}
//		set ARMORED to 0;
//		if (shield_on)
//		{
//			set ARMORED to 1;
//		}
//		if( !Static_Var_1 )
//		{
//			sleep 25;
//		}
//		Static_Var_1 = 1;
		turn turret to y-axis heading speed <5.000000>;
		turn neck to x-axis <0.000000> - pitch speed <2.000000>;
		wait-for-turn turret around y-axis;
		wait-for-turn neck around x-axis;
		while( firing )
		{
//			sleep firedelay;
//			wait-for-turn turret around y-axis;
//			wait-for-turn neck around x-axis;
//			firing = 0;
			sleep 100;
		}
		inlimbo=0;
		return (1);
	}	
	if ( !upgraded )
	{
		while(building)
		{
			sleep 100;
		}
//		set ARMORED to 0;
//		if (shield_on)
//		{
//			set ARMORED to 1;
//		}
		turn turret2 to y-axis heading speed <5.000000>;
		turn sleeve to x-axis <0.000000> - pitch speed <2.000000>;
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeve around x-axis;
		while( firing )
		{
//			sleep firedelay;
//			wait-for-turn turret2 around y-axis;
//			wait-for-turn sleeve around x-axis;
//			firing = 0;
			sleep 100;
		}
		inlimbo=0;
		return (1);
	}	
}

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_charge = 0;
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_CHARGE)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						
						if (distance > MOBILE_RADIUS_6)			//60-90 seconds
						{
							shgen_count = 0;
						}
						if (distance <= MOBILE_RADIUS_6)		//60 seconds
						{
							shgen_count = 5;
						}
						if (distance <= MOBILE_RADIUS_5)		//45 seconds
						{
							shgen_count = 4;
						}
						if (distance <= MOBILE_RADIUS_4)		//30 seconds
						{
							shgen_count = 3;
						}
						if (distance <= MOBILE_RADIUS_3)		//15 seconds
						{
							shgen_count = 2;
						}
						if (distance <= BOOST_RADIUS)
						{
							shgen_count = 1;
							++nbr_charge;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if (!upgraded)
		{
			if(nbr_charge>=2)
			{
				if(!charge_on)
				{
					charge_on = 1;
					sleep 1;
					firedelay = 9850;				//Normal, Charged
				}
			}
			if(nbr_charge<2)
			{
				if(charge_on)
				{
					charge_on = 0;
					sleep 1;
					firedelay = 14850;				//Normal
				}
			}	
		}
		if (upgraded)
		{
			if(nbr_charge>=2)
			{
				if(!charge_on)
				{
					charge_on = 1;
					sleep 1;
					firedelay = 9850;				//Upgraded, Charged //1850
				}
			}
			if(nbr_charge<2)
			{
				if(charge_on)
				{
					charge_on = 0;
					sleep 1;
					firedelay = 14850;				//Upgraded, Not-Charged	//2850
				}
			}	
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		sleep rand(3000,4000);
		if(shgen_count == 0)
		{
			sleep rand(60000,90000);
		}
		if(shgen_count == 1)
		{
			sleep rand(3000,4000);
		}
		if(shgen_count == 2)
		{
			sleep rand(8500,13500);
		}
		if(shgen_count == 3)
		{
			sleep rand(22500,28500);
		}
		if(shgen_count == 4)
		{
			sleep rand(30000,43500);
		}
		if(shgen_count == 5)
		{
			sleep rand(45000,58500);
		}
	}
}	


Upgrade()
{
	var xz, x, z, unit_ID, distance;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	var myid;
	myid= get MY_ID;

	for (unit_ID = min; unit_ID <= max; ++unit_ID)
	{
		if(unit_ID != myid)
		{
			if(get UNIT_HEIGHT(unit_ID) == 1820443)
			{
				if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
				{
					xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
					SECURE_XZ;
					distance=get XZ_HYPOT(xz);
					if (distance <= [2])
					{
						if (get UNIT_IS_ON_THIS_COMP(get(MY_ID)))
						{
							if (get UNIT_IS_ON_THIS_COMP(unit_ID))
							{
								drop-unit unit_ID;
								attach-unit unit_ID to this;
							}
						}
						
						firing = 1;
						closing = 1;
												
						show cover;
						show base;
						show plat2;
						show darkness;
						show hole;

						spin spinner around y-axis speed <360.000000>;
						
//						stop-spin turret2 around y-axis;
//						turn turret2 to y-axis <0.000000> speed <30.000000>;
//						wait-for-turn turret2 around x-axis;
						
//						sleep 1000;
						
						dont-cache body;
						dont-cache turret2;
						dont-cache sleeve;
						dont-cache barrel;
						
						turn sleeve to x-axis <-75.000000> speed <20.000000>;
						wait-for-turn sleeve around x-axis;
						
						
						move plat2 to y-axis [-17.000000] speed [20.000000];
						move barrel to z-axis [-17.000000] speed [20.000000];
						wait-for-move plat2 along y-axis;	
						
						sleep 50;
						
						hide plat2;
						hide body;
						hide turret2;
						hide sleeve;
						hide barrel;
												
//						Static_Var_1 = 0;
						set INBUILDSTANCE to 0;
						upgraded = 1;
						gun_1 = 0;
						
//						set ARMORED to 1;
						
//						turn neck to x-axis <-75.000000> NOW;
//						move plat to y-axis [-68.000000] NOW;
						
						sleep 500;
						
						
						move tip01 to z-axis [-16] now;
						move tip02 to z-axis [-16] now;
						move tip03 to z-axis [-16] now;
						move tip04 to z-axis [-16] now;
						
						show plat;					
						show turret;
						show neck;
						show spindle;
						show housing01;
						show barrel01;
						show long01;
						show housing02;
						show barrel02;
						show long02;
						show housing03;
						show barrel03;
						show long03;
						show housing04;
						show barrel04;
						show long04;
						show tip01;
						show tip02;
						show tip03;
						show tip04;
						show t_shaded;
						

						move plat to y-axis [-22.000000] NOW;
						turn neck to x-axis <-75.000000> NOW;

						move plat to y-axis [0.000000] speed [20.000000];
						move turret to y-axis [0.000000] speed [20.000000];
						wait-for-move plat along y-axis;
						show b_shaded;
						
						hide plat;
						hide base;
						
						hide hole;
						hide darkness;
						hide cover;
						
//						sleep 500;
								
						turn neck to x-axis <0.000000> speed <20.000000>;
						wait-for-turn neck around x-axis;
						
						move tip01 to z-axis [0] speed [20];
						move tip02 to z-axis [0] speed [20];
						move tip03 to z-axis [0] speed [20];
						move tip04 to z-axis [0] speed [20];
						
						wait-for-move tip01 along z-axis;
						
						wait-for-turn turret around y-axis;
						wait-for-turn neck around x-axis;
						
						sleep 398;
						
					
//						set ARMORED to 0;
//						if (shield_on)
//						{
//							set ARMORED to 1;
//						}
						firedelay = 14850;			//2850
						if (charge_on)
						{
							firedelay = 9850;		//1850
						}
//						Static_Var_1 = 1;
						if(!inlimbo)
						{		
							signal SIG_AIM;
							set-signal-mask SIG_AIM;
//							start-script RestoreAfterDelay();
						}
						closing = 0;
						firing = 0;
						return;
					}
				}
			}
		}
	}
}


Create()
{
	nbr_charge = 0;
	nbr_shield = 0;
	nbr_dome = 0;
	
	charge_on = 0;
	shield_on = 0;
	dome_on = 0;
	
	inlimbo=0;
	
	dont-cache cover;
	dont-cache darkness;
	dont-cache hole;
	hide cover;
	
	hide flare;
	hide flare2;
	
	dont-cache flare;
	dont-cache flare2;

	dont-shade barrel;
	dont-shade sleeve;
	dont-shade turret2;

	dont-shade barrel01;
	dont-shade barrel02;
	dont-shade barrel03;
	dont-shade barrel04;
	
	dont-shade long01;
	dont-shade long02;
	dont-shade long03;
	dont-shade long04;
	
	dont-shade housing01;
	dont-shade housing02;
	dont-shade housing03;
	dont-shade housing04;
	
	dont-shade spindle;
	dont-shade neck;
	dont-shade turret;

//	dont-shade plat;
//	dont-shade plat2;
	
	dont-shade tip01;
	dont-shade tip02;
	dont-shade tip03;
	dont-shade tip04;
	
	hide t_shaded;
	
	dont-shade t_shaded;

	hide b_shaded;
	hide base;
	hide plat;
	hide plat2;

	hide hole;
	hide darkness;

	hide turret;
	hide neck;
	hide spindle;
	hide housing01;
	hide barrel01;
	hide long01;
	hide housing02;
	hide barrel02;
	hide long02;
	hide housing03;
	hide barrel03;
	hide long03;
	hide housing04;
	hide barrel04;
	hide long04;
	hide tip01;
	hide tip02;
	hide tip03;
	hide tip04;

	hide spinner;
	hide aimer;

	gun_1 = 8;
	upgraded = 0;
	firedelay = 14850;
	firing = 0;
//	Static_Var_1 = 1;
	building = 0;
	
	set INBUILDSTANCE to 1;	
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
//	show cover;
	start-script detect();
	start-script SmokeUnit();
	
}


FirePrimary()
{
//	firing = 1;
	if ( !upgraded )
	{
		gun_1 = 8;
		firing = 1;
		move barrel to z-axis [-5.000000] speed [500.000000];
		show flare2;
		sleep 150;
		hide flare2;
		move barrel to z-axis [0.000000] speed [3.000000];
		sleep firedelay;
		firing = 0;
	}
	
	if ( upgraded )
	{
		if ( gun_1 == 0 )
		{
			firing = 1;
			move barrel01 to z-axis [-10.000000] now;
			show flare;
			sleep 150;
//			explode shell type FALL;
			hide flare;
			move barrel01 to z-axis [0.000000] speed [20.000000];
			turn spindle to z-axis <90.000000> speed <540.00000>;
			turn long01 to z-axis <-90.000000> speed <540.000000>;
			turn long02 to z-axis <-90.000000> speed <540.000000>;
			turn long03 to z-axis <-90.000000> speed <540.000000>;
			turn long04 to z-axis <-90.000000> speed <540.000000>;
//			sleep firedelay;
			firing = 0;
		}
		if ( gun_1 == 1 )
		{
			firing = 1;
			move barrel02 to z-axis [-10.000000] now;
			show flare;
			sleep 150;
//			explode shell type FALL;
			hide flare;
			move barrel02 to z-axis [0.000000] speed [20.000000];
			turn spindle to z-axis <180.000000> speed <540.00000>;
			turn long01 to z-axis <-180.000000> speed <540.000000>;
			turn long02 to z-axis <-180.000000> speed <540.000000>;
			turn long03 to z-axis <-180.000000> speed <540.000000>;
			turn long04 to z-axis <-180.000000> speed <540.000000>;
//			sleep firedelay;
			firing = 0;
		}
		if ( gun_1 == 2 )
		{
			firing = 1;
			move barrel03 to z-axis [-10.000000] now;
			show flare;
			sleep 150;
			hide flare;
//			explode shell type FALL;
			move barrel03 to z-axis [0.000000] speed [20.000000];
			turn spindle to z-axis <270.000000> speed <540.00000>;
			turn long01 to z-axis <-270.000000> speed <540.000000>;
			turn long02 to z-axis <-270.000000> speed <540.000000>;
			turn long03 to z-axis <-270.000000> speed <540.000000>;
			turn long04 to z-axis <-270.000000> speed <540.000000>;
//			sleep firedelay;
			firing = 0;
		}
		if ( gun_1 == 3 )
		{
			firing = 1;
			move barrel04 to z-axis [-10.000000] now;
			show flare;
			sleep 150;
//			explode shell type FALL;
			hide flare;
			move barrel04 to z-axis [0.000000] speed [20.000000];
			turn spindle to z-axis <0.000000> speed <540.00000>;
			turn long01 to z-axis <0.000000> speed <540.000000>;
			turn long02 to z-axis <0.000000> speed <540.000000>;
			turn long03 to z-axis <0.000000> speed <540.000000>;
			turn long04 to z-axis <0.000000> speed <540.000000>;
//			sleep firedelay;
			firing = 0;
		}
		if ( gun_1 == 4 )
		{
			firing = 1;
			move barrel01 to z-axis [-10.000000] now;
			show flare;
			sleep 150;
//			explode shell type FALL;
			hide flare;
			move barrel01 to z-axis [0.000000] speed [20.000000];
			turn spindle to z-axis <90.000000> speed <540.00000>;
			turn long01 to z-axis <-90.000000> speed <540.000000>;
			turn long02 to z-axis <-90.000000> speed <540.000000>;
			turn long03 to z-axis <-90.000000> speed <540.000000>;
			turn long04 to z-axis <-90.000000> speed <540.000000>;
//			sleep firedelay;
			firing = 0;
		}
		if ( gun_1 == 5 )
		{
			firing = 1;
			move barrel02 to z-axis [-10.000000] now;
			show flare;
			sleep 150;
//			explode shell type FALL;
			hide flare;
			move barrel02 to z-axis [0.000000] speed [20.000000];
			turn spindle to z-axis <180.000000> speed <540.00000>;
			turn long01 to z-axis <-180.000000> speed <540.000000>;
			turn long02 to z-axis <-180.000000> speed <540.000000>;
			turn long03 to z-axis <-180.000000> speed <540.000000>;
			turn long04 to z-axis <-180.000000> speed <540.000000>;
//			sleep firedelay;
			firing = 0;
		}
		if ( gun_1 == 6 )
		{
			firing = 1;
			move barrel03 to z-axis [-10.000000] now;
			show flare;
			sleep 150;
			hide flare;
//			explode shell type FALL;
			move barrel03 to z-axis [0.000000] speed [20.000000];
			turn spindle to z-axis <270.000000> speed <540.00000>;
			turn long01 to z-axis <-270.000000> speed <540.000000>;
			turn long02 to z-axis <-270.000000> speed <540.000000>;
			turn long03 to z-axis <-270.000000> speed <540.000000>;
			turn long04 to z-axis <-270.000000> speed <540.000000>;
//			sleep firedelay;
			firing = 0;
		}
		if ( gun_1 == 7 )
		{
			firing = 1;
			move barrel04 to z-axis [-10.000000] now;
			show flare;
			sleep 150;
//			explode shell type FALL;
			hide flare;
			move barrel04 to z-axis [0.000000] speed [20.000000];
			turn spindle to z-axis <0.000000> speed <540.00000>;
			turn long01 to z-axis <0.000000> speed <540.000000>;
			turn long02 to z-axis <0.000000> speed <540.000000>;
			turn long03 to z-axis <0.000000> speed <540.000000>;
			turn long04 to z-axis <0.000000> speed <540.000000>;
			sleep firedelay;
			firing = 0;
		}
		++gun_1;
		if( gun_1 == 8 )
		{
			gun_1 = 0;
		}
	}
}	
	
	
TargetCleared(Func_Var_1)
{
	if( Func_Var_1 == 1 )
	{
		signal SIG_AIM;
		stop-spin turret2 around y-axis;
		stop-spin sleeve around x-axis;
		stop-spin turret around y-axis;
		stop-spin neck around x-axis;
	}
}

AimFromPrimary(piecenum)
{
	if ( upgraded )
	{
		piecenum = aimer;
	}
	if ( !upgraded )
	{
		piecenum = turret2;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare;
	}			
	if( gun_1 == 3 )
	{
		piecenum = flare;
	}			
	if( gun_1 == 4 )
	{
		piecenum = flare;
	}
	if( gun_1 == 5 )
	{
		piecenum = flare;
	}
	if( gun_1 == 6 )
	{
		piecenum = flare;
	}			
	if( gun_1 == 7 )
	{
		piecenum = flare;
	}			
	if( gun_1 == 8 )
	{
		piecenum = flare2;
	}			
}

QueryBuildInfo(piecenum)
{
	piecenum = this;
}


StopBuilding()
{
	
	sleep 1;
	building = 0;
	
	set INBUILDSTANCE to 1;
	set ACTIVATION to 0;
	call-script upgrade();
}

StartBuilding()
{
	building = 1;
	
	set YARD_OPEN to 1;
	set INBUILDSTANCE to 0;
	set ACTIVATION to 1;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	hide flare2;
	if( upgraded == 1 )
	{
		if( severity <= 80 )
		{
			corpsetype = 1;
			explode tip01 type FALL | BITMAP1;
			explode tip02 type FALL | BITMAP1;
			explode tip03 type FALL | BITMAP5;
			explode tip04 type FALL | BITMAP1;
			explode long01 type BITMAPONLY | BITMAP5;
			explode long02 type BITMAPONLY | BITMAP1;
			explode long03 type BITMAPONLY | BITMAP1;
			explode long04 type BITMAPONLY | BITMAP1;
			explode barrel01 type FALL | BITMAP1;
			explode barrel02 type FALL | BITMAP1;
			explode barrel03 type FALL | BITMAP5;
			explode barrel04 type FALL | BITMAP1;
			explode housing01 type BITMAPONLY | BITMAP5;
			explode housing02 type BITMAPONLY | BITMAP1;
			explode housing03 type BITMAPONLY | BITMAP1;
			explode housing04 type BITMAPONLY | BITMAP1;
			explode neck type BITMAPONLY | BITMAP1;
			explode spindle type BITMAPONLY | BITMAP5;
			explode base type BITMAPONLY | BITMAP1;
			return (0);
		}
		corpsetype = 3;
		explode tip01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode tip02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode tip03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode tip04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode long01 type BITMAPONLY | BITMAP5;
		explode long02 type BITMAPONLY | BITMAP1;
		explode long03 type BITMAPONLY | BITMAP1;
		explode long04 type BITMAPONLY | BITMAP1;
		explode barrel01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel02 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel03 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode housing01 type BITMAPONLY | BITMAP5;
		explode housing02 type BITMAPONLY | BITMAP1;
		explode housing03 type BITMAPONLY | BITMAP1;
		explode housing04 type BITMAPONLY | BITMAP1;
		explode neck type BITMAPONLY | BITMAP1;
		explode spindle type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;	
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret2 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 4;
	explode barrel type BITMAPONLY | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode sleeve type BITMAPONLY | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
