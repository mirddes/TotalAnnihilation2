#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, plate, turret, nano, beam, fusion, door1, door2,
	   leg1, leg2, leg3, leg4, leg5, leg6;

static-var  bMoving, Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2

activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-70.664835> speed <182.131868>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <70.664835> speed <182.131868>;
		sleep 388;
	}
	if( TRUE )
	{
		move plate to y-axis [2.165069] speed [11.439600];
		sleep 389;
	}
	if( TRUE )
	{
		turn nano to x-axis <-66.164835> speed <169.653846>;
		sleep 390;
	}
	sleep 20;
}

deactivatescr()
{
	if( TRUE )
	{
		move plate to y-axis [2.165069] now;
		turn door1 to z-axis <-70.664835> now;
		turn door2 to z-axis <70.664835> now;
		turn nano to x-axis <-66.164835> now;
		turn nano to x-axis <0.000000> speed <170.527473>;
		sleep 388;
	}
	if( TRUE )
	{
		move plate to y-axis [0.000000] speed [11.439600];
		sleep 389;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <181.197802>;
		turn door2 to z-axis <0.000000> speed <181.197802>;
		sleep 390;
	}
	sleep 20;
}


walk2()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <43.791209> now;
			turn leg1 to y-axis <0.000000> speed <218.967033>;
			turn leg1 to z-axis <0.604396> now;
			turn leg1 to z-axis <0.000000> speed <3.038462>;
			turn leg2 to z-axis <0.000000> now;
			turn leg2 to z-axis <31.016484> speed <155.104396>;
			turn leg3 to y-axis <34.670330> now;
			turn leg3 to y-axis <34.060440> speed <3.038462>;
			turn leg3 to z-axis <31.626374> now;
			turn leg3 to z-axis <0.604396> speed <155.104396>;
			turn leg4 to y-axis <-40.142857> now;
			turn leg4 to y-axis <-40.142857> speed <0.000000>;
			turn leg4 to z-axis <-31.016484> now;
			turn leg4 to z-axis <-0.604396> speed <152.060440>;
			turn leg5 to y-axis <-37.098901> now;
			turn leg5 to y-axis <0.000000> speed <185.516484>;
			turn leg5 to z-axis <0.000000> now;
			turn leg5 to z-axis <0.000000> speed <0.000000>;
			turn leg6 to y-axis <0.000000> now;
			turn leg6 to y-axis <-30.412088> speed <152.060440>;
			turn leg6 to z-axis <-45.010989> now;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <31.626374> speed <158.142857>;
			turn leg2 to y-axis <34.670330> speed <173.351648>;
			turn leg2 to z-axis <31.016484> speed <0.000000>;
			turn leg3 to y-axis <0.000000> speed <170.307692>;
			turn leg3 to z-axis <0.000000> speed <3.038462>;
			turn leg4 to y-axis <0.000000> speed <200.719780>;
			turn leg5 to z-axis <-31.016484> speed <155.104396>;
			turn leg6 to z-axis <2.428571> speed <237.219780>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.956044> speed <279.796703>;
			turn leg1 to z-axis <31.016484> speed <3.038462>;
			turn leg2 to y-axis <34.670330> speed <0.000000>;
			turn leg2 to z-axis <0.604396> speed <152.060440>;
			turn leg3 to z-axis <31.626374> speed <158.142857>;
			turn leg4 to y-axis <-0.604396> speed <3.038462>;
			turn leg4 to z-axis <-31.016484> speed <152.060440>;
			turn leg5 to y-axis <-31.626374> speed <158.142857>;
			turn leg5 to z-axis <-31.016484> speed <0.000000>;
			turn leg6 to y-axis <3.038462> speed <167.269231>;
			sleep 200;
		}
		turn leg1 to y-axis <43.791209> speed <60.824176>;
		turn leg1 to z-axis <0.604396> speed <152.060440>;
		turn leg2 to y-axis <0.000000> speed <173.351648>;
		turn leg2 to z-axis <0.000000> speed <3.038462>;
		turn leg3 to y-axis <34.670330> speed <173.351648>;
		turn leg3 to z-axis <31.626374> speed <0.000000>;
		turn leg4 to y-axis <-40.142857> speed <197.681319>;
		turn leg4 to z-axis <-31.016484> speed <0.000000>;
		turn leg5 to y-axis <-37.098901> speed <27.368132>;
		turn leg5 to z-axis <0.000000> speed <155.104396>;
		turn leg6 to y-axis <0.000000> speed <15.203297>;
		turn leg6 to z-axis <-45.010989> speed <237.219780>;
		sleep 200;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk2();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}

Go()
{
	set INBUILDSTANCE to 1;
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <160.038462>;
	wait-for-turn turret around y-axis;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.038462>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}



Create()
{
	bMoving = FALSE;
	Static_Var_1 = 0;
	call-script InitState();
	start-script MotionControl();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	sleep rand(25,250);
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode beam type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode leg1 type BITMAPONLY | BITMAP1;
		explode leg2 type BITMAPONLY | BITMAP1;
		explode leg3 type BITMAPONLY | BITMAP5;
		explode leg4 type BITMAPONLY | BITMAP5;
		explode leg5 type BITMAPONLY | BITMAP5;
		explode leg6 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode beam type FALL | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode leg1 type FALL | BITMAP1;
		explode leg2 type FALL | BITMAP1;
		explode leg3 type FALL | BITMAP5;
		explode leg4 type FALL | BITMAP5;
		explode leg5 type FALL | BITMAP5;
		explode leg6 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP1;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nano type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP1;
	explode base type BITMAPONLY | BITMAP5;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
