#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam1, arm2, beam2, door1, door2, plate, arm1, nano2, nano1, turret2, turret1, tracka1, tracka2, trackb1, trackb2;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, poo;


#define SIG_AIM 2

track_tracks()
{
	var pre;
	var now;
	pre = get XZ_ATAN(-419);
	var dif;
	while(1)
	{
		now = get XZ_ATAN(-419);
		dif = (pre - now)*4;
	/*	if(dif > <2>)
		{
			turn tracka1 to y-axis <20> speed <100>;
			turn tracka2 to y-axis <20> speed <100>;
			turn trackb1 to y-axis <-10> speed <100>;
			turn trackb2 to y-axis <-10> speed <100>;
		}
		if(dif < <-2>)
		{
			turn tracka1 to y-axis <-20> speed <100>;
			turn tracka2 to y-axis <-20> speed <100>;
			turn trackb1 to y-axis <10> speed <100>;
			turn trackb2 to y-axis <10> speed <100>;
		}
		if(dif <= <2> && dif >= <-2>)
		{
			turn tracka1 to y-axis <0> speed <100>;
			turn tracka2 to y-axis <0> speed <100>;
			turn trackb1 to y-axis <0> speed <100>;
			turn trackb2 to y-axis <0> speed <100>;
		}*/
		turn tracka1 to y-axis dif speed <100>;
		turn tracka2 to y-axis dif speed <100>;
		turn trackb1 to y-axis 0 - dif speed <100>;
		turn trackb2 to y-axis 0 - dif speed <100>;
		sleep 100;
		pre = now;
	}
}

activatescr()
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-65.714286> speed <304.258242>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <65.263736> speed <303.203297>;
		sleep 213;
	}
	if( TRUE )
	{
		move door1 to x-axis [-0.5] speed [14.242987];
		move door2 to x-axis [00.5] speed [14.242987];
		move door1 to y-axis [-5.099994] speed [14.242987];
		move door2 to y-axis [-5.050000] speed [14.126172];
		sleep 214;
	}
	if( TRUE )
	{
		move plate to y-axis [7.07504] speed [16.878510];
		sleep 214;
	}
	if( TRUE )
	{
		turn arm1 to x-axis <85.967033> speed <400.395604>;
		turn nano1 to x-axis <-69.763736> speed <326.626374>;
		turn arm2 to x-axis <85.967033> speed <400.395604>;
		turn nano2 to x-axis <-69.763736> speed <326.626374>;
		sleep 219;
	}
	sleep 22;
}

deactivatescr()
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if( TRUE )
	{
		turn arm1 to x-axis <0.000000> speed <441.571429>;
		turn nano1 to x-axis <-69.763736> now;
		turn nano1 to x-axis <0.000000> speed <379.807692>;
		turn arm2 to x-axis <85.967033> now;
		turn arm2 to x-axis <0.000000> speed <441.571429>;
		turn nano2 to x-axis <-69.763736> now;
		turn nano2 to x-axis <0.000000> speed <379.807692>;
		sleep 194;
	}
	if( TRUE )
	{
		move plate to y-axis [0.000000] speed [18.768646];
		sleep 193;
	}
	if( TRUE )
	{
		move door1 to y-axis [0.000000] speed [14.969147];
		move door2 to y-axis [0.000000] speed [14.840619];
		move door1 to x-axis [0] speed [6.242987];
		move door2 to x-axis [0] speed [6.242987];
		sleep 193;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <338.500000>;
		turn door2 to z-axis <0.000000> speed <337.346154>;
		sleep 195;
	}
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from door1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from door2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	call-script activatescr();
	turn turret1 to y-axis Static_Var_1 speed <320.038462>;
	turn turret2 to y-axis Static_Var_1 speed <320.038462>;
	wait-for-turn turret1 around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret1 to y-axis <0.000000> speed <320.038462>;
	turn turret2 to y-axis <0.000000> speed <320.038462>;
	wait-for-turn turret1 around y-axis;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	poo = 0;
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 100;
	}
	start-script track_tracks();
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	sleep rand(25,250);
	start-script RequestState(0);
	return (0);
}

StopBuilding()
{
	start-script RequestState(1);
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( poo == 0 )
	{
		piecenum = beam1;
	}
	if( poo == 1 )
	{
		piecenum = beam2;
	}
	poo = !poo;	
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP1;
		explode beam2 type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode nano2 type FALL | BITMAP1;
		explode beam2 type FALL | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		explode turret1 type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		explode turret1 type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP5;
	explode door2 type BITMAPONLY | BITMAP1;
	explode turret1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP1;
	return (0);
}
