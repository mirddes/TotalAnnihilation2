#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, body, pad1, pad2, beam1a, beam1b, beam2a, beam2b, centerbar1, centerbar2, quarter3, quarter4,
       quarter1, quarter2, nano2, nano1, plate1, plate2, target, arrow;

static-var  spray, statechg_DesiredState, statechg_StateChanging, firing;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_ACTIVATE			2

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif


Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	


activatescr()
{
	if( TRUE )
	{
		move pad2 to z-axis [-8.000000] speed [9.861066];
		move pad1 to z-axis [8.000000] speed [9.788708];
		sleep 691;
	}
	if( TRUE )
	{
		move centerbar1 to x-axis [0.000000] now;
		move centerbar1 to x-axis [12.000000] speed [11.713031];
		move centerbar2 to x-axis [0.000000] now;
		move centerbar2 to x-axis [-12.000000] speed [11.639825];
		sleep 683;
	}
	if( TRUE )
	{
		move quarter3 to z-axis [8.800000] speed [9.288824];
		move quarter4 to z-axis [-8.000000] speed [8.635706];
		move quarter1 to z-axis [-8.000000] speed [8.490570];
		move quarter2 to z-axis [8.000000] speed [9.361395];
		sleep 689;
	}
	if( TRUE )
	{
		move nano2 to x-axis [4.863996] speed [5.861066];
		move nano1 to x-axis [-4.863996] speed [5.788708];
		sleep 691;
	}
	sleep 34;
}

deactivatescr()
{
	if( TRUE )
	{
		move centerbar1 to x-axis [12.000000] now;
		move centerbar2 to x-axis [-12.000000] now;
		move nano2 to x-axis [4.863996] now;
		move nano2 to x-axis [0.000000] speed [5.929718];
		move quarter3 to z-axis [8.000000] now;
		move quarter4 to z-axis [-8.000000] now;
		move nano1 to x-axis [-4.863996] now;
		move nano1 to x-axis [0.000000] speed [5.856512];
		move quarter1 to z-axis [-8.000000] now;
		move quarter2 to z-axis [8.000000] now;
		sleep 683;
	}
	if( TRUE )
	{
		move quarter3 to z-axis [0.000000] speed [9.288824];
		move quarter4 to z-axis [0.000000] speed [8.635706];
		move quarter1 to z-axis [0.000000] speed [8.490570];
		move quarter2 to z-axis [0.000000] speed [9.361395];
		sleep 689;
	}
	if( TRUE )
	{
		move centerbar1 to x-axis [0.000000] speed [11.577423];
		move centerbar2 to x-axis [0.000000] speed [11.505066];
		sleep 691;
	}
	if( TRUE )
	{
		move pad2 to z-axis [0.000000] speed [9.861066];
		move pad1 to z-axis [0.000000] speed [9.788708];
		sleep 691;
	}
	sleep 34;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from quarter1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from quarter2;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from quarter3;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from quarter4;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1a;
	dont-cache beam1b;
	dont-cache beam2a;
	dont-cache beam2b;
	dont-cache centerbar1;
	dont-cache centerbar2;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad1;
	dont-cache pad2;
	dont-cache quarter1;
	dont-cache quarter2;
	dont-cache quarter3;
	dont-cache quarter4;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1a;
	cache beam1b;
	cache beam2a;
	cache beam2b;
	cache centerbar1;
	cache centerbar2;
	cache nano1;
	cache nano2;
	cache pad1;
	cache pad2;
	cache quarter1;
	cache quarter2;
	cache quarter3;
	cache quarter4;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	firing = 0;	
	hide arrow;
	
	move target to z-axis [2.00] now;
	
	dont-shade arrow;
	dont-cache arrow;
		
	dont-shade beam1a;
	dont-shade beam1b;
	dont-shade beam2a;
	dont-shade beam2b;
	dont-shade centerbar1;
	dont-shade centerbar2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad1;
	dont-shade pad2;
	dont-shade quarter1;
	dont-shade quarter2;
	dont-shade quarter3;
	dont-shade quarter4;
	spray = 1;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 1 )
	{
		piecenum = beam1a;
	}
	if( spray == 2 )
	{
		piecenum = beam2b;
	}
	if( spray == 3 )
	{
		piecenum = beam1b;
	}
	if( spray == 4 )
	{
		piecenum = beam2a;
	}
	++spray;
	if( spray == 5 )
	{
		spray = 1;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
//	spin target around y-axis speed <30.005495>;
}

StopBuilding()
{
//	stop-spin target around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = target;
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	
	if( heading > <90.00> AND heading < <270.00> )
	{
		turn target to y-axis <180.00> now;
		move target to z-axis [-2.00] now;
		return(1);
	}
	
	turn target to y-axis <0.00> now;
	move target to z-axis [2.00] now;
	while (firing)
	{
		sleep 50;
	}	
	return(1);
}

FireTertiary()
{
	signal 8;
	set-signal-mask 8;
	if(get UNIT_IS_ON_THIS_COMP(get MY_ID)) 
	{			
		firing = 1;
		show arrow;
		move arrow to y-axis [5.00] now;
		move arrow to z-axis [20.00] now;
		move arrow to z-axis [30.00] speed [20.00];
		sleep 500;
		move arrow to z-axis [20.00] now;
		move arrow to z-axis [30.00] speed [20.00];
		sleep 500;
		move arrow to z-axis [20.00] now;
		move arrow to z-axis [30.00] speed [20.00];
		sleep 500;
		move arrow to z-axis [20.00] now;
		move arrow to z-axis [30.00] speed [20.00];
		sleep 500;
		hide arrow;
		firing = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = target;
}

QueryTertiary(piecenum)
{
	piecenum = target;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode centerbar1 type BITMAPONLY | BITMAP1;
		explode centerbar2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP1;
		explode quarter1 type BITMAPONLY | BITMAP1;
		explode quarter2 type BITMAPONLY | BITMAP5;
		explode quarter3 type BITMAPONLY | BITMAP1;
		explode quarter4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode centerbar1 type BITMAPONLY | BITMAP1;
		explode centerbar2 type BITMAPONLY | BITMAP5;
		explode nano1 type SHATTER | BITMAP1;
		explode nano2 type SHATTER | BITMAP1;
		explode quarter1 type BITMAPONLY | BITMAP1;
		explode quarter2 type BITMAPONLY | BITMAP5;
		explode quarter3 type BITMAPONLY | BITMAP1;
		explode quarter4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode centerbar1 type BITMAPONLY | BITMAP1;
		explode centerbar2 type BITMAPONLY | BITMAP5;
		explode nano1 type SHATTER | BITMAP1;
		explode nano2 type SHATTER | BITMAP1;
		explode quarter1 type BITMAPONLY | BITMAP1;
		explode quarter2 type BITMAPONLY | BITMAP5;
		explode quarter3 type BITMAPONLY | BITMAP1;
		explode quarter4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode centerbar1 type BITMAPONLY | BITMAP1;
	explode centerbar2 type BITMAPONLY | BITMAP5;
	explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode quarter1 type BITMAPONLY | BITMAP1;
	explode quarter2 type BITMAPONLY | BITMAP5;
	explode quarter3 type BITMAPONLY | BITMAP1;
	explode quarter4 type BITMAPONLY | BITMAP1;
}
