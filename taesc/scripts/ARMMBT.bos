#define TA

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece base, body, turret, sleeve, barrel, flare, turret2, gun, emit, 
      plat, neck, rotor, sleeve1, chain1, sleeve2, chain2, sleeve3, chain3, flash ;


static-var  upgrade, myteam, my_id, gun_1, firedelay, firing;

#define SIG_AIM 			2
#define SIG_AIM_3			4

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

SmokeUnit()
{
	var Var0;
	var Var1;
	var Var2;
	while (get 17)
	{
	  sleep 400;
	}
	while (TRUE)
	{
	  Var0 = get 4;
	  if ((Var0 < 66))
	  {
		Var2 = (256 | 2);
		if ((rand (1, 66) < Var0))
		{
		  Var2 = (256 | 1);
		}
		emit-sfx Var2 from body;
	  }
	  Var1 = (Var0 * 50);
	  if ((Var1 < 200))
	  {
		Var1 = 200;
	  }
	  sleep Var1;
	}
}

/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}
*/

RockUnit(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}


Create()
{
	set ARMORED to 1;
	upgrade = 0;
	firedelay = 850;
	firing = 0;
	gun_1 = 0;
	
	hide flare;
	hide emit;
	hide flash;
	
	
		
	hide plat;
	hide neck;
	hide rotor;
	hide sleeve1;
	hide sleeve2;
	hide sleeve3;
	hide chain1;
	hide chain2;
	hide chain3;
	
	hide turret2;
	hide gun;
	
	var unit_ID, max, min;
	min = get MIN_ID;
	max = get MAX_ID;
	
	my_id=get MY_ID;
	myteam=get UNIT_TEAM(get MY_ID);
	
	for (unit_ID = min; unit_ID <= max; ++unit_ID)
	{
//		if((get UNIT_ALLIED(unit_ID)) == 1)
		if((get UNIT_TEAM(unit_id))==myteam)
		{
//			if (get UNIT_HEIGHT(unit_ID) == 2919331 || get UNIT_HEIGHT(unit_ID) == 1732896)
//			if (get UNIT_HEIGHT(unit_ID) == 2919331)
			if(get UNIT_HEIGHT(unit_id)==ARM_UPGRADE_HEIGHT || get UNIT_HEIGHT(unit_id)==WALK_UPGRADE_HEIGHT)
			{
				if(get UNIT_BUILD_PERCENT_LEFT(unit_ID)==0)
				{
					upgrade = 1;
					firedelay = 0;
					hide turret;
					hide sleeve;
					hide barrel;
					
					show gun;
					show plat;
					show neck;
					show sleeve1;
					show sleeve2;
					show sleeve3;
					show chain1;
					show chain2;
					show chain3;
				}
			}
		}
	}
//	restore_delay = 3000;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
}


RestoreAfterDelay()
{
	sleep 6000;
	turn turret to y-axis <0.00> speed <32.51>;
	turn sleeve to x-axis <0.00> speed <16.25>;
}


RestoreTertiary()
{
	sleep 6000;
	turn turret2 to y-axis <0.00> speed <180.01>;
	turn gun to x-axis <0.00> speed <180.01>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <65.01>;
	turn sleeve to x-axis 0 - pitch speed <32.51>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;

	while( firing )
	{
		sleep 50;
	}
	
	start-script RestoreAfterDelay();
	return 1;
}


FirePrimary()
{
	if (upgrade)
	{
		if( gun_1 == 0 )
		{
			move chain1 to z-axis [-3.01] speed [500.00];
			show flash;
			sleep 150;
			hide flash;
			move chain1 to z-axis [0.00] speed [1.50];
			turn rotor to z-axis <-120.000000> speed <270.00000>;
			turn sleeve1 to z-axis <120.000000> speed <270.000000>;
			turn sleeve2 to z-axis <120.000000> speed <270.000000>;
			turn sleeve3 to z-axis <120.000000> speed <270.000000>;
		}	
		if( gun_1 == 1 )
		{
			move chain2 to z-axis [-3.01] speed [500.00];
			show flash;
			sleep 150;
			hide flash;
			move chain2 to z-axis [0.00] speed [1.50];
			turn rotor to z-axis <-240.000000> speed <270.00000>;
			turn sleeve1 to z-axis <240.000000> speed <270.000000>;
			turn sleeve2 to z-axis <240.000000> speed <270.000000>;
			turn sleeve3 to z-axis <240.000000> speed <270.000000>;
		}	
		if( gun_1 == 2 )
		{
			move chain3 to z-axis [-3.01] speed [500.00];
			show flash;
			sleep 150;
			hide flash;
			move chain3 to z-axis [0.00] speed [1.50];
			turn rotor to z-axis <0.000000> speed <270.00000>;
			turn sleeve1 to z-axis <0.000000> speed <270.000000>;
			turn sleeve2 to z-axis <0.000000> speed <270.000000>;
			turn sleeve3 to z-axis <0.000000> speed <270.000000>;
		}	
		++gun_1;
		if( gun_1 == 3 )
		{
			gun_1 = 0;
		}
	}
	if (!upgrade)
	{
		firing = 1;
		show flare;
		move barrel to z-axis [-3.01] speed [500.00];
		sleep 150;
		hide flare;
		move barrel to z-axis [0.00] speed [1.50];
		sleep firedelay;
		firing = 0;
	}
}


AimFromPrimary(piece_name)
{
	piece_name = turret;
}


QueryPrimary(piece_name)
{
	if ( upgrade )
	{
		piece_name = flash;
	}	
	if ( !upgrade )
	{
		piece_name = flare;
	}	
}


AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while(upgrade == 0)
	{
		sleep 888;
	}
	turn turret2 to y-axis heading speed <360.01>;
//	turn gun to x-axis 0 - pitch speed <300.01>;
	wait-for-turn turret2 around y-axis;
//	wait-for-turn gun around x-axis;
	start-script RestoreTertiary();
	return (1);
}

FireTertiary()
{
	show emit;
	sleep 150;
	hide emit;
}

QueryTertiary(piece_name)
{
	piece_name = emit;
}

AimFromTertiary(piece_name)
{
	piece_name = turret2;
}


SweetSpot(piece_name)
{
	piece_name = body;
}


Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	hide flare;
	hide emit;
	hide flash;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode barrel type BITMAPONLY | BITMAP1;
		explode neck type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode neck type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type SHATTER | BITMAP1;
		explode turret type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
