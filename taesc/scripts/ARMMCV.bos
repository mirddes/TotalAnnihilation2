#define TA

#include "sfxtype.h"
#include "exptype.h"


piece 	flare1a, flare1b, flare1c, flare1d, flare2a, flare2b, flare2c, flare2d, 
		r1, r2, r3, r4, r5, r6, lflr1a, lflr1b, lflr2a, lflr2b,
		base, body, sides, front_tracks, back_tracks, tracks_animated, tracks_reverse, tracks_move, 
		fusion_bits, nuke_dome_1, nuke_dome_2, door1, door2, 
		turret1, sleeves1, barrel1a, barrel1b, barrel1c, barrel1d, 
		turret2, sleeves2, barrel2a, barrel2b, barrel2c, barrel2d, 
		ltur1, lslv1, lbar1a, lbar1b, ltur2, lslv2, lbar2a, lbar2b, 
		deck, boxes, fusions_1, fdome_1_left, fdome_1_right, fusions_2, fdome_2_left, fdome_2_right,		
		w1, w2, w3, w4, blast, raise, vlaunch, oops;
		

static-var is_moving, gun_1, gun_2, gun_3, salvo_3, wait, aimback, brb ;


#define SIG_AIM 			2
#define SIG_AIM2 			4
#define SIG_AIM3 			8
#define SIG_R				16
#define SIG_MOVE			32

track_tracks()
{
	var pre;
	var now;
	pre = get XZ_ATAN(-419);
	var dif;
	
	var preang;
	var prepos;
	var ang;
	var pos;
	
	preang = get XZ_ATAN(-419);
	prepos = get PIECE_XZ(base);
	
	var counter;
	var g;
	
	counter = 0;

	while(1)
	{
		now = get XZ_ATAN(-419);
		dif = pre - now;
		if(dif > <2>)
		{
			hide tracks_reverse;
			hide tracks_move;
			show tracks_animated;
		}
		if(dif < <-2>)
		{
			show tracks_reverse;
			hide tracks_move;
			hide tracks_animated;
		}
		if(dif <= <2> && dif >= <-2>)
		{
			hide tracks_reverse;
			show tracks_move;
			hide tracks_animated;
		}
		
		ang = get XZ_ATAN(-419);
		pos = get PIECE_XZ(base);
		
		is_moving = 0;
		
		if (ang != preang)
		{
			is_moving = 1;
		}
		if(pos != prepos)
		{
			is_moving = 1;
		}
		if(is_moving)
		{
			dont-cache tracks_animated;
			dont-cache tracks_reverse;
			dont-cache tracks_move;
		}
		if(!is_moving)
		{
			Cache tracks_animated;
			cache tracks_reverse;
			cache tracks_move;
		}
		sleep 200;
		prepos = pos;
		preang = ang;
		pre = now;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	set ARMORED to 1;
	
	hide blast;
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare1d;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	hide flare2d;
	
	hide lflr1a;
	hide lflr1b;
	hide lflr2a;
	hide lflr2b;
	
	dont-cache flare1a;
	dont-cache flare1b;
	dont-cache flare1c;
	dont-cache flare1d;
	dont-cache flare2a;
	dont-cache flare2b;
	dont-cache flare2c;
	dont-cache flare2d;
	
	dont-cache lflr1a;
	dont-cache lflr1b;
	dont-cache lflr2a;
	dont-cache lflr2b;
	
	is_moving=0;
	brb = 0;
	aimback = 0;
	wait=0;
	gun_1 = 0;
	gun_2 = 8;
	gun_3 = 14;
	salvo_3 = 0;
		
	set ACTIVATION to TRUE;
		
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 100;
	}
	
	hide tracks_reverse;
	hide tracks_move;

	start-script SmokeUnit();
	start-script track_tracks();
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	signal SIG_MOVE;
}

Restore()
{
	signal SIG_R;
	set-signal-mask SIG_R;
	sleep 15000;
	turn turret1 to y-axis <0.000000> speed <45.000000>;
	turn sleeves1 to x-axis <0.000000> speed <45.000000>;
	turn turret2 to y-axis <0.000000> speed <45.000000>;
	turn sleeves2 to x-axis <0.000000> speed <45.000000>;
	
	turn ltur1 to y-axis <0.000000> speed <180.000000>;
	turn lslv1 to x-axis <0.000000> speed <180.000000>;
	turn ltur2 to y-axis <0.000000> speed <180.000000>;
	turn lslv2 to x-axis <0.000000> speed <180.000000>;

	move raise to y-axis [0] speed [20];
	wait-for-move raise along y-axis;
	
	sleep 50;
	
	turn door1 to z-axis <0.000000> speed <60.000000>;
	turn door2 to z-axis <0.000000> speed <60.000000>;
	
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around z-axis;
}

RestoreTurret1()
{
	if(brb == 0)
	{
		brb = 1;
		sleep 18000;
	}
	turn turret1 to y-axis <0> speed <45.000000>;
	turn sleeves1 to x-axis <0> speed <45.000000>;
}




AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	if ( heading >= <110> AND heading <= <250> )
	{
		aimback=1;
		start-script RestoreTurret1();
		if (gun_1 <= 3)
		{
			gun_1 = 4;
		}
	}
	if (!( heading >= <110> AND heading <= <250> ))
	{
		aimback=0;
		turn turret1 to y-axis heading speed <90>;
		turn sleeves1 to x-axis <0.000000> - pitch speed <90>;
	}
	turn turret2 to y-axis heading speed <90>;
	turn sleeves2 to x-axis <0.000000> - pitch speed <90>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeves1 around x-axis;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeves2 around x-axis;
	while(wait)
	{
		sleep 1;
	}
	Start-script Restore();
	return (1);
}

FirePrimary()
{
	wait=1;
	if( gun_1 == 0 )
	{
		move barrel1a to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1a along z-axis;
		move barrel1a to z-axis [0.000000] speed [3.000000];
		show flare1a;
		sleep 150;
		hide flare1a;
	}
	if( gun_1 == 1 )
	{
		move barrel1b to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1b along z-axis;
		move barrel1b to z-axis [0.000000] speed [3.000000];
		show flare1b;
		sleep 150;
		hide flare1b;
	}
	if( gun_1 == 2 )
	{
		move barrel1c to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1c along z-axis;
		move barrel1c to z-axis [0.000000] speed [3.000000];
		show flare1c;
		sleep 150;
		hide flare1c;
	}
	if( gun_1 == 3 )
	{
		move barrel1d to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1d along z-axis;
		move barrel1d to z-axis [0.000000] speed [3.000000];
		show flare1d;
		sleep 150;
		hide flare1d;
	}
	//=========================back turret============================================================================================================
	if( gun_1 == 4 )
	{
		move barrel2a to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2a along z-axis;
		move barrel2a to z-axis [0.000000] speed [3.000000];
		show flare2a;
		sleep 150;
		hide flare2a;
	}
	if( gun_1 == 5 )
	{
		move barrel2b to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2b along z-axis;
		move barrel2b to z-axis [0.000000] speed [3.000000];
		show flare2b;
		sleep 150;
		hide flare2b;
	}
	if( gun_1 == 6 )
	{
		move barrel2c to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2c along z-axis;
		move barrel2c to z-axis [0.000000] speed [3.000000];
		show flare2c;
		sleep 150;
		hide flare2c;
	}
	if( gun_1 == 7 )
	{
		move barrel2d to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2d along z-axis;
		move barrel2d to z-axis [0.000000] speed [3.000000];
		show flare2d;
		sleep 150;
		hide flare2d;
	}
	++gun_1;
	if( gun_1 == 8 )
	{
		if(aimback == 1)
		{
			gun_1 = 4;
			sleep 600;
		}
		if(aimback == 0)
		{
			gun_1 = 0;
		}
	}
	wait=0;
}


AimFromPrimary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1b;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare1c;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare1d;
	}
	if( gun_1 == 4 )
	{
		piecenum = flare2a;
	}
	if( gun_1 == 5 )
	{
		piecenum = flare2b;
	}
	if( gun_1 == 6 )
	{
		piecenum = flare2c;
	}
	if( gun_1 == 7 )
	{
		piecenum = flare2d;
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;

	turn door1 to z-axis <135.000000> speed <60.000000>;
	turn door2 to z-axis <-135.000000> speed <60.000000>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around z-axis;
	
	sleep 50;
	
	move raise to y-axis [4.5] speed [20];
	wait-for-move raise along y-axis;
	
	start-script Restore();
	return (1);
}


FireSecondary()
{
	if( gun_2 == 8 )
	{
		explode r1 type BITMAPONLY | BITMAP5;
	}
	if( gun_2 == 9 )
	{
		explode r2 type BITMAPONLY | BITMAP5;
	}
	if( gun_2 == 10 )
	{
		explode r3 type BITMAPONLY | BITMAP5;
	}
	if( gun_2 == 11 )
	{
		explode r4 type BITMAPONLY | BITMAP5;
	}
	if( gun_2 == 12 )
	{
		explode r5 type BITMAPONLY | BITMAP5;
	}
	if( gun_2 == 13 )
	{
		explode r6 type BITMAPONLY | BITMAP5;
	}
	++gun_2;
	if (gun_2 == 14)
	{
		gun_2 = 8;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}


QuerySecondary(piecenum)
{
	if (gun_2 == 8)
	{
		piecenum = r1;
	}
	if (gun_2 == 9)
	{
		piecenum = r2;
	}
	if (gun_2 == 10)
	{
		piecenum = r3;
	}
	if (gun_2 == 11)
	{
		piecenum = r4;
	}
	if (gun_2 == 12)
	{
		piecenum = r5;
	}
	if (gun_2 == 13)
	{
		piecenum = r6;
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	
	if( salvo_3 == 0 )
	{
		turn ltur1 to y-axis heading speed <360>;
		turn lslv1 to x-axis <0.000000> - pitch speed <360.000000>;
	}
	if( salvo_3 == 1 )
	{
		turn ltur2 to y-axis heading speed <360>;
		turn lslv2 to x-axis <0.000000> - pitch speed <360.000000>;
	}
	wait-for-turn ltur1 around y-axis;
	wait-for-turn lslv1 around x-axis;
	wait-for-turn ltur2 around y-axis;
	wait-for-turn lslv2 around x-axis;
	Start-script Restore();
	return (1);
}

FireTertiary()
{
	var gun_3_tmp;
	gun_3_tmp = gun_3;
	++gun_3;
	if( gun_3 == 18 )
	{
		gun_3 = 14;
	}
	if( gun_3_tmp == 14 )
	{
		salvo_3 = 0; 
		show lflr1a;
		sleep 150;
		hide lflr1a;
	}
	if( gun_3_tmp == 15 )
	{
		salvo_3 = 1; 
		show lflr1b;
		sleep 150;
		hide lflr1b;
	}
	if( gun_3_tmp == 16 )
	{
		salvo_3 = 1; 
		show lflr2a;
		sleep 150;
		hide lflr2a;
	}
	if( gun_3_tmp == 17 )
	{
		salvo_3 = 0; 
		show lflr2b;
		sleep 150;
		hide lflr2b;
	}
}

AimFromTertiary(piecenum)
{
	if( salvo_3 == 0 )
		piecenum = ltur1;
	if( salvo_3 == 1 )
		piecenum = ltur2;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 14 )
		piecenum = lflr1a;
	if( gun_3 == 15 )
		piecenum = lflr1b;
	if( gun_3 == 16 )
		piecenum = lflr2a;
	if( gun_3 == 17 )
		piecenum = lflr2b;
}

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare1d;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	hide flare2d;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type BITMAPONLY | BITMAP1;
		explode flare2b type BITMAPONLY | BITMAP5;
		explode sleeves1 type BITMAPONLY | BITMAP1;
		explode barrel1a type BITMAPONLY | BITMAP1;
		explode barrel1c type BITMAPONLY | BITMAP1;
		explode barrel2a type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret1 type FALL | BITMAP1;
		explode turret2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | BITMAP1;
		explode flare2b type FALL | BITMAP5;
		explode sleeves1 type SHATTER | BITMAP1;
		explode barrel1a type FALL | BITMAP1;
		explode barrel1c type FALL | BITMAP1;
		explode barrel2b type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeves1 type SHATTER | BITMAP1;
		explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeves1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}




