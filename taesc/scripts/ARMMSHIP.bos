#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rocket1, rocket2, flare1, flare2, base, launcher1, launcher2, door1,
       door2, plate, wake1, wake2, turret1, turret2 ;

static-var  Static_Var_1, gun_1, gun_3, restore_delay, statechg_DesiredState,
            statechg_StateChanging;
//static-var  firedelay, firing;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_MOVE			8


activatescr()
{
	if( TRUE )
	{
		move door1 to x-axis [0.000000] now;
		move door1 to x-axis [4.189996] speed [6.000000];
		move door2 to x-axis [0.000000] now;
		move door2 to x-axis [-4.339996] speed [7.000000];
		sleep 600;
	}
	if( TRUE )
	{
		move plate to y-axis [4.339996] speed [7.000000];
		sleep 600;
	}
	if( TRUE )
	{
		turn launcher1 to x-axis <-90.021978> speed <120.000000>;
		sleep 750;
	}
	sleep 10;
}

deactivatescr()
{
	if( TRUE )
	{
		move plate to y-axis [4.339996] now;
		move door1 to x-axis [4.189996] now;
		move door2 to x-axis [-4.339996] now;
		move launcher1 to x-axis [0.000000] now;
		move launcher1 to x-axis [0.000000] speed [0.000000];
		turn launcher1 to x-axis <-90.021978> now;
		turn launcher1 to x-axis <0.000000> speed <120.000000>;
		sleep 750;
	}
	if( TRUE )
	{
		move plate to y-axis [0.000000] speed [7.000000];
		sleep 600;
	}
	if( TRUE )
	{
		move door1 to x-axis [0.000000] speed [6.000000];
		move door2 to x-axis [0.000000] speed [7.000000];
		sleep 600;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set ARMORED to 0;
	show rocket1;
	show rocket2;
	call-script activatescr();
	sleep 1500;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	sleep 1500;
	call-script deactivatescr();
	sleep 1500;
	set ARMORED to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
//	firedelay = 2000;
//	firing = 0;
	
	gun_1 = rocket2;
	gun_3 = rocket2;
	Static_Var_1 = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	set ARMORED to 1;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

RestoreTertiary()
{
	sleep 4000;
	set-signal-mask 0;
	turn launcher2 to y-axis <0.000000> speed <70.000000>;
	turn launcher2 to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn launcher2 to y-axis heading speed <400.000000>;
	turn launcher2 to x-axis <0.000000> - pitch speed <250.000000>;
	wait-for-turn launcher2 around y-axis;
	wait-for-turn launcher2 around x-axis;
//	while( firing )
//	{
//		sleep firedelay;
//		wait-for-turn launcher2 around y-axis;
//		wait-for-turn launcher2 around x-axis;
//		firing = 0;
//	}
	start-script RestoreTertiary();
	return (1);
}

FirePrimary()
{
//	firing = 1;
	if( gun_1 == 1 )
	{
		hide rocket1;
		gun_1 = flare1;
		return (0);
	}
	if( gun_1 == 2 )
	{
		hide rocket2;
		Static_Var_1 = 0;
		call-script RequestState(1);
		gun_1 = rocket2;
		return (0);
	}
}

FireTertiary()
{
	if( gun_3 == 1 )
	{
		gun_3 = flare1;
		return (0);
	}
	if( gun_3 == 2 )
	{
		gun_3 = rocket2;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = launcher1;
}

AimFromTertiary(piecenum)
{
	piecenum = launcher2;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = rocket1;
	}
	if( gun_1 == 2 )
	{
		piecenum = rocket2;
	}
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_3 == 2 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode launcher1 type BITMAPONLY | BITMAP1;
		explode launcher2 type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		explode rocket1 type BITMAPONLY | BITMAP1;
		explode rocket2 type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher1 type BITMAPONLY | BITMAP1;
		explode launcher2 type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher1 type BITMAPONLY | BITMAP1;
		explode launcher2 type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP1;
	explode door2 type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launcher1 type BITMAPONLY | BITMAP1;
	explode launcher2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP1;
	explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
