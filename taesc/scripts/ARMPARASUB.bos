#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, base, body, turret1, sleeve1a, sleeve1b, wings, w1, w2, blast,
d1, d2, d3 ;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_R				8
#define SIG_MOVE			16
#define BANK_MORE 80
#define BANK_LESS 40
#define BANK_DAMP_SPEED <30>
#define BANK_REFRESH 300// Put some time long enough for the unit to have travelled a while, but short enough so the script doesn't have a too long reaction time
#define BANK_SIGNIFICATIVE_SPEED [1]// Actually, it's not a speed, but a distance, the distance covered during BANK_REFRESH. If that distance is too low, the difference between the two xz is deemed too low to get a significative angle out of it. Since half of digit are lost when x and z get packed into xz, any distance under 65536=[0.4] will lose all its significative digits and so will be unuseable.

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	healthpercent = get HEALTH;
	sleeptime = healthpercent*healthpercent;
	if( healthpercent < 66 )
	{
		emit-sfx 256 | 3 from base;
		sleep sleeptime;
		emit-sfx 256 | 3 from d1;
		if( Rand( 1, 66 ) > healthpercent )
		{
			emit-sfx 256 | 3 from base;
			sleep sleeptime;
			emit-sfx 256 | 3 from d1;
			sleep sleeptime;
			emit-sfx 256 | 3 from d2;
			sleep sleeptime;
			emit-sfx 256 | 3 from d3;
			sleep sleeptime;
			emit-sfx 256 | 3 from sleeve1b;
			sleep sleeptime;
		}
	}
	start-script smokeunit();
}

BankClerck()
{
	var present_xz, past_xz, banking_angle;
	while(1)
	{
		present_xz=get PIECE_XZ(base);
		banking_angle=0;
		if (get XZ_HYPOT(present_xz - past_xz)>=BANK_SIGNIFICATIVE_SPEED)
			{
			banking_angle=(0 - (((get XZ_ATAN(past_xz - present_xz))*BANK_MORE)/BANK_LESS));
			}
		turn base to z-axis banking_angle speed BANK_DAMP_SPEED;
		past_xz=present_xz;
		sleep BANK_REFRESH;
	}
}

Create()
{
	Set ARMORED to 1;
	gun_1 = 0;
	start-script SmokeUnit();

	start-script BankClerck();
	set ACTIVATION to TRUE;
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from w1;
		emit-sfx 256 | 3 from w2;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

RestoreAfterDelay()
{
	signal SIG_R;
	set-signal-mask SIG_R;
	sleep 15000;
	turn turret1 to y-axis <0.000000> speed <80.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <80.016484>;
	wait-for-turn turret1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if ( gun_1 == 0 )
	{
		move sleeve1a to z-axis [-3.000000] speed [200.000000];
//		emit-sfx 256 | 3 from flare1a;
		sleep 150;
		move sleeve1a to z-axis [0.000000] speed [3.000000];
	}	
	if ( gun_1 == 1 )
	{
		move sleeve1b to z-axis [-3.000000] speed [200.000000];
//		emit-sfx 256 | 3 from flare1b;
		sleep 150;
		move sleeve1b to z-axis [0.000000] speed [3.000000];
	}	
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return(1);
}	
	
FireTertiary()
{	
	sleep 100;
}
		

AimFromTertiary(piecenum)
{
	piecenum = base;
}


QueryTertiary(piecenum)
{
	piecenum = blast;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve1a type BITMAPONLY | BITMAP1;
		explode sleeve1b type BITMAPONLY | BITMAP1;
		explode wings type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve1a type BITMAPONLY | BITMAP1;
		explode sleeve1b type BITMAPONLY | BITMAP1;
		explode wings type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve1a type BITMAPONLY | BITMAP1;
		explode sleeve1b type BITMAPONLY | BITMAP1;
		explode wings type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve1a type BITMAPONLY | BITMAP1;
	explode sleeve1b type BITMAPONLY | BITMAP1;
	explode wings type BITMAPONLY | BITMAP5;
}
