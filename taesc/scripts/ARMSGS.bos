#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  r1, r2, r3, r4, r5, r6, base, body, fusion, dome, bits, engines,
	   pivot1, wing1, pivot2, wing2, pivot3, wing3, pivot4, wing4, 
	   wingthrust1, wingthrust2, wingthrust3, wingthrust4, vlaunch, naughty;

static-var  statechg_DesiredState, statechg_StateChanging, gun_3, flying, dontfire, landed;

// Signal definitions
#define SIG_AIM3				2

OffScreenCheck(base_xz, base_x, base_z, ground, heading)
{
	while (flying)
	{
		signal 4;
		base_xz = get PIECE_XZ(base);
		base_x = base_xz / 65536;
		base_z = base_xz - base_x * 65536;
		ground = get GROUND_HEIGHT(get PIECE_XZ(base));
		if (base_z < 88 OR ground < 0) 
		{
			++dontfire;
			if (dontfire >= 60)
			{
				dontfire=60;
			}
		}
		if (base_z > 88 OR ground >= 0)
		{
			if (dontfire >= 1)								//3 second grace period - set to 4 if used, 1 if not
			{
				show naughty;
				set ACTIVATION to 0;
			}
//			if ((dontfire >= 1) && (dontfire < 4))			//This provides a warning, comment out if not used
//			{
//				show naughty;
//				sleep 250;
//				hide naughty;
//			}
		}	
		if (base_z > 88 && ground >= 0)
		{
			--dontfire;
			if (dontfire >= 1)								//set to 4 if warning used, 1 if not
			{
				show naughty;
				set ACTIVATION to 0;
			}
			if (dontfire <= 0)								//set to 3 if warning used, 0 if not
			{
				dontfire=0;
				hide naughty;
				set ACTIVATION to 100;
				if (landed >= 1)
				{	
					set ACTIVATION to 0;
				}	
			}
		}
		sleep 1000;
	}
}

activatescr()
{
	if( TRUE )
	{
		flying=1;
		start-script OffScreenCheck();
		
//		turn pivot1 to x-axis <0> now;
//		turn pivot2 to x-axis <0> now;
//		turn pivot3 to x-axis <0> now;
//		turn pivot4 to x-axis <0> now;
		
		turn pivot1 to x-axis <90> speed <38.945055>;
		turn pivot2 to x-axis <90> speed <38.945055>;
		turn pivot3 to x-axis <90> speed <38.945055>;
		turn pivot4 to x-axis <90> speed <38.945055>;
		
		turn wing1 to x-axis <-90> speed <18.945055>;
		turn wing2 to x-axis <-90> speed <18.945055>;
		turn wing3 to x-axis <-90> speed <18.945055>;
		turn wing4 to x-axis <-90> speed <18.945055>;
		
		sleep 99;
	}
	sleep 60;
}

deactivatescr()
{
	if( TRUE )
	{
		if (dontfire <= 0)								//set to 3 if warning used, 0 if not
		{	
			flying=0;
		}
//		turn pivot1 to x-axis <90> now;
//		turn pivot2 to x-axis <90> now;
//		turn pivot3 to x-axis <90> now;
//		turn pivot4 to x-axis <90> now;
		
		turn pivot1 to x-axis <0> speed <38.945055>;
		turn pivot2 to x-axis <0> speed <38.945055>;
		turn pivot3 to x-axis <0> speed <38.945055>;
		turn pivot4 to x-axis <0> speed <38.945055>;
		
		turn wing1 to x-axis <0> speed <18.945055>;
		turn wing2 to x-axis <0> speed <18.945055>;
		turn wing3 to x-axis <0> speed <18.945055>;
		turn wing4 to x-axis <0> speed <18.945055>;
		
		sleep 99;
		
//		flying=0;
	}
	sleep 60;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dontfire=0;
	landed=0;
	dont-cache naughty;
	move naughty to y-axis  [12] now;
	hide naughty;
	
	gun_3 = 0;
	
	call-script InitState();
	
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 1000;
	}
	
	start-script SmokeUnit();
}

Activate()
{
	if (dontfire >= 1)
	{
		set ACTIVATION to 0;
	}	
	
	set ARMORED to 1;
	landed = 0;
	start-script RequestState(0);
	
}

Deactivate()
{
	if (dontfire <= 0)								//set to 3 if warning used, 0 if not
	{	
		start-script RequestState(1);
	}
	if (flying == 0)
	{
		landed = 1;
	}
	set ARMORED to 0;
}

RestoreAfterDelay()
{
	sleep 3000;
//	turn thrusters to x-axis <90> speed <38.945055>;
//	turn body to x-axis <0> speed <38.945055>;
}

/*
FirePrimary()
{
	gun_1 = !gun_1;
	turn body to x-axis <30> speed <38.945055>;
	
}
*/


AimPrimary(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	while (dontfire OR landed)
	{
		sleep 250;
	}	
	return (1);
}


FirePrimary()
{

	if( gun_3 == 0 )
	{
		explode r1 type BITMAPONLY | BITMAP5;
	}
	if( gun_3 == 1 )
	{
		explode r2 type BITMAPONLY | BITMAP5;
	}
	if( gun_3 == 2 )
	{
		explode r3 type BITMAPONLY | BITMAP5;
	}
	if( gun_3 == 3 )
	{
		explode r4 type BITMAPONLY | BITMAP5;
	}
	if( gun_3 == 4 )
	{
		explode r5 type BITMAPONLY | BITMAP5;
	}
	if( gun_3 == 5 )
	{
		explode r6 type BITMAPONLY | BITMAP5;
	}
	++gun_3;
	if (gun_3 == 6)
	{
		gun_3 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}


QueryPrimary(piecenum)
{
	if (gun_3 == 0)
	{
		piecenum = r1;
	}
	if (gun_3 == 1)
	{
		piecenum = r2;
	}
	if (gun_3 == 2)
	{
		piecenum = r3;
	}
	if (gun_3 == 3)
	{
		piecenum = r4;
	}
	if (gun_3 == 4)
	{
		piecenum = r5;
	}
	if (gun_3 == 5)
	{
		piecenum = r6;
	}
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		explode wingthrust1 type BITMAPONLY | BITMAP1;
		explode wingthrust2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type SHATTER | BITMAP5;
		explode wing2 type SHATTER | BITMAP1;
		explode wingthrust1 type FALL | BITMAP1;
		explode wingthrust2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type SHATTER | BITMAP5;
		explode wing2 type SHATTER | BITMAP1;
		explode wingthrust1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wingthrust2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wingthrust1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wingthrust2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
