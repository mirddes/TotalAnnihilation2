#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  base, mainhull, t1, t1a, t2, t2a, t3, t3a, t4, t4a, shad1, shad2, shad3, shad4,
//	   turret, sleeve, turretfront, rleeve1, rail1, rlare1, rleeve2, rail2, rlare2, glowy, attach ;

piece  flare1, flare2, base, body, turret, sleeve, barrel1, barrel2, glow, flash, forkus ;


static-var  restore_delay, firing, firedelay ;

// Signal definitions
#define SIG_AIM				2
#define SIG_ACTIVATE 		4

#define SIG_MOVE 			32

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	signal 4;
	set-signal-mask 4;
	//start-script emgshield();
	anglex=anglex/3;
	anglez=anglez/3;
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

/*
HitByWeapon(anglex, anglez)
{
	signal 4;
	set-signal-mask 4;
	//start-script emgshield();
	anglex=anglex/3;
	anglez=anglez/3;
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}
*/

Create()
{
	set ARMORED to 1;
	set ACTIVATION to 100;
//	hide forkus;
	hide flash;
	hide flare1;
	hide flare2;
	
	dont-cache flare1;
	dont-cache flare2;
	
	firedelay = 11850;
	firing = 0;
	
	
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 1000;
	}
	
	start-script SmokeUnit();
	
	dont-cache glow;
	
	
}

Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	spin forkus around z-axis speed <60.021978>;
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	turn forkus to z-axis <0.000000> speed <100.000000>;
	wait-for-turn forkus around y-axis;
}	

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}


StopMoving()
{
	signal SIG_MOVE;
}

RestoreAfterDelay()
{
	sleep 16000;
	turn turret to y-axis <0.000000> speed <40.000000>;
	turn sleeve to x-axis <0.000000> speed <32.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <80.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <64.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	while( firing )
	{
		sleep 50;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	firing = 1;
	
	cache glow;
	
	explode flare1 type BITMAPONLY | BITMAP5;
	explode flare2 type BITMAPONLY | BITMAP5;
	move barrel1 to z-axis [-3.000000] speed [500.000000];
	move barrel2 to z-axis [-3.000000] speed [500.000000];
	sleep 150;
	wait-for-move barrel1 along z-axis;
	wait-for-move barrel2 along z-axis;
	move barrel1 to z-axis [0.000000] speed [4.000000];
	move barrel2 to z-axis [0.000000] speed [4.000000];
	
	sleep firedelay;
	firing = 0;
	
	dont-cache glow;
}


QueryPrimary(piecenum)
{
	piecenum = flash;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type SHATTER | BITMAP1;
		explode turret type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
