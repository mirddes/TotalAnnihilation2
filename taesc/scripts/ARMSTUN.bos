#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, generator, towers, tower1, turret1, barrels1, flash1a, flash1b,
	   tower2, turret2, barrels2, flash2a, flash2b, tower3, turret3, barrels3, flash3a, flash3b ;

static-var  gun_1, gun_2, gun_3 ;
static-var	shield_on, charge_on, nbr_charge, nbr_shield, dome_on, nbr_dome; 
static-var  firedelay, firing_1, firing_2, firing_3;


// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_R				16

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

#include "sfxtype.h"
#include "exptype.h"


// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_charge = 0;
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;
		
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_CHARGE)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						
						if (distance > MOBILE_RADIUS_6)			//60-90 seconds
						{
							shgen_count = 0;
						}
						if (distance <= MOBILE_RADIUS_6)		//60 seconds
						{
							shgen_count = 5;
						}
						if (distance <= MOBILE_RADIUS_5)		//45 seconds
						{
							shgen_count = 4;
						}
						if (distance <= MOBILE_RADIUS_4)		//30 seconds
						{
							shgen_count = 3;
						}
						if (distance <= MOBILE_RADIUS_3)		//15 seconds
						{
							shgen_count = 2;
						}
						if (distance <= BOOST_RADIUS)
						{
							shgen_count = 1;
							++nbr_charge;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_charge>=2)
		{
			if(!charge_on)
			{
				charge_on = 1;
				sleep 50;
				firedelay = 0;
			}
		}
		if(nbr_charge<2)
		{
			if(charge_on)
			{
				charge_on = 0;
				sleep 50;
				firedelay = 1350;
			}
		}	
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	nbr_charge = 0;
	nbr_shield = 0;
	nbr_dome = 0;
	
	charge_on = 0;
	shield_on = 0;
	dome_on = 0;
	
	firedelay = 1350;
	firing_1 = 0;
	firing_2 = 0;
	firing_3 = 0;
	
	set ARMORED to 0;
	
	hide flash1a;
	hide flash1b;
	hide flash2a;
	hide flash2b;
	hide flash3a;
	hide flash3b;
	dont-cache flash1a;
	dont-cache flash1b;
	dont-cache flash2a;
	dont-cache flash2b;
	dont-cache flash3a;
	dont-cache flash3b;
	
//	dont-shade generator;
	
	dont-cache turret1;
	dont-cache turret2;
	dont-cache turret2;
	
	dont-cache barrels1;
	dont-cache barrels2;
	dont-cache barrels3;
	
	gun_1 = 0;
	gun_2 = 2;
	gun_3 = 4;

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
}



AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <200.000000>;
	turn barrels1 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn barrels1 around x-axis;
	while( firing_1 )
	{
//		sleep firedelay;
//		wait-for-turn turret1 around y-axis;
//		wait-for-turn barrels1 around x-axis;
//		firing_1 = 0;
		sleep 50;
	}
	return (1);
}

FirePrimary()
{
//	firing_1 = 1;
	if( gun_1 == 0 )
	{
		firing_1 = 1;
		show flash1a;
		sleep 150;
		hide flash1a;
		sleep firedelay;
		firing_1 = 0;
		
	}
	if( gun_1 == 1 )
	{
		firing_1 = 1;
		show flash1b;
		sleep 150;
		hide flash1b;
		sleep firedelay;
		firing_1 = 0;
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flash1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flash1b;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}


AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <200.000000>;
	turn barrels2 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn barrels2 around x-axis;
	while( firing_2 )
	{
//		sleep firedelay;
//		wait-for-turn turret2 around y-axis;
//		wait-for-turn barrels2 around x-axis;
//		firing_2 = 0;
		sleep 50;
	}
	return (1);
}

FireSecondary()
{
//	firing_2 = 1;
	if( gun_2 == 2 )
	{
		firing_2 = 1;
		show flash2a;
		sleep 150;
		hide flash2a;
		sleep firedelay;
		firing_2 = 0;
	}
	if( gun_2 == 3 )
	{
		firing_2 = 1;
		show flash2b;
		sleep 150;
		hide flash2b;
		sleep firedelay;
		firing_2 = 0;
	}
	++gun_2;
	if( gun_2 == 4 )
	{
		gun_2 = 2;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 2 )
	{
		piecenum = flash2a;
	}
	if( gun_2 == 3 )
	{
		piecenum = flash2b;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}


AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <200.000000>;
	turn barrels3 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn barrels3 around x-axis;
	while( firing_3 )
	{
//		sleep firedelay;
//		wait-for-turn turret3 around y-axis;
//		wait-for-turn barrels3 around x-axis;
//		firing_3 = 0;
		sleep 50;
	}
	return (1);
}

FireTertiary()
{
//	firing_3 = 1;
	if( gun_3 == 4 )
	{
		firing_3 = 1;
		show flash3a;
		sleep 150;
		hide flash3a;
		sleep firedelay;
		firing_3 = 0;
	}
	if( gun_3 == 5 )
	{
		firing_3 = 1;
		show flash3b;
		sleep 150;
		hide flash3b;
		sleep firedelay;
		firing_3 = 0;
	}
	++gun_3;
	if( gun_3 == 6 )
	{
		gun_3 = 4;
	}
}

QueryTertiary(piecenum)
{
	if( gun_3 == 4 )
	{
		piecenum = flash3a;
	}
	if( gun_3 == 5 )
	{
		piecenum = flash3b;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turret3;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flash1a;
	hide flash2b;
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flash1a type FALL | BITMAP1;
		explode flash2b type FALL | BITMAP1;
		explode barrels3 type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flash1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flash2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrels3 type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flash1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flash2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrels3 type BITMAPONLY | BITMAP1;
	explode turret1 type BITMAPONLY | EXPLODE_ON_HIT | BITMAP5;
}
