#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  ground, base, lid1, lid2, lid3, lid4, bubble1, bubble2,
       bubble3, bubble4, bubble5, housing, dome, building, pipe1, pipe2,
       pipe3, pipe4, pipe5, stack1, stack2, bubble6, bubble7, arm1, arm2;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging ;
static-var	metal_on, nbr_metal ;

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_metal = 0;
		
		shgen_count = 0;
		
		for (shgen_id = min; shgen_id < max; ++shgen_id)
		{
			if((!get UNIT_ALLIED(shgen_ID)) == 1)
			{
				h = get UNIT_HEIGHT(shgen_id);
				if(h == 13600954 || 11848867 )
				{
					shgen_count = 1;
				}
				break;
			}
		}
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((!get UNIT_ALLIED(unit_ID)) == 1)	
			{	
				if(get UNIT_HEIGHT(unit_id)==METAL_UPGRADE_HEIGHT)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==100)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						{
							++nbr_metal;
						}
					}
				}
			}
		}	
		if(nbr_metal>=1)
		{
			if(!metal_on)
			{
				metal_on = 1;
				set ACTIVATION to 0;
				sleep 50;
			}
		}
		if(nbr_metal==0)
		{
			if(metal_on)
			{
				metal_on = 0;
				set ACTIVATION to 1;
				sleep 50;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	


activatescr()
{
	if( TRUE )
	{
		emit-sfx 259 from bubble3;
		turn lid2 to x-axis <0.598901> now;
		turn lid2 to x-axis <30.005495> speed <19.000000>;
		turn lid3 to x-axis <0.598901> now;
		turn lid3 to x-axis <-26.005495> speed <17.000000>;
		sleep 772;
		emit-sfx 259 from bubble2;
		emit-sfx 259 from bubble4;
		sleep 772;
	}
	if( TRUE )
	{
		emit-sfx 259 from bubble1;
		emit-sfx 259 from bubble5;
		turn lid1 to x-axis <35.005495> speed <22.000000>;
		turn lid4 to x-axis <-30.005495> speed <19.000000>;
		turn lid2 to x-axis <60.010989> speed <19.000000>;
		turn lid3 to x-axis <-74.016484> speed <30.000000>;
		sleep 574;
	}
	if( TRUE )
	{
		turn dome to x-axis <0.000000> now;
		turn dome to x-axis <180.043956> speed <112.000000>;
	}
	sleep 774;
}

deactivatescr()
{
	if( TRUE )
	{
		turn dome to x-axis <180.280220> now;
		turn dome to x-axis <0.000000> speed <112.000000>;
		sleep 387;
	}
	if( TRUE )
	{
		turn lid1 to x-axis <35.263736> now;
		turn lid4 to x-axis <-30.406593> now;
		turn lid2 to x-axis <60.813187> now;
		turn lid3 to x-axis <-74.197802> now;
		sleep 683;
	}
	if( TRUE )
	{
		turn lid1 to x-axis <0.000000> speed <25.000000>;
		turn lid4 to x-axis <0.000000> speed <22.000000>;
		turn lid2 to x-axis <30.005495> speed <22.000000>;
		turn lid3 to x-axis <-26.005495> speed <34.000000>;
		sleep 1374;
	}
	if( TRUE )
	{
		turn lid2 to x-axis <0.000000> speed <21.000000>;
		turn lid3 to x-axis <0.000000> speed <20.000000>;
		sleep 684;
	}
	sleep 688;
}

BubbleStacks()
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		emit-sfx 259 from bubble6;
		emit-sfx 259 from bubble7;
		sleep 1000;
	}
}

Go()
{
	if(metal_on)
	{
		set ACTIVATION to 0;
	}
	if( Static_Var_1 )
	{
		set ACTIVATION to 0;
	}
	dont-cache lid1;
	dont-cache lid2;
	dont-cache lid3;
	dont-cache lid4;
	call-script activatescr();
	dont-cache dome;
	start-script BubbleStacks();
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	signal 4;
	call-script deactivatescr();
	cache dome;
	cache lid1;
	cache lid2;
	cache lid3;
	cache lid4;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}




Create()
{
	nbr_metal = 0;
	metal_on = 0;
	
	set ARMORED to 0;
	
	dont-shade base;
	
	dont-shade lid1;
	dont-shade lid2;
	dont-shade lid3;
	dont-shade lid4;
	dont-shade dome;
	
	dont-shade building;
	dont-shade pipe1;
	dont-shade pipe2;
	dont-shade pipe3;
	
	dont-shade pipe4;
	dont-shade pipe5;
	
	call-script InitState();
	Static_Var_1 = 0;
	sleep 1;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
//	start-script detect();
	set ARMORED to 1;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode lid1 type BITMAPONLY | BITMAP1;
		explode lid2 type BITMAPONLY | BITMAP1;
		explode lid3 type BITMAPONLY | BITMAP5;
		explode lid4 type BITMAPONLY | BITMAP1;
		explode housing type BITMAPONLY | BITMAP1;
		explode dome type BITMAPONLY | BITMAP1;
		explode building type BITMAPONLY | BITMAP1;
		explode stack1 type BITMAPONLY | BITMAP1;
		explode stack2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode lid1 type FALL | BITMAP1;
		explode lid2 type FALL | BITMAP1;
		explode lid3 type FALL | BITMAP5;
		explode lid4 type FALL | BITMAP1;
		explode housing type BITMAPONLY | BITMAP1;
		explode dome type BITMAPONLY | BITMAP1;
		explode building type BITMAPONLY | BITMAP1;
		explode stack1 type BITMAPONLY | BITMAP1;
		explode stack2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode lid1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lid2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lid3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lid4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode housing type BITMAPONLY | BITMAP1;
		explode dome type BITMAPONLY | BITMAP1;
		explode building type BITMAPONLY | BITMAP1;
		explode stack1 type BITMAPONLY | BITMAP1;
		explode stack2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode lid1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lid2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lid3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lid4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode housing type BITMAPONLY | BITMAP1;
	explode dome type BITMAPONLY | BITMAP1;
	explode building type BITMAPONLY | BITMAP1;
	explode stack1 type BITMAPONLY | BITMAP1;
	explode stack2 type BITMAPONLY | BITMAP5;
}
