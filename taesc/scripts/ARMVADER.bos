#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  leg1, leg2, leg3, leg4, base, wake1;

static-var  bMoving, statechg_DesiredState, statechg_StateChanging, Static_Var_3;


walkscr()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to z-axis <0.000000> now;
			turn leg1 to z-axis <-38.005495> speed <262.000000>;
			turn leg2 to y-axis <55.351648> now;
			turn leg2 to y-axis <55.010989> speed <0.000000>;
			turn leg2 to z-axis <38.247253> now;
			turn leg2 to z-axis <0.000000> speed <262.000000>;
			turn leg3 to y-axis <0.000000> now;
			turn leg3 to y-axis <60.010989> speed <413.000000>;
			turn leg3 to z-axis <37.796703> now;
			turn leg4 to y-axis <-60.302198> now;
			turn leg4 to y-axis <0.000000> speed <413.000000>;
			turn leg4 to z-axis <0.000000> now;
			turn leg4 to z-axis <0.000000> speed <0.000000>;
			sleep 146;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <-55.010989> speed <377.000000>;
			turn leg1 to z-axis <-38.005495> speed <0.000000>;
			turn leg2 to y-axis <0.000000> speed <377.000000>;
			turn leg2 to z-axis <0.000000> speed <0.000000>;
			turn leg3 to z-axis <0.000000> speed <258.000000>;
			turn leg4 to z-axis <-38.005495> speed <261.000000>;
			sleep 147;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <-55.010989> speed <0.000000>;
			turn leg1 to z-axis <0.000000> speed <262.000000>;
			turn leg2 to z-axis <38.005495> speed <262.000000>;
			turn leg3 to y-axis <0.000000> speed <413.000000>;
			turn leg3 to z-axis <0.000000> speed <0.000000>;
			turn leg4 to y-axis <-60.010989> speed <413.000000>;
			turn leg4 to z-axis <-38.005495> speed <0.000000>;
			sleep 146;
		}
		turn leg1 to y-axis <0.000000> speed <377.000000>;
		turn leg1 to z-axis <0.000000> speed <0.000000>;
		turn leg2 to y-axis <55.010989> speed <377.000000>;
		turn leg2 to z-axis <38.005495> speed <0.000000>;
		turn leg3 to z-axis <37.005495> speed <258.000000>;
		turn leg4 to y-axis <-60.010989> speed <0.000000>;
		turn leg4 to z-axis <0.000000> speed <261.000000>;
		sleep 147;
	}
}

activatescr()
{
	if( TRUE )
	{
		sleep 770;
	}
	sleep 20;
}

deactivatescr()
{
	if( TRUE )
	{
		sleep 570;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walkscr();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}

EmitSFX()
{
	while( TRUE )
	{
		if( bMoving )
		{
			if( Static_Var_3 == 3 )
			{
				emit-sfx 259 from wake1;
			}
		}
		sleep 250;
	}
}

Create()
{
	Static_Var_3 = 4;
	bMoving = FALSE;
	call-script InitState();
		while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script MotionControl();
	start-script SmokeUnit();
	start-script EmitSFX();
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = leg1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type BITMAPONLY | BITMAP1;
		explode leg2 type BITMAPONLY | BITMAP1;
		explode leg3 type BITMAPONLY | BITMAP1;
		explode leg4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type SHATTER | BITMAP1;
		explode leg2 type FALL | BITMAP1;
		explode leg3 type FALL | BITMAP1;
		explode leg4 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type SHATTER | BITMAP1;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode leg1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
