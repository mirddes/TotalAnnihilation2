#define TA

#include "sfxtype.h"
#include "exptype.h"


piece 	flare1a, flare1b, flare2a, flare2b, flare3a, flare3b, flare4a, flare4b, 
		r1, r2, r3, r4, r5, r6, 
		base, body, pipes, props, dome, bits, 
		front1, front1b, front2, front2b, rear1, rear1b, rear2, rear2b, vlaunch, 
		ltur1, lslv1, lbar1a, lbar1b, ltur2, lslv2, lbar2a, lbar2b, 
		ltur3, lslv3, lbar3a, lbar3b, ltur4, lslv4, lbar4a, lbar4b,  
		radar, land1, land2, land3, land4,		
		tracks, tracks_animated, tracks_reverse, tracks_move, beam1, beam2; 
		

static-var Static_Var_2, is_moving, gun_1, gun_3, salvo_1, spray, firing, firedelay, firing_3, firedelay_3;


#define SIG_AIM 	2
#define SIG_AIM2 	4
#define SIG_AIM3 	8



track_tracks()
{
	var pre;
	var now;
	pre = get XZ_ATAN(-419);
	var dif;
	
	var preang;
	var prepos;
	var ang;
	var pos;
	
	preang = get XZ_ATAN(-419);
	prepos = get PIECE_XZ(base);
	
	var counter;
	var g;
	
	counter = 0;

	while(1)
	{
		now = get XZ_ATAN(-419);
		dif = pre - now;
		if(dif > <2>)
		{
			hide tracks_reverse;
			hide tracks_move;
			show tracks_animated;
		}
		if(dif < <-2>)
		{
			show tracks_reverse;
			hide tracks_move;
			hide tracks_animated;
		}
		if(dif <= <2> && dif >= <-2>)
		{
			hide tracks_reverse;
			show tracks_move;
			hide tracks_animated;
		}
/*
		if( is_moving && amphib == 3)
		{
			emit-sfx 259 from w1;
			emit-sfx 259 from w2;
			emit-sfx 259 from w3;
			emit-sfx 259 from w4;
		}
		if( is_moving && amphib == 2)
		{
			emit-sfx 259 from w1;
			emit-sfx 259 from w2;
			emit-sfx 259 from w3;
			emit-sfx 259 from w4;
		}
		if( is_moving && amphib == 1)
		{
			emit-sfx 259 from w1;
			emit-sfx 259 from w2;
			emit-sfx 259 from w3;
			emit-sfx 259 from w4;
		}
*/
		ang = get XZ_ATAN(-419);
		pos = get PIECE_XZ(base);
		
		is_moving = 0;
		
		if (ang != preang)
		{
			is_moving = 1;
		}
		if(pos != prepos)
		{
			is_moving = 1;
		}
		if(is_moving)
		{
			dont-cache tracks_animated;
			dont-cache tracks_reverse;
			dont-cache tracks_move;
		}
		if(!is_moving)
		{
			Cache tracks_animated;
			cache tracks_reverse;
			cache tracks_move;
		}
		sleep 200;
		prepos = pos;
		preang = ang;
		pre = now;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	set ARMORED to 1;
	
	turn ltur4 to y-axis <180.000000> now; 
		
//	hide blast;
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	hide flare3a;
	hide flare3b;
	hide flare4a;
	hide flare4b;
	
	dont-cache flare1a;
	dont-cache flare1b;
	dont-cache flare2a;
	dont-cache flare2b;
	dont-cache flare3a;
	dont-cache flare3b;
	dont-cache flare4a;
	dont-cache flare4b;
		
	is_moving=0;
	
	set ARMORED to 1;
	Static_Var_2 = 1;
	spray = 0;
	
	gun_1 = 0;
	gun_3 = 8;

	salvo_1 = 14;
	
	firedelay = 2000;
	firing = 0;
	
	firedelay_3 = 250;
	firing_3 = 0;
	
	set ACTIVATION to TRUE;
		
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 100;
	}
	
	hide tracks_reverse;
	hide tracks_move;

	start-script SmokeUnit();
	start-script track_tracks();
}

Activate()
{
	set INBUILDSTANCE to 1;
	spin radar around y-axis speed <60.005495>;
}

Deactivate()
{
	set INBUILDSTANCE to 0;
	stop-spin radar around y-axis;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
{
	Func_Var_1 = 46;
	Func_Var_2 = 47;
	Func_Var_3 = 48;
	Func_Var_4 = 49;
	var Func_Var_5, Func_Var_6;
	++Static_Var_2;
	if( Static_Var_2 >= 5 )
	{
		Static_Var_2 = 1;
	}
	Func_Var_5 = 1;
	while( Func_Var_5 <= Static_Var_2 )
	{
		Func_Var_6 = Func_Var_1;
		Func_Var_1 = Func_Var_2;
		Func_Var_2 = Func_Var_3;
		Func_Var_3 = Func_Var_4;
		Func_Var_4 = Func_Var_6;
		++Func_Var_5;
	}
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}


RestoreAfterDelay()
{
	sleep 6000;
	turn ltur1 to y-axis <0.000000> speed <180.000000>;
	turn lslv1 to x-axis <0.000000> speed <180.000000>;
	turn ltur2 to y-axis <0.000000> speed <180.000000>;
	turn lslv2 to x-axis <0.000000> speed <180.000000>;
	turn ltur3 to y-axis <0.000000> speed <180.000000>;
	turn lslv3 to x-axis <0.000000> speed <180.000000>;
	turn ltur4 to y-axis <180.000000> speed <180.000000>;
	turn lslv4 to x-axis <0.000000> speed <180.000000>;
}


AimTertiary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	if( salvo_1 == 14 )
	{
		turn ltur1 to y-axis heading speed <720>;
		turn lslv1 to x-axis <0.000000> - pitch speed <720.000000>;
	}
	if( salvo_1 == 15 )
	{
		turn ltur2 to y-axis heading speed <720>;
		turn lslv2 to x-axis <0.000000> - pitch speed <720.000000>;
	}
	if( salvo_1 == 16 )
	{
		turn ltur3 to y-axis heading speed <720>;
		turn lslv3 to x-axis <0.000000> - pitch speed <720.000000>;
	}
	if( salvo_1 == 17 )
	{
		turn ltur4 to y-axis heading speed <720>;
		turn lslv4 to x-axis <0.000000> - pitch speed <720.000000>;
	}
	wait-for-turn ltur1 around y-axis;
	wait-for-turn lslv1 around x-axis;
	wait-for-turn ltur2 around y-axis;
	wait-for-turn lslv2 around x-axis;
	wait-for-turn ltur3 around y-axis;
	wait-for-turn lslv3 around x-axis;
	wait-for-turn ltur4 around y-axis;
	wait-for-turn lslv4 around x-axis;
	while( firing )
	{
		sleep 50;
	}
	Start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	var gun_1_tmp;
	gun_1_tmp = gun_1;
	++gun_1;
	if( gun_1 == 8 )
	{
		gun_1 = 0;
	}
	if( gun_1_tmp == 0 )
	{
		firing = 1;
		salvo_1 = 14; 
//		sleep 150;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1_tmp == 1 )
	{
		firing = 1;
		salvo_1 = 15; 
//		sleep 150;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1_tmp == 2 )
	{
		firing = 1;
		salvo_1 = 15; 
//		sleep 150;
		sleep firedelay;
		firing = 0;		
	}
	if( gun_1_tmp == 3 )
	{
		firing = 1;
		salvo_1 = 16; 
//		sleep 150;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1_tmp == 4 )
	{
		firing = 1;
		salvo_1 = 16; 
//		sleep 150;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1_tmp == 5 )
	{
		firing = 1;
		salvo_1 = 17; 
//		sleep 150;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1_tmp == 6 )
	{
		firing = 1;
		salvo_1 = 17; 
//		sleep 150;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1_tmp == 7 )
	{
		firing = 1;
		salvo_1 = 22; 
//		sleep 150;
		sleep firedelay;
		firing = 0;
	}
}

AimFromTertiary(piecenum)
{
	if( salvo_1 == 14 )
		piecenum = ltur1;
	if( salvo_1 == 15 )
		piecenum = ltur2;
	if( salvo_1 == 16 )
		piecenum = ltur3;
	if( salvo_1 == 17 )	
		piecenum = ltur4;
}

QueryTertiary(piecenum)
{
	if( gun_1 == 0 )
		piecenum = flare1a;
	if( gun_1 == 1 )
		piecenum = flare1b;
	if( gun_1 == 2 )
		piecenum = flare2a;
	if( gun_1 == 3 )
		piecenum = flare2b;
	if( gun_1 == 4 )
		piecenum = flare3a;
	if( gun_1 == 5 )
		piecenum = flare3b;
	if( gun_1 == 6 )
		piecenum = flare4a;
	if( gun_1 == 7 )
		piecenum = flare4b;
}





AimPrimary(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	while( firing_3 )
	{
		sleep 50;
	}
	return (1);
}

FirePrimary()
{
	if( gun_3 == 8 )
	{
		firing_3 = 1;
		explode r1 type BITMAPONLY | BITMAP5;
		sleep firedelay_3;
		firing_3 = 0;
	}
	if( gun_3 == 9 )
	{
		firing_3 = 1;
		explode r2 type BITMAPONLY | BITMAP5;
		sleep firedelay_3;
		firing_3 = 0;
	}
	if( gun_3 == 10 )
	{
		firing_3 = 1;
		explode r3 type BITMAPONLY | BITMAP5;
		sleep firedelay_3;
		firing_3 = 0;
	}
	if( gun_3 == 11 )
	{
		firing_3 = 1;
		explode r4 type BITMAPONLY | BITMAP5;
		sleep firedelay_3;
		firing_3 = 0;
	}
	if( gun_3 == 12 )
	{
		firing_3 = 1;
		explode r5 type BITMAPONLY | BITMAP5;
		sleep firedelay_3;
		firing_3 = 0;
	}
	if( gun_3 == 13 )
	{
		firing_3 = 1;
		explode r6 type BITMAPONLY | BITMAP5;
		sleep firedelay_3;
		firing_3 = 0;
	}
	++gun_3;
	if (gun_3 == 14)
	{
		gun_3 = 8;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}


QueryPrimary(piecenum)
{
	if (gun_3 == 8)
	{
		piecenum = r1;
	}
	if (gun_3 == 9)
	{
		piecenum = r2;
	}
	if (gun_3 == 10)
	{
		piecenum = r3;
	}
	if (gun_3 == 11)
	{
		piecenum = r4;
	}
	if (gun_3 == 12)
	{
		piecenum = r5;
	}
	if (gun_3 == 13)
	{
		piecenum = r6;
	}
}





/*
AimTertiary(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	return(1);
}	
	
FireTertiary()
{	
	sleep 100;
}
		

AimFromTertiary(piecenum)
{
	piecenum = base;
}


QueryTertiary(piecenum)
{
	piecenum = blast;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	hide flare3a;
	hide flare3b;
	hide flare4a;
	hide flare4b;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ltur1 type BITMAPONLY | BITMAP1;
		explode ltur2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type BITMAPONLY | BITMAP1;
		explode flare2b type BITMAPONLY | BITMAP5;
		explode lslv1 type BITMAPONLY | BITMAP1;
		explode lbar1a type BITMAPONLY | BITMAP1;
		explode lbar3b type BITMAPONLY | BITMAP5;
		explode lbar2a type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ltur1 type FALL | BITMAP1;
		explode ltur2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | BITMAP1;
		explode flare2b type FALL | BITMAP5;
		explode lslv1 type SHATTER | BITMAP1;
		explode lbar1a type FALL | BITMAP1;
		explode lbar3b type FALL | BITMAP5;
		explode lbar2a type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ltur1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode ltur2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lslv1 type SHATTER | BITMAP1;
		explode lbar1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lbar3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lbar2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode ltur1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode ltur2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lslv1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode lbar1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lbar3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lbar2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}




