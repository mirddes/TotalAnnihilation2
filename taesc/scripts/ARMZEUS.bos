#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, pelvis, flash, rthigh, lthigh, lleg, rleg, ruparm,
       luparm, lelbow, lloarm, lhand, rloarm, backgun, gun, base, rarmour, larmour;

static-var  bMoving, bAiming, Static_Var_3, Static_Var_4, restore_delay,
            statechg_DesiredState, statechg_StateChanging;

#define SIG_AIM				4

walk()
{
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] now;
		turn pelvis to x-axis <13.000000> now;
		turn rthigh to x-axis <17.219780> now;
		turn lthigh to x-axis <-48.868132> now;
		turn lleg to x-axis <32.346154> now;
		turn rleg to x-axis <17.219780> now;
		turn ruparm to x-axis <-17.923077> now;
		turn luparm to x-axis <28.126374> now;
		turn lelbow to z-axis <-10.192308> now;
		turn lloarm to x-axis <-59.769231> now;
		turn lhand to y-axis <-60.829670> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn pelvis to x-axis <9.137363> now;
		turn rthigh to x-axis <30.236264> now;
		turn lthigh to x-axis <-32.346154> now;
		turn lleg to x-axis <22.142857> now;
		turn rleg to x-axis <17.571429> now;
		turn ruparm to x-axis <-20.730769> now;
		turn luparm to x-axis <15.818681> now;
		turn lelbow to z-axis <-10.181319> now;
		turn lloarm to x-axis <-59.769231> now;
		turn lhand to y-axis <-60.824176> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.500000] now;
		turn pelvis to x-axis <6.318681> now;
		turn rthigh to x-axis <-0.335165> now;
		turn lthigh to x-axis <-22.851648> now;
		turn rleg to x-axis <63.631868> now;
		turn ruparm to x-axis <-11.598901> now;
		turn luparm to x-axis <9.137363> now;
		turn lelbow to z-axis <-10.192308> now;
		turn lloarm to x-axis <-59.769231> now;
		turn lhand to y-axis <-60.824176> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.200000] now;
		turn pelvis to x-axis <2.807692> now;
		turn rthigh to x-axis <-28.472527> now;
		turn lthigh to x-axis <-10.890110> now;
		turn rleg to x-axis <84.390110> now;
		turn ruparm to x-axis <-3.148352> now;
		turn luparm to x-axis <1.038462> now;
		turn lelbow to z-axis <-10.181319> now;
		turn lloarm to x-axis <-59.769231> now;
		turn lhand to y-axis <-60.829670> now;
		sleep 110;
	}
	if( bMoving )
	{
		turn pelvis to x-axis <0.000000> now;
		turn rthigh to x-axis <-32.346154> now;
		turn lthigh to x-axis <1.395604> now;
		turn ruparm to x-axis <4.917582> now;
		turn luparm to x-axis <1.747253> now;
		turn lloarm to x-axis <-59.769231> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.500000] now;
		turn pelvis to x-axis <4.208791> now;
		turn rthigh to x-axis <-42.895604> now;
		turn lthigh to x-axis <11.252747> now;
		turn lleg to x-axis <29.532967> now;
		turn rleg to x-axis <79.467033> now;
		turn ruparm to x-axis <8.076923> now;
		turn luparm to x-axis <-8.428571> now;
		turn lelbow to z-axis <-10.192308> now;
		turn lloarm to x-axis <-59.769231> now;
		turn lhand to y-axis <-60.824176> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.450000] now;
		turn pelvis to x-axis <13.000000> now;
		turn rthigh to x-axis <-48.868132> now;
		turn lthigh to x-axis <12.291209> now;
		turn lleg to x-axis <28.824176> now;
		turn rleg to x-axis <32.697802> now;
		turn ruparm to x-axis <15.461538> now;
		turn luparm to x-axis <-18.280220> now;
		turn lelbow to z-axis <-10.181319> now;
		turn lloarm to x-axis <-59.769231> now;
		turn lhand to y-axis <-60.829670> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn pelvis to x-axis <9.137363> now;
		turn rthigh to x-axis <-33.758242> now;
		turn lthigh to x-axis <3.148352> now;
		turn lleg to x-axis <47.818681> now;
		turn ruparm to x-axis <20.741758> now;
		turn luparm to x-axis <-7.027473> now;
		turn lelbow to z-axis <-10.181319> now;
		turn lloarm to x-axis <-59.769231> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.500000] now;
		turn pelvis to x-axis <6.318681> now;
		turn rthigh to x-axis <-25.664835> now;
		turn lthigh to x-axis <-11.598901> now;
		turn lleg to x-axis <66.456044> now;
		turn ruparm to x-axis <11.252747> now;
		turn luparm to x-axis <4.917582> now;
		turn lelbow to z-axis <-10.181319> now;
		turn lloarm to x-axis <-59.769231> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.200000] now;
		turn pelvis to x-axis <2.807692> now;
		turn rthigh to x-axis <-15.109890> now;
		turn lthigh to x-axis <-27.071429> now;
		turn ruparm to x-axis <2.456044> now;
		turn luparm to x-axis <14.758242> now;
		turn lelbow to z-axis <-10.192308> now;
		turn lloarm to x-axis <-59.769231> now;
		turn lhand to y-axis <-60.824176> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	if( bMoving )
	{
		turn pelvis to x-axis <0.000000> now;
		turn rthigh to x-axis <2.098901> now;
		turn lthigh to x-axis <-34.104396> now;
		turn lleg to x-axis <68.565934> now;
		turn ruparm to x-axis <-0.346154> now;
		turn luparm to x-axis <23.554945> now;
		turn lelbow to z-axis <-10.192308> now;
		turn lloarm to x-axis <-59.769231> now;
		turn lhand to y-axis <-60.829670> now;
		turn rloarm to x-axis <-45.708791> now;
		sleep 110;
	}
	move pelvis to y-axis [-0.400000] now;
	turn pelvis to x-axis <4.208791> now;
	turn rthigh to x-axis <11.252747> now;
	turn lthigh to x-axis <-44.296703> now;
	turn lleg to x-axis <75.593407> now;
	turn ruparm to x-axis <-8.076923> now;
	turn luparm to x-axis <26.362637> now;
	turn lelbow to z-axis <-10.181319> now;
	turn rloarm to x-axis <-45.708791> now;
	sleep 110;
}

walklegs()
{
	if( bMoving )
	{
		move pelvis to y-axis [-0.300000] now;
		turn pelvis to x-axis <13.000000> now;
		turn rthigh to x-axis <17.219780> now;
		turn lthigh to x-axis <-48.868132> now;
		turn lleg to x-axis <32.346154> now;
		turn rleg to x-axis <17.219780> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn pelvis to x-axis <9.137363> now;
		turn rthigh to x-axis <30.236264> now;
		turn lthigh to x-axis <-32.346154> now;
		turn lleg to x-axis <22.142857> now;
		turn rleg to x-axis <17.571429> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.500000] now;
		turn pelvis to x-axis <6.318681> now;
		turn rthigh to x-axis <-0.335165> now;
		turn lthigh to x-axis <-22.851648> now;
		turn rleg to x-axis <63.631868> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.200000] now;
		turn pelvis to x-axis <2.807692> now;
		turn rthigh to x-axis <-28.472527> now;
		turn lthigh to x-axis <-10.890110> now;
		turn rleg to x-axis <84.390110> now;
		sleep 110;
	}
	if( bMoving )
	{
		turn pelvis to x-axis <0.000000> now;
		turn rthigh to x-axis <-32.346154> now;
		turn lthigh to x-axis <1.395604> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.500000] now;
		turn pelvis to x-axis <4.208791> now;
		turn rthigh to x-axis <-42.895604> now;
		turn lthigh to x-axis <11.252747> now;
		turn lleg to x-axis <29.532967> now;
		turn rleg to x-axis <79.467033> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.450000] now;
		turn pelvis to x-axis <13.000000> now;
		turn rthigh to x-axis <-48.868132> now;
		turn lthigh to x-axis <12.291209> now;
		turn lleg to x-axis <28.824176> now;
		turn rleg to x-axis <32.697802> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.200000] now;
		turn pelvis to x-axis <9.137363> now;
		turn rthigh to x-axis <-33.758242> now;
		turn lthigh to x-axis <3.148352> now;
		turn lleg to x-axis <47.818681> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.500000] now;
		turn pelvis to x-axis <6.318681> now;
		turn rthigh to x-axis <-25.664835> now;
		turn lthigh to x-axis <-11.598901> now;
		turn lleg to x-axis <66.456044> now;
		sleep 110;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.200000] now;
		turn pelvis to x-axis <2.807692> now;
		turn rthigh to x-axis <-15.109890> now;
		turn lthigh to x-axis <-27.071429> now;
		sleep 110;
	}
	if( bMoving )
	{
		turn pelvis to x-axis <0.000000> now;
		turn rthigh to x-axis <2.098901> now;
		turn lthigh to x-axis <-34.104396> now;
		turn lleg to x-axis <68.565934> now;
		sleep 110;
	}
	move pelvis to y-axis [-0.400000] now;
	turn pelvis to x-axis <4.208791> now;
	turn rthigh to x-axis <11.252747> now;
	turn lthigh to x-axis <-44.296703> now;
	turn lleg to x-axis <75.593407> now;
	sleep 110;
}

drawgun()
{
	if( TRUE )
	{
		turn ruparm to x-axis <-17.923077> now;
		turn luparm to x-axis <-36.565934> now;
		turn lloarm to z-axis <22.142857> now;
		turn lhand to y-axis <-43.939560> now;
		turn rloarm to x-axis <-67.851648> now;
		sleep 80;
	}
	if( TRUE )
	{
		turn ruparm to x-axis <-75.593407> now;
		turn luparm to x-axis <-36.565934> now;
		turn lloarm to z-axis <22.142857> now;
		turn lhand to y-axis <-43.939560> now;
		turn rloarm to x-axis <-92.120879> now;
		sleep 70;
	}
	if( TRUE )
	{
		turn ruparm to x-axis <-114.274725> now;
		turn luparm to x-axis <-36.565934> now;
		turn lloarm to z-axis <22.142857> now;
		turn lhand to y-axis <-43.939560> now;
		turn rloarm to x-axis <-123.417582> now;
		sleep 80;
	}
	if( TRUE )
	{
		turn lloarm to z-axis <22.142857> now;
		turn lhand to y-axis <-43.950549> now;
		turn rloarm to x-axis <-107.593407> now;
		sleep 70;
	}
	if( TRUE )
	{
		show gun;
		hide backgun;
		move luparm to z-axis [0.500000] now;
		turn luparm to x-axis <-54.500000> now;
		turn lelbow to z-axis <15.818681> now;
		turn lloarm to z-axis <20.741758> now;
		turn lhand to y-axis <0.000000> now;
		turn rloarm to x-axis <-56.598901> now;
		sleep 50;
	}
	if( TRUE )
	{
		move luparm to z-axis [1.600000] now;
		turn ruparm to x-axis <-78.769231> now;
		turn luparm to x-axis <-59.423077> now;
		turn lelbow to z-axis <24.252747> now;
		turn lloarm to z-axis <52.379121> now;
		sleep 30;
	}
	move luparm to z-axis [1.700000] now;
	move rloarm to y-axis [1.500000] now;
	turn ruparm to x-axis <2.807692> now;
	turn luparm to x-axis <-44.296703> now;
	turn lelbow to z-axis <44.648352> now;
	turn lloarm to z-axis <46.060440> now;
	turn lhand to y-axis <-260.950549> now;
	turn rloarm to x-axis <-95.280220> now;
	sleep 70;
}

holstgun()
{
	if( TRUE )
	{
		move luparm to z-axis [1.700000] now;
		move rloarm to y-axis [1.500000] now;
		turn ruparm to x-axis <2.807692> now;
		turn luparm to x-axis <-44.296703> now;
		turn lelbow to z-axis <44.648352> now;
		turn lloarm to z-axis <46.060440> now;
		turn lhand to y-axis <-260.950549> now;
		turn rloarm to x-axis <-95.280220> now;
		sleep 100;
	}
	if( TRUE )
	{
		move luparm to z-axis [1.650000] now;
		move rloarm to y-axis [0.279999] now;
		turn ruparm to x-axis <-28.472527> now;
		turn luparm to x-axis <-61.181319> now;
		turn lelbow to z-axis <34.456044> now;
		turn lloarm to z-axis <30.236264> now;
		turn lhand to y-axis <54.148352> now;
		turn rloarm to x-axis <-91.071429> now;
		sleep 80;
	}
	if( TRUE )
	{
		move luparm to z-axis [1.139996] now;
		move rloarm to y-axis [0.139996] now;
		turn ruparm to x-axis <-56.961538> now;
		turn luparm to x-axis <-53.087912> now;
		turn lelbow to z-axis <28.472527> now;
		turn lloarm to z-axis <29.873626> now;
		turn lhand to y-axis <14.758242> now;
		sleep 80;
	}
	if( TRUE )
	{
		move luparm to z-axis [0.850000] now;
		turn ruparm to x-axis <-105.483516> now;
		turn luparm to x-axis <-44.296703> now;
		turn lelbow to z-axis <24.604396> now;
		turn lhand to y-axis <-1.049451> now;
		sleep 70;
	}
	if( TRUE )
	{
		turn ruparm to x-axis <-124.115385> now;
		turn luparm to x-axis <-43.950549> now;
		turn lelbow to z-axis <17.923077> now;
		turn lhand to y-axis <-8.428571> now;
		turn rloarm to x-axis <-112.527473> now;
		sleep 70;
	}
	if( TRUE )
	{
		move luparm to z-axis [0.500000] now;
		turn ruparm to x-axis <-148.032967> now;
		turn luparm to x-axis <-42.538462> now;
		turn lelbow to z-axis <15.813187> now;
		turn lloarm to z-axis <22.840659> now;
		turn lhand to y-axis <14.758242> now;
		turn rloarm to x-axis <-129.401099> now;
		sleep 130;
	}
	if( TRUE )
	{
		show backgun;
		hide gun;
		move luparm to z-axis [0.000000] now;
		turn luparm to x-axis <-41.126374> now;
		turn lelbow to z-axis <11.252747> now;
		turn lhand to y-axis <-9.840659> now;
		turn rloarm to x-axis <-136.780220> now;
		sleep 180;
	}
	if( TRUE )
	{
		turn luparm to x-axis <-39.725275> now;
		turn lelbow to z-axis <10.181319> now;
		turn rloarm to x-axis <-102.324176> now;
		sleep 100;
	}
	if( TRUE )
	{
		turn ruparm to x-axis <-122.719780> now;
		turn luparm to x-axis <-39.016484> now;
		turn lelbow to z-axis <9.840659> now;
		turn rloarm to x-axis <-60.829670> now;
		sleep 90;
	}
	if( TRUE )
	{
		turn ruparm to x-axis <-90.021978> now;
		turn luparm to x-axis <-38.675824> now;
		turn lelbow to z-axis <7.027473> now;
		sleep 80;
	}
	if( TRUE )
	{
		turn ruparm to x-axis <-42.895604> now;
		turn luparm to x-axis <-37.263736> now;
		turn lelbow to z-axis <5.258242> now;
		sleep 80;
	}
	if( TRUE )
	{
		turn ruparm to x-axis <-23.901099> now;
		turn luparm to x-axis <-37.967033> now;
		turn lelbow to z-axis <2.807692> now;
		sleep 80;
	}
	move luparm to z-axis [0.000000] now;
	move rloarm to y-axis [0.000000] now;
	turn ruparm to x-axis <-17.923077> now;
	turn luparm to x-axis <-36.565934> now;
	turn lelbow to z-axis <0.000000> now;
	turn lloarm to z-axis <22.142857> now;
	turn lhand to y-axis <-43.939560> now;
	turn rloarm to x-axis <-67.851648> now;
	sleep 30;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	if( !Static_Var_4 )
	{
		call-script drawgun();
		Static_Var_4 = 1;
	}
}

Stop()
{
	if( Static_Var_4 )
	{
		Static_Var_4 = 0;
		call-script holstgun();
	}
	bAiming = FALSE;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [1.000000];
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	hide flash;
	
	dont-cache flash;
	
	show backgun;
	hide gun;
	
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	restore_delay = 3000;

	call-script InitState();

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn torso to y-axis <0.000000> speed <135.000000>;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_4 )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <270.000000>;
	turn gun to x-axis <0.000000> - pitch speed <135.000000>;
	wait-for-turn torso around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = torso;
}

QueryPrimary(piecenum)
{
	piecenum = flash;
}

FirePrimary()
{
	show flash;
	sleep 100;
	hide flash;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	hide flash;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode backgun type BITMAPONLY | BITMAP1;
		explode flash type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP1;
		explode lelbow type BITMAPONLY | BITMAP5;
		explode lhand type BITMAPONLY | BITMAP1;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lloarm type BITMAPONLY | BITMAP1;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode luparm type BITMAPONLY | BITMAP5;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rloarm type BITMAPONLY | BITMAP1;
		explode rthigh type BITMAPONLY | BITMAP1;
		explode ruparm type BITMAPONLY | BITMAP5;
		explode torso type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode backgun type FALL | BITMAP1;
		explode flash type FALL | BITMAP1;
		explode base type FALL | BITMAP1;
		explode gun type FALL | BITMAP1;
		explode lelbow type FALL | BITMAP5;
		explode lhand type FALL | BITMAP1;
		explode lleg type FALL | BITMAP1;
		explode lloarm type FALL | BITMAP1;
		explode lthigh type FALL | BITMAP1;
		explode luparm type FALL | BITMAP5;
		explode pelvis type FALL | BITMAP1;
		explode rleg type FALL | BITMAP1;
		explode rloarm type FALL | BITMAP1;
		explode rthigh type FALL | BITMAP1;
		explode ruparm type FALL | BITMAP5;
		explode torso type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode backgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lelbow type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode torso type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode backgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lelbow type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
