#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, pad, beam1, beam2, head2, conduit2, head1, conduit1,
       block1, block2, pedistal, sleeve1, sleeve2, bump2, bump1, gun2,
       gun1, dish, blinks;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

#define SIG_ACTIVATE			2

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif


Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	

activatescr()
{
	if( TRUE )
	{
		move head2 to x-axis [0.000000] now;
		move head2 to x-axis [-0.750000] speed [0.946967];
		move head2 to z-axis [0.000000] now;
		move conduit2 to x-axis [0.000000] now;
		move conduit2 to z-axis [0.000000] now;
		move head1 to x-axis [0.000000] now;
		move head1 to x-axis [0.799994] speed [1.010095];
		move head1 to z-axis [0.000000] now;
		move conduit1 to x-axis [0.000000] now;
		move conduit1 to z-axis [0.000000] now;
		turn block1 to x-axis <0.000000> now;
		turn block1 to x-axis <0.000000> speed <0.000000>;
		turn block1 to y-axis <0.000000> now;
		turn block1 to y-axis <0.000000> speed <0.000000>;
		turn block1 to z-axis <0.000000> now;
		turn block1 to z-axis <-90.247253> speed <113.950549>;
		turn block2 to z-axis <0.000000> now;
		turn block2 to z-axis <90.247253> speed <113.950549>;
		turn head1 to x-axis <0.000000> now;
		turn head1 to x-axis <0.000000> speed <0.000000>;
		sleep 792;
	}
	if( TRUE )
	{
		turn block1 to x-axis <0.000000> speed <0.000000>;
		turn block1 to y-axis <0.000000> speed <0.000000>;
		turn block1 to z-axis <-180.269231> speed <360.087912>;
		turn block2 to z-axis <180.269231> speed <360.087912>;
		sleep 250;
	}
	if( TRUE )
	{
		move pedistal to y-axis [5.000000] speed [20.000000];
		sleep 250;
	}
	if( TRUE )
	{
		move sleeve1 to x-axis [3.699994] speed [12.052112];
		move sleeve2 to x-axis [-3.649994] speed [11.889246];
		move head2 to y-axis [-2.850000] speed [9.283386];
		move head1 to y-axis [-2.850000] speed [9.283386];
		sleep 307;
	}
	if( TRUE )
	{
		move head2 to x-axis [-0.799994] speed [0.138885];
		move head2 to y-axis [-2.850000] speed [0.000000];
		move bump2 to x-axis [2.400000] speed [6.666675];
		move bump2 to y-axis [0.400000] speed [1.111108];
		move conduit2 to x-axis [-3.749994] speed [10.416663];
		move head1 to y-axis [-2.850000] speed [0.000000];
		move bump1 to x-axis [-2.400000] speed [6.666669];
		move bump1 to y-axis [0.400000] speed [1.111115];
		move conduit1 to x-axis [3.699994] speed [10.277777];
		move conduit1 to z-axis [-0.049994] speed [0.138885];
		turn conduit1 to z-axis <0.000000> speed <0.000000>;
		sleep 360;
	}
	if( TRUE )
	{
		move conduit1 to z-axis [-0.299994] speed [0.336017];
		turn gun2 to x-axis <179.813187> speed <241.681319>;
		turn gun1 to x-axis <179.813187> speed <241.681319>;
		turn conduit1 to z-axis <0.000000> speed <0.000000>;
		sleep 744;
	}
	sleep 8;
}

deactivatescr()
{
	if( TRUE )
	{
		move pedistal to y-axis [5.000000] now;
		move sleeve1 to x-axis [3.699994] now;
		move sleeve2 to x-axis [-3.649994] now;
		move head2 to x-axis [-0.799994] now;
		move head2 to y-axis [-2.850000] now;
		move head2 to z-axis [0.000000] now;
		move bump2 to x-axis [2.400000] now;
		move bump2 to y-axis [0.400000] now;
		move conduit2 to x-axis [-3.749994] now;
		move conduit2 to z-axis [0.000000] now;
		move head1 to x-axis [0.799994] now;
		move head1 to y-axis [-2.850000] now;
		move head1 to z-axis [0.000000] now;
		move bump1 to x-axis [-2.400000] now;
		move bump1 to y-axis [0.400000] now;
		move conduit1 to x-axis [3.699994] now;
		move conduit1 to z-axis [-0.299994] now;
		move conduit1 to z-axis [-0.049994] speed [0.469922];
		turn block1 to z-axis <-180.269231> now;
		turn block2 to z-axis <180.269231> now;
		turn gun2 to x-axis <179.813187> now;
		turn gun2 to x-axis <0.000000> speed <337.994505>;
		turn gun1 to x-axis <179.813187> now;
		turn gun1 to x-axis <0.000000> speed <337.994505>;
		turn head1 to x-axis <0.000000> now;
		turn conduit1 to z-axis <0.000000> now;
		turn conduit1 to z-axis <0.000000> speed <0.000000>;
		sleep 532;
	}
	if( TRUE )
	{
		move head2 to x-axis [-0.750000] speed [0.128864];
		move head2 to y-axis [-2.850000] speed [0.000000];
		move bump2 to x-axis [0.000000] speed [6.185571];
		move bump2 to y-axis [0.000000] speed [1.030927];
		move conduit2 to x-axis [0.000000] speed [9.664948];
		move head1 to y-axis [-2.850000] speed [0.000000];
		move bump1 to x-axis [0.000000] speed [6.185565];
		move bump1 to y-axis [0.000000] speed [1.030933];
		move conduit1 to x-axis [0.000000] speed [9.536078];
		move conduit1 to z-axis [0.000000] speed [0.128864];
		turn conduit1 to z-axis <0.000000> speed <0.000000>;
		sleep 388;
	}
	if( TRUE )
	{
		move sleeve1 to x-axis [0.000000] speed [9.511560];
		move sleeve2 to x-axis [0.000000] speed [9.383026];
		move head2 to y-axis [0.000000] speed [7.326477];
		move head1 to y-axis [0.000000] speed [7.326477];
		sleep 389;
	}
	if( TRUE )
	{
		move pedistal to y-axis [0.000000] speed [8.403357];
		sleep 595;
	}
	if( TRUE )
	{
		turn block1 to x-axis <0.000000> speed <0.000000>;
		turn block1 to y-axis <0.000000> speed <0.000000>;
		turn block1 to z-axis <-90.247253> speed <223.934066>;
		turn block2 to z-axis <90.247253> speed <223.934066>;
		sleep 402;
	}
	if( TRUE )
	{
		move head2 to x-axis [0.000000] speed [1.865668];
		move head1 to x-axis [0.000000] speed [1.990045];
		turn block1 to x-axis <0.000000> speed <0.000000>;
		turn block1 to y-axis <0.000000> speed <0.000000>;
		turn block1 to z-axis <0.000000> speed <224.505495>;
		turn block2 to z-axis <0.000000> speed <224.505495>;
		turn head1 to x-axis <0.000000> speed <0.000000>;
		sleep 402;
	}
	sleep 13;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache block1;
	dont-cache block2;
	dont-cache bump1;
	dont-cache bump2;
	dont-cache conduit1;
	dont-cache conduit2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache head1;
	dont-cache head2;
	dont-cache pedistal;
	dont-cache sleeve1;
	dont-cache sleeve2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache block1;
	cache block2;
	cache bump1;
	cache bump2;
	cache conduit1;
	cache conduit2;
	cache gun1;
	cache gun2;
	cache head1;
	cache head2;
	cache pedistal;
	cache sleeve1;
	cache sleeve2;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	
	dont-shade dish;
	dont-cache dish;
	dont-shade blinks;
	dont-cache blinks;
	dont-cache pad;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade block1;
	dont-shade block2;
	dont-shade bump1;
	dont-shade bump2;
	dont-shade conduit1;
	dont-shade conduit2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade head1;
	dont-shade head2;
	dont-shade pad;
	dont-shade pedistal;
	dont-shade sleeve1;
	dont-shade sleeve2;

	unitviewer = FALSE;
	spray = 0;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
	spin dish around y-axis speed <150.032967>;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP1;
		explode beam2 type BITMAPONLY | BITMAP1;
		explode block1 type BITMAPONLY | BITMAP1;
		explode block2 type BITMAPONLY | BITMAP5;
		explode conduit2 type BITMAPONLY | BITMAP1;
		explode blinks type BITMAPONLY | BITMAP1;
		explode dish type BITMAPONLY | BITMAP1;
		explode gun1 type BITMAPONLY | BITMAP1;
		explode gun2 type BITMAPONLY | BITMAP5;
		explode head1 type BITMAPONLY | BITMAP1;
		explode head2 type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		explode pedistal type BITMAPONLY | BITMAP1;
		explode sleeve1 type BITMAPONLY | BITMAP5;
		explode sleeve2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP1;
		explode beam2 type FALL | BITMAP1;
		explode block1 type BITMAPONLY | BITMAP1;
		explode block2 type BITMAPONLY | BITMAP5;
		explode bump1 type FALL | BITMAP5;
		explode bump2 type FALL | BITMAP5;
		explode conduit1 type FALL | BITMAP5;
		explode conduit2 type FALL | BITMAP1;
		explode blinks type FALL | BITMAP1;
		explode dish type FALL | BITMAP1;
		explode gun1 type FALL | BITMAP1;
		explode gun2 type FALL | BITMAP5;
		explode head1 type SHATTER | BITMAP1;
		explode head2 type SHATTER | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		explode pedistal type BITMAPONLY | BITMAP1;
		explode sleeve1 type FALL | BITMAP5;
		explode sleeve2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode block1 type BITMAPONLY | BITMAP1;
		explode block2 type BITMAPONLY | BITMAP5;
		explode bump1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode bump2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode conduit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode conduit2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode blinks type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode head1 type SHATTER | BITMAP1;
		explode head2 type SHATTER | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		explode pedistal type BITMAPONLY | BITMAP1;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode block1 type BITMAPONLY | BITMAP1;
	explode block2 type BITMAPONLY | BITMAP5;
	explode bump1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode bump2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode conduit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode conduit2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode blinks type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode dish type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode head1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode head2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pad type BITMAPONLY | BITMAP1;
	explode pedistal type BITMAPONLY | BITMAP1;
	explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
