#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, boom, neck, gun, body, gear,
	   wake01, wake02, wake03, wake04, wake05, wake06, wake07, wake08;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-211.049451> speed <309.000000>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <210.049451> speed <308.000000>;
		sleep 683;
	}
	if( TRUE )
	{
		turn boom to x-axis <43.005495> speed <62.000000>;
		turn neck to x-axis <-43.005495> speed <62.000000>;
		sleep 689;
	}
	sleep 11;
}

deactivatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <-211.049451> now;
		turn door2 to z-axis <210.445055> now;
		turn boom to x-axis <43.170330> now;
		turn boom to x-axis <0.000000> speed <64.000000>;
		turn neck to x-axis <-43.170330> now;
		turn neck to x-axis <0.000000> speed <64.000000>;
		sleep 672;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <306.000000>;
		turn door2 to z-axis <0.000000> speed <305.000000>;
		sleep 689;
	}
	sleep 12;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set INBUILDSTANCE to 1;
	call-script activatescr();
	turn gun to y-axis Static_Var_2 speed <160.000000>;
	wait-for-turn gun around y-axis;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn gun to y-axis <0.000000> speed <160.000000>;
	wait-for-turn gun around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake01;
			emit-sfx 5 from wake02;
			emit-sfx 5 from wake03;
			emit-sfx 5 from wake04;
			emit-sfx 5 from wake05;
			emit-sfx 5 from wake06;
			emit-sfx 3 from wake07;
			emit-sfx 3 from wake08;
			emit-sfx 3 from wake01;
			emit-sfx 3 from wake02;
			emit-sfx 3 from wake03;
			emit-sfx 3 from wake04;
			emit-sfx 3 from wake05;
			emit-sfx 3 from wake06;
			emit-sfx 5 from wake07;
			emit-sfx 5 from wake08;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 5 from wake01;
			emit-sfx 5 from wake02;
			emit-sfx 5 from wake03;
			emit-sfx 5 from wake04;
			emit-sfx 5 from wake05;
			emit-sfx 5 from wake06;
			emit-sfx 3 from wake07;
			emit-sfx 3 from wake08;
			emit-sfx 3 from wake01;
			emit-sfx 3 from wake02;
			emit-sfx 3 from wake03;
			emit-sfx 3 from wake04;
			emit-sfx 3 from wake05;
			emit-sfx 3 from wake06;
			emit-sfx 5 from wake07;
			emit-sfx 5 from wake08;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	if( Static_Var_1 == 2 || Static_Var_1 == 1 )
	{
		dont-cache base;
		dont-cache body;
		dont-cache gear;
		dont-cache beam;
		dont-cache door1;
		dont-cache door2;
		dont-cache boom;
		dont-cache neck;
		dont-cache gun;
	}
	if( Static_Var_1 != 2 && Static_Var_1 != 1 )
	{
		cache base;
		cache body;
		cache gear;
		cache beam;
		cache door1;
		cache door2;
		cache boom;
		cache neck;
		cache gun;
	}
}

Create()
{
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	sleep rand(25,250);
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( Static_Var_1 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode boom type FALL | BITMAP1;
			explode beam type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP1;
			explode door1 type BITMAPONLY | BITMAP1;
			explode door2 type BITMAPONLY | BITMAP5;
			explode gun type SHATTER | BITMAP1;
			explode neck type FALL | BITMAP1;
			return (0);
		}
		corpsetype = 3;
		explode boom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode boom type FALL | BITMAP1;
			explode beam type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP1;
			explode door1 type BITMAPONLY | BITMAP1;
			explode door2 type BITMAPONLY | BITMAP5;
			explode gun type SHATTER | BITMAP1;
			explode neck type FALL | BITMAP1;
			return (0);
		}
		corpsetype = 3;
		explode boom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode boom type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP5;
		explode gun type BITMAPONLY | BITMAP1;
		explode neck type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode boom type FALL | BITMAP1;
		explode beam type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode neck type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode boom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode boom type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP1;
	explode door2 type BITMAPONLY | BITMAP5;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode neck type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
