#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  emit1, emit2, emit3, base, launcher, pole, turret, arms,
       launcher2, wake1, wake2, wake3, wake4, wake5, wake6, wake7,
       wake8;

static-var  Static_Var_1, gun_3, Static_Var_3, restore_delay, statechg_DesiredState,
            statechg_StateChanging;
static-var  firedelay, firing;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_MOVE			4


activatescr()
{
	if( TRUE )
	{
		move pole to y-axis [0.000000] now;
		move pole to y-axis [1.100000] speed [6.000000];
		move turret to y-axis [0.000000] now;
		move turret to y-axis [1.200000] speed [6.000000];
		move arms to y-axis [0.000000] now;
		move launcher to y-axis [0.000000] now;
		sleep 177;
	}
	if( TRUE )
	{
		turn base to x-axis <3.000000> speed <17.000000>;
		turn turret to y-axis <0.000000> speed <0.000000>;
		turn arms to x-axis <-19.000000> speed <106.000000>;
		turn launcher to x-axis <34.005495> speed <188.000000>;
		sleep 181;
	}
	if( TRUE )
	{
		turn base to x-axis <-4.000000> speed <43.000000>;
		turn arms to x-axis <-45.010989> speed <143.000000>;
		turn launcher to x-axis <45.010989> speed <60.000000>;
		sleep 179;
	}
	if( TRUE )
	{
		turn base to x-axis <0.000000> speed <26.000000>;
		sleep 183;
	}
	sleep 12;
}

deactivatescr()
{
	if( TRUE )
	{
		move pole to y-axis [1.100000] now;
		move turret to y-axis [1.139996] now;
		move arms to y-axis [0.000000] now;
		move launcher to y-axis [0.000000] now;
		turn base to x-axis <0.346154> now;
		turn base to x-axis <-3.000000> speed <15.000000>;
		turn turret to y-axis <0.000000> now;
		turn arms to x-axis <-45.010989> now;
		turn arms to x-axis <-3.000000> speed <156.000000>;
		turn launcher to x-axis <45.010989> now;
		turn launcher to x-axis <41.005495> speed <14.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		move pole to y-axis [0.000000] speed [4.000000];
		move turret to y-axis [0.000000] speed [4.000000];
		turn base to x-axis <2.000000> speed <22.000000>;
		turn arms to x-axis <0.000000> speed <13.000000>;
		turn launcher to x-axis <20.000000> speed <79.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		move base to y-axis [-0.650000] speed [2.000000];
		turn base to x-axis <2.000000> speed <1.000000>;
		turn launcher to x-axis <0.000000> speed <75.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		move base to y-axis [0.000000] speed [2.000000];
		turn base to x-axis <0.000000> speed <9.000000>;
		sleep 266;
	}
	sleep 36;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}
*/

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	hide launcher;
	show launcher2;
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	hide launcher2;
	show launcher;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_3 == 1 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		if( Static_Var_3 == 2 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
	if( Static_Var_3 == 2 || Static_Var_3 == 1 )
	{
		dont-cache base;
		dont-cache launcher;
		dont-cache pole;
		dont-cache turret;
		dont-cache arms;
		dont-cache launcher2;
	}
	if( Static_Var_3 != 2 && Static_Var_3 != 1 )
	{
		cache base;
		cache launcher;
		cache pole;
		cache turret;
		cache arms;
		cache launcher2;
	}
}

Create()
{
	firedelay = 2000;
	firing = 0;
	
	gun_3 = emit2;
	Static_Var_1 = 0;
	restore_delay = 3000;
	hide launcher2;
	call-script InitState();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn launcher2 to y-axis <0.000000> speed <250.000000>;
	turn launcher2 to x-axis <0.000000> speed <150.000000>;
	wait-for-turn launcher2 around y-axis;
	wait-for-turn launcher2 around x-axis;
	start-script RequestState(1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	start-script RequestState(0);
	while( !Static_Var_1 )
	{
		sleep 200;
	}
	turn launcher2 to y-axis heading speed <250.000000>;
	turn launcher2 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn launcher2 around y-axis;
	wait-for-turn launcher2 around x-axis;
	while( firing )
	{
		sleep 50;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	firing = 1;
	++gun_3;
	sleep firedelay;
	firing = 0;

	if( gun_3 == 4 )
	{
		gun_3 = emit2;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = launcher;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = emit1;
	}
	if( gun_3 == 2 )
	{
		piecenum = emit2;
	}
	if( gun_3 == 3 )
	{
		piecenum = emit3;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	if( Static_Var_3 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode arms type SHATTER | BITMAP1;
			explode base type BITMAPONLY | BITMAP5;
			explode emit1 type FALL | BITMAP5;
			explode emit1 type FALL | BITMAP1;
			explode emit1 type FALL | BITMAP5;
			explode launcher type BITMAPONLY | BITMAP5;
			explode pole type FALL | BITMAP1;
			explode turret type FALL | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( Static_Var_3 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode arms type SHATTER | BITMAP1;
			explode base type BITMAPONLY | BITMAP5;
			explode emit1 type FALL | BITMAP5;
			explode emit1 type FALL | BITMAP1;
			explode emit1 type FALL | BITMAP5;
			explode launcher type BITMAPONLY | BITMAP5;
			explode pole type FALL | BITMAP1;
			explode turret type FALL | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode arms type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode emit1 type BITMAPONLY | BITMAP5;
		explode emit1 type BITMAPONLY | BITMAP1;
		explode emit1 type BITMAPONLY | BITMAP5;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode emit1 type FALL | BITMAP5;
		explode emit1 type FALL | BITMAP1;
		explode emit1 type FALL | BITMAP5;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type FALL | BITMAP1;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arms type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher type BITMAPONLY | BITMAP5;
		explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode arms type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP5;
	explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launcher type BITMAPONLY | BITMAP5;
	explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
