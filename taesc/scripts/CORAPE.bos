#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, winga, wingb, gun1, gun2, thrusta,
       thrustb1, thrustb2, naughty;

static-var  gun_1, statechg_DesiredState, statechg_StateChanging, flying, dontfire;


OffScreenCheck(base_xz, base_x, base_z, ground, heading)
{
	while (flying)
	{
		signal 4;
		base_xz = get PIECE_XZ(base);
		base_x = base_xz / 65536;
		base_z = base_xz - base_x * 65536;
		ground = get GROUND_HEIGHT(get PIECE_XZ(base));
		if (base_z < 44 OR ground < 0) 
		{
			++dontfire;
			if (dontfire >= 60)
			{
				dontfire=60;
			}
		}
		if (base_z > 44 OR ground >= 0)
		{
			if (dontfire >= 1)								//3 second grace period - set to 4 if used, 1 if not
			{
				show naughty;
			}
//			if ((dontfire >= 1) && (dontfire < 4))			//This provides a warning, comment out if not used
//			{
//				show naughty;
//				sleep 250;
//				hide naughty;
//			}
		}	
		if (base_z > 44 && ground >= 0)
		{
			--dontfire;
			if (dontfire >= 1)								//set to 4 if warning used, 1 if not
			{
				show naughty;
			}
			if (dontfire <= 0)								//set to 3 if warning used, 0 if not
			{
				dontfire=0;
				hide naughty;
			}
		}
		sleep 1000;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activatescr()
{
	if( TRUE )
	{
		flying=1;
		start-script OffScreenCheck();
		
		turn winga to z-axis <-90.021978> speed <120.000000>;
		turn wingb to z-axis <90.021978> speed <120.000000>;
	}	
	sleep 20;
}		


deactivatescr()
{
	if( TRUE )
	{
		turn winga to z-axis <0.000000> speed <120.000000>;
		turn wingb to z-axis <0.000000> speed <120.000000>;
		
		flying=0;
	}
}

/*
Go()
{
	turn winga to z-axis <-90.021978> speed <120.000000>;
	turn wingb to z-axis <90.021978> speed <120.000000>;
}

Stop()
{
	turn winga to z-axis <0.000000> speed <120.000000>;
	turn wingb to z-axis <0.000000> speed <120.000000>;
}
*/
InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare1;
	hide flare2;
	
	dont-cache flare1;
	dont-cache flare2;
	
	gun_1 = flare1;
	
	dontfire=0;
	dont-cache naughty;
	move naughty to y-axis  [6] now;
	hide naughty;
	
	call-script InitState();
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 100;
	}
	start-script SmokeUnit();
}

Activate()
{
	set ARMORED to 1;
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
	set ARMORED to 0;
}

FirePrimary()
{
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	if (dontfire)
	{
		move flare1 to x-axis [32000.00] now;
		move flare1 to z-axis [-32000.00] now;
		
		move flare2 to x-axis [32000.00] now;
		move flare2 to z-axis [-32000.00] now;
	}
	
	if (!dontfire)
	{
		move flare1 to x-axis [0.00] now;
		move flare1 to z-axis [0.00] now;
		
		move flare2 to x-axis [0.00] now;
		move flare2 to z-axis [0.00] now;
	}	
	piecenum = gun_1;
}



SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP1;
		explode gun1 type BITMAPONLY | BITMAP1;
		explode gun2 type BITMAPONLY | BITMAP5;
		explode thrusta type BITMAPONLY | BITMAP1;
		explode thrustb1 type BITMAPONLY | BITMAP1;
		explode thrustb2 type BITMAPONLY | BITMAP1;
		explode winga type BITMAPONLY | BITMAP1;
		explode wingb type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP1;
		explode flare2 type FALL | BITMAP1;
		explode gun1 type FALL | BITMAP1;
		explode gun2 type FALL | BITMAP5;
		explode thrusta type FALL | BITMAP1;
		explode thrustb1 type FALL | BITMAP1;
		explode thrustb2 type FALL | BITMAP1;
		explode winga type SHATTER | BITMAP1;
		explode wingb type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode thrusta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrustb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrustb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode winga type SHATTER | BITMAP1;
		explode wingb type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode thrusta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrustb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrustb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode winga type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wingb type BITMAPONLY | BITMAP5;
}
