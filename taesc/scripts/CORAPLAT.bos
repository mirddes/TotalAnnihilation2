#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  beam1, beam2, beam3, beam4, base, body, platform, pad,
	   pivot1, pivot2, pivot3, pivot4, post1, post2, post3, post4,
	   nano1, nano2, nano3, nano4, door1, door2, door3, door4,
	   heightstick ;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging, open;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_ACTIVATE			2

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif


Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;
				}	
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;
				}	
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	

activatescr()
{
	if( TRUE )
	{
		move platform to y-axis [0.000000] now;
		move platform to y-axis [11.000000] speed [10.000000];
		sleep 735;
	}
	if( TRUE )
	{
		move platform to y-axis [11.000000] speed [0.000000];
		
		turn door1 to z-axis <-90.021978> speed <159.000000>;
		turn door2 to z-axis <90.021978> speed <159.000000>;
		turn door3 to z-axis <90.021978> speed <159.000000>;
		turn door4 to z-axis <-90.021978> speed <159.000000>;
		sleep 565;
	}
	if( TRUE )
	{
		move platform to y-axis [11.000000] speed [0.000000];
		
		move door1 to y-axis [-4.500000] speed [7.000000];
		move door2 to y-axis [-4.450000] speed [7.000000];
		move door3 to y-axis [-4.500000] speed [7.000000];
		move door4 to y-axis [-4.450000] speed [7.000000];
		sleep 570;
	}
	if( TRUE )
	{
		move platform to y-axis [10.000000] speed [0.000000];
		
		move post1 to y-axis [13.764950] speed [21.000000];
		move post2 to y-axis [13.764950] speed [21.000000];
		move post3 to y-axis [13.764950] speed [21.000000];
		move post4 to y-axis [13.764950] speed [21.000000];
		sleep 571;
	}
	if( TRUE )
	{
		move platform to y-axis [11.000000] speed [0.000000];
		
		turn nano1 to z-axis <-99.021978> speed <174.000000>;
		turn nano2 to z-axis <99.021978> speed <174.000000>;
		turn nano3 to z-axis <99.021978> speed <174.000000>;
		turn nano4 to z-axis <-99.021978> speed <174.000000>;
		sleep 571;
	}
	sleep 28;
}

deactivatescr()
{
	if( TRUE )
	{
		move platform to y-axis [11.000000] now;
		move platform to y-axis [11.000000] speed [0.000000];
		
		move post1 to y-axis [13.764950] now;
		move post2 to y-axis [13.764950] now;
		move post3 to y-axis [13.764950] now;
		move post4 to y-axis [13.764950] now;
					
		move door1 to y-axis [-4.500000] now;
		move door2 to y-axis [-4.500000] now;
		move door3 to y-axis [-4.500000] now;
		move door4 to y-axis [-4.500000] now;
				
		turn door1 to z-axis <-90.021978> now;
		turn door2 to z-axis <90.021978> now;
		turn door3 to z-axis <90.021978> now;
		turn door4 to z-axis <-90.021978> now;
				
		turn nano1 to z-axis <-99.021978> now;
		turn nano2 to z-axis <99.021978> now;
		turn nano3 to z-axis <99.021978> now;
		turn nano4 to z-axis <-99.021978> now;
				
		sleep 565;
	}
	if( TRUE )
	{
		move platform to y-axis [11.000000] speed [0.000000];
		move post1 to y-axis [0.000000] speed [21.000000];
		move post2 to y-axis [0.000000] speed [21.000000];
		move post3 to y-axis [0.000000] speed [21.000000];
		move post4 to y-axis [0.000000] speed [21.000000];
				
		sleep 570;
	}
	if( TRUE )
	{
		move platform to y-axis [11.000000] speed [0.000000];
		move door1 to y-axis [0.000000] speed [7.000000];
		move door2 to y-axis [0.000000] speed [7.000000];
		move door3 to y-axis [0.000000] speed [7.000000];
		move door4 to y-axis [0.000000] speed [7.000000];
			
		sleep 571;
	}
	if( TRUE )
	{
		move platform to y-axis [11.000000] speed [0.000000];
		turn door1 to z-axis <0.000000> speed <157.000000>;
		turn door2 to z-axis <0.000000> speed <157.000000>;
		turn door3 to z-axis <0.000000> speed <157.000000>;
		turn door4 to z-axis <0.000000> speed <157.000000>;
				
		sleep 571;
	}
	if( TRUE )
	{
		move platform to y-axis [0.000000] speed [10.000000];
		sleep 738;
	}
	sleep 28;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
		
	dont-cache post1;
	dont-cache post2;
	dont-cache post3;
	dont-cache post4;
		
	dont-cache nano1;
	dont-cache nano2;
	dont-cache nano3;
	dont-cache nano4;
		
	dont-cache pad;
	dont-cache platform;
		
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	open = 1;
	set ARMORED to 0;
	if(( shield_on || dome_on))
	{
		set ARMORED to 1;
	}	
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	
	cache door1;
	cache door2;
	cache door3;
	cache door4;
		
	cache post1;
	cache post2;
	cache post3;
	cache post4;
		
	cache nano1;
	cache nano2;
	cache nano3;
	cache nano4;
		
	cache pad;
	cache platform;
	set ARMORED to 1;
	open = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	open = 0;
	
	turn pivot1 to y-axis <60> now;
	turn pivot2 to y-axis <-60> now;
	turn pivot3 to y-axis <60> now;
	turn pivot4 to y-axis <-60> now;
	
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
		
	dont-shade nano1;
	dont-shade nano2;
	dont-shade nano3;
	dont-shade nano4;
		
	dont-shade post1;
	dont-shade post2;
	dont-shade post3;
	dont-shade post4;
		
	dont-shade pad;
	dont-shade platform;
			
	unitviewer = FALSE;
	spray = 0;
//	move base to y-axis [2.000000] now;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
//	move base to y-axis [0.000000] speed [4.000000];
	set ARMORED to 1;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray == 1 )
	{
		piecenum = beam2;
	}
	if( spray == 2 )
	{
		piecenum = beam3;
	}
	if( spray == 3 )
	{
		piecenum = beam4;
	}
	++spray;
	if( spray == 4 )
	{
		spray = 0;
	}
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = heightstick;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP1;
		explode beam2 type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		explode platform type BITMAPONLY | BITMAP1;
		explode post1 type BITMAPONLY | BITMAP5;
		explode post2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP1;
		explode beam2 type FALL | BITMAP1;
		explode door1 type FALL | BITMAP1;
		explode door2 type FALL | BITMAP5;
		explode nano1 type FALL | BITMAP1;
		explode nano2 type FALL | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		explode platform type BITMAPONLY | BITMAP1;
		explode post1 type FALL | BITMAP5;
		explode post2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode door1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type SHATTER | BITMAP1;
		explode platform type BITMAPONLY | BITMAP1;
		explode post1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode post2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode door1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode pad type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode platform type BITMAPONLY | BITMAP1;
	explode post1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode post2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
}
