#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flareb1, flareb2, flareb3, barrelb1, barrelb2, barrelb3,
	   base, turretb, sleeveb, wake1, wake2, aimfrom,
	   gaat, gaatgun, gaatflare;

static-var  gun_1, gun_2, moving, wait;
static-var 	firedelay, firing;


// Signal definitions
#define SIG_AIM_2			2
#define SIG_AIM				4
#define SIG_R				32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Wakes()
{
	while( 1 )
	{
		if(moving)
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
			
		}
		sleep 300;
	}
}


Create()
{
	set ARMORED to TRUE;
//	set ACTIVATION to TRUE;

	moving = 0;
		
	hide gaatflare;
	hide flareb1;
	hide flareb2;
	hide flareb3;
	
	dont-cache gaatflare;
	dont-cache flareb1;
	dont-cache flareb2;
	dont-cache flareb3;
	
	firedelay = 450;
	firing = 0;
	
	gun_1 = 0;
	gun_2 = 1;
	wait = 0;
	
//	restore_delay = 3000;
	start-script Wakes();
	start-script SmokeUnit();
}

/*
SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}
*/

StartMoving()
{
	moving=1;

}

StopMoving()
{
	moving=0;
}


Restore()
{
	signal SIG_R;
	set-signal-mask SIG_R;
	sleep 10000;
	turn turretb to y-axis <0.000000> speed <55.032967>;
	turn turretb to x-axis <0.000000> speed <30.021978>;
	turn gaat to y-axis <0> speed <135>;
	turn gaat to x-axis <0> speed <135>;
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretb to y-axis heading speed <55.032967>;
	turn turretb to x-axis <0.000000> - pitch speed <30.021978>;
	wait-for-turn turretb around y-axis;
	wait-for-turn turretb around x-axis;
	while(wait)
	{
		sleep 1;
	}
	start-script Restore();
	return (1);
}



FirePrimary()
{
	wait=1;
	if( gun_1 == 0 )
	{
		move barrelb1 to z-axis [-2.500000] now;
		wait-for-move barrelb1 along z-axis;
		move barrelb1 to z-axis [0.000000] speed [1.000000];
		show flareb1;
		sleep 300;
		hide flareb1;
	}
	if( gun_1 == 1 )
	{
		move barrelb2 to z-axis [-2.500000] now;
		wait-for-move barrelb2 along z-axis;
		move barrelb2 to z-axis [0.000000] speed [1.000000];
		show flareb2;
		sleep 300;
		hide flareb2;
	}
	if( gun_1 == 2 )
	{
		move barrelb3 to z-axis [-2.500000] now;
		wait-for-move barrelb3 along z-axis;
		move barrelb3 to z-axis [0.000000] speed [1.000000];
		show flareb3;
		sleep 300;
		hide flareb3;
	}
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = 0;
	}
	wait=0;
}




AimFromPrimary(piecenum)
{
	piecenum = aimfrom;
}



QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

//================================2nd===========================================================================================================================================================

AimTertiary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn gaat to y-axis heading speed <270>;
	turn gaat to x-axis <0.000000> - pitch speed <270>;
	wait-for-turn gaat around y-axis;
	wait-for-turn gaat around x-axis;
//	while( firing )
//	{
//		sleep firedelay;
//		wait-for-turn gaat around y-axis;
//		wait-for-turn gaat around x-axis;
//		firing = 0;
//	}
	start-script Restore();
	return (1);
}


FireTertiary()
{
//	firing = 1;
//	show gaatflare;
	if( gun_2 == 1 )
	{
		show gaatflare;
		sleep 150;
		hide gaatflare;
		turn gaatgun to z-axis <120.000000> speed <360.000000>;
	}
	if( gun_2 == 2 )
	{
		show gaatflare;
		sleep 150;
		hide gaatflare;
		turn gaatgun to z-axis <240.000000> speed <360.000000>;
	}
	if( gun_2 == 3 )
	{
		show gaatflare;
		sleep 150;
		hide gaatflare;
		turn gaatgun to z-axis <0.000000> speed <360.000000>;
	}
//	sleep 100;
//	hide gaatflare;
	++gun_2;
	if( gun_2 == 4 )
	{
		gun_2 = 1;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = gaatflare;
}


QueryTertiary(piecenum)
{
	piecenum = gaatflare;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide gaatflare;
	hide flareb1;
	hide flareb2;
	hide flareb3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrelb1 type BITMAPONLY | BITMAP1;
		explode barrelb2 type BITMAPONLY | BITMAP1;
		explode barrelb3 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
//		explode gaatflare type BITMAPONLY | BITMAP5;
//		explode flareb1 type BITMAPONLY | BITMAP1;
//		explode flareb2 type BITMAPONLY | BITMAP1;
//		explode flareb3 type BITMAPONLY | BITMAP1;
		explode gaatgun type BITMAPONLY | BITMAP1;
		explode sleeveb type BITMAPONLY | BITMAP5;
		explode gaat type BITMAPONLY | BITMAP1;
		explode turretb type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrelb1 type FALL | BITMAP1;
		explode barrelb2 type FALL | BITMAP1;
		explode barrelb3 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
//		explode gaatflare type FALL | BITMAP5;
//		explode flareb1 type FALL | BITMAP1;
//		explode flareb2 type FALL | BITMAP1;
//		explode flareb3 type FALL | BITMAP1;
		explode gaatgun type FALL | BITMAP1;
		explode sleeveb type SHATTER | BITMAP5;
		explode gaat type BITMAPONLY | BITMAP1;
		explode turretb type BITMAPONLY | BITMAP1;
		explode wake1 type FALL | BITMAP1;
		explode wake2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrelb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelb3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
//		explode gaatflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
//		explode flareb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//		explode flareb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//		explode flareb3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gaatgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeveb type SHATTER | BITMAP5;
		explode gaat type BITMAPONLY | BITMAP1;
		explode turretb type BITMAPONLY | BITMAP1;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrelb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelb3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
//	explode gaatflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
//	explode flareb1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flareb2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flareb3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gaatgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeveb type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode gaat type BITMAPONLY | BITMAP1;
	explode turretb type BITMAPONLY | BITMAP1;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
