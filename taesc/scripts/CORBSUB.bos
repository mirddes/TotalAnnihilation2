#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, atur1, abar1a, coil1a, coil1a1, aflare1a, abar1b, coil1b, coil1b1, aflare1b,
	   atur2, abar2, coil2a, coil2a1, aflare2, atur3, abar3, coil3a, coil3a1, aflare3, 
	   btur1, bslv1, bflare1a, bflare1b, btur2, bslv2, bflare2a, bflare2b, 
	   pentagons, bridge, bubbles1, bubbles2, bubbles3, bubbles4 ;

static-var  gun_1, gun_2, gun_3, salvo_3;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4
#define SIG_AIM3			8
#define SIG_MOVE			32

//#define BANK_MORE 80
//#define BANK_LESS 40
//#define BANK_DAMP_SPEED <15>
//#define BANK_REFRESH 300// Put some time long enough for the unit to have travelled a while, but short enough so the script doesn't have a too long reaction time
//#define BANK_SIGNIFICATIVE_SPEED [3]// Actually, it's not a speed, but a distance, the distance covered during BANK_REFRESH. If that distance is too low, the difference between the two xz is deemed too low to get a significative angle out of it. Since half of digit are lost when x and z get packed into xz, any distance under 65536=[0.4] will lose all its significative digits and so will be unuseable.


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	healthpercent = get HEALTH;
	sleeptime = healthpercent*healthpercent;
	if( healthpercent < 66 )
	{
		emit-sfx 256 | 3 from base;
		sleep sleeptime;
		emit-sfx 256 | 3 from atur3;
		
		if( Rand( 1, 66 ) > healthpercent )
		{
			emit-sfx 256 | 3 from bridge;
			sleep sleeptime;
			emit-sfx 256 | 3 from atur2;
			sleep sleeptime;
			emit-sfx 256 | 3 from btur1;
			sleep sleeptime;
		}
	}
	start-script smokeunit();
}
/*
BankClerck()
{
	var present_xz, past_xz, banking_angle;
	while(1)
	{
		present_xz=get PIECE_XZ(base);
		banking_angle=0;
		if (get XZ_HYPOT(present_xz - past_xz)>=BANK_SIGNIFICATIVE_SPEED)
			{
			banking_angle=(0 - (((get XZ_ATAN(past_xz - present_xz))*BANK_MORE)/BANK_LESS));
			}
		turn base to z-axis banking_angle speed BANK_DAMP_SPEED;
		past_xz=present_xz;
		sleep BANK_REFRESH;
	}
}
*/

Create()
{
	set ARMORED to 1;
	
	gun_1 = 0;
	gun_2 = 2;
	gun_3 = 4;
	salvo_3 = 8;
	
//	while( get BUILD_PERCENT_LEFT )
//	{
//		sleep 1000;
//	}
	start-script SmokeUnit();
//	start-script BankClerck();
	set ACTIVATION to TRUE;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from bubbles1;
		emit-sfx 256 | 3 from bubbles2;
		emit-sfx 256 | 3 from bubbles3;
		emit-sfx 256 | 3 from bubbles4;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}


RestoreAfterDelay()
{
	sleep 18000;
	set-signal-mask 0; 
	turn atur1 to y-axis <0.000000> speed <80.000000>;
	turn atur2 to y-axis <0.000000> speed <80.000000>;
	turn atur3 to y-axis <0.000000> speed <80.000000>;
	turn btur1 to y-axis <0.000000> speed <80.000000>;
	turn btur2 to y-axis <0.000000> speed <80.000000>;

}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn btur1 to y-axis heading speed <80.000000>;
	wait-for-turn btur1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		sleep 150;
		gun_1 = 1;
	}
	if( gun_1 == 1 )
	{

		sleep 150;
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = bflare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = bflare1b;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = btur1;
}

//=============================================================

AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn btur2 to y-axis heading speed <80.000000>;
	wait-for-turn btur2 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 2 )
	{
		sleep 150;
		gun_2 = 3;
	}
	if( gun_2 == 3 )
	{
		sleep 150;
		gun_2 = 2;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 2 )
	{
		piecenum = bflare2a;
	}
	if( gun_2 == 3 )
	{
		piecenum = bflare2b;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = btur2;
}

//*************************************************Tertiary******************************************************

AimTertiary(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	
	if( salvo_3 == 8 )
	{
		turn atur3 to y-axis heading speed <360>;
		
	}
	if( salvo_3 == 9 )
	{
		turn atur2 to y-axis heading speed <360>;
		
	}
	if( salvo_3 == 10 )
	{
		turn atur1 to y-axis heading speed <360>;
		
	}
	wait-for-turn atur3 around y-axis;
	wait-for-turn atur2 around y-axis;
	wait-for-turn atur1 around y-axis;

	Start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	var gun_3_tmp;
	gun_3_tmp = gun_3;
	++gun_3;
	if( gun_3 == 8 )
	{
		gun_3 = 4;
	}
	if( gun_3_tmp == 4 )
	{
		salvo_3 = 8; 
		
		move abar3 to z-axis [0.000000] now;
		move abar3 to z-axis [-0.700000] speed [59.999994];
		move coil3a to z-axis [0.000000] now;
		move coil3a to z-axis [-0.700000] speed [17.272711];
		move coil3a1 to z-axis [0.000000] now;
		move coil3a1 to z-axis [-0.700000] speed [33.636359];
		
		sleep 150;
		
		move abar3 to z-axis [0.000000] speed [4.748199];
		move coil3a to z-axis [0.000000] speed [1.366901];
		move coil3a1 to z-axis [0.000000] speed [2.661865];
	}
	if( gun_3_tmp == 5 )
	{
		salvo_3 = 9; 

		move abar2 to z-axis [0.000000] now;
		move abar2 to z-axis [-0.700000] speed [59.999994];
		move coil2a to z-axis [0.000000] now;
		move coil2a to z-axis [-0.700000] speed [17.272711];
		move coil2a1 to z-axis [0.000000] now;
		move coil2a1 to z-axis [-0.700000] speed [33.636359];

		sleep 150;

		move abar2 to z-axis [0.000000] speed [4.748199];
		move coil2a to z-axis [0.000000] speed [1.366901];
		move coil2a1 to z-axis [0.000000] speed [2.661865];

	}
	if( gun_3_tmp == 6 )
	{
		salvo_3 = 10;
		move abar1a to z-axis [0.000000] now;
		move abar1a to z-axis [-0.700000] speed [59.999994];
		move coil1a to z-axis [0.000000] now;
		move coil1a to z-axis [-0.700000] speed [17.272711];
		move coil1a1 to z-axis [0.000000] now;
		move coil1a1 to z-axis [-0.700000] speed [33.636359];
		 
		sleep 150;
		
		move abar1a to z-axis [0.000000] speed [4.748199];
		move coil1a to z-axis [0.000000] speed [1.366901];
		move coil1a1 to z-axis [0.000000] speed [2.661865];
	}
	if( gun_3_tmp == 7 )
	{
		salvo_3 = 8;
		
		move abar1b to z-axis [0.000000] now;
		move abar1b to z-axis [-0.700000] speed [59.999994];
		move coil1b to z-axis [0.000000] now;
		move coil1b to z-axis [-0.700000] speed [17.272711];
		move coil1b1 to z-axis [0.000000] now;
		move coil1b1 to z-axis [-0.700000] speed [33.636359];
		 
		sleep 150;
		
		move abar1b to z-axis [0.000000] speed [4.748199];
		move coil1b to z-axis [0.000000] speed [1.366901];
		move coil1b1 to z-axis [0.000000] speed [2.661865];
	}
}

AimFromTertiary(piecenum)
{
	if( salvo_3 == 8 )
		piecenum = atur3;
	if( salvo_3 == 9 )
		piecenum = atur2;
	if( salvo_3 == 10 )
		piecenum = atur1;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 4 )
		piecenum = aflare3;
	if( gun_3 == 5 )
		piecenum = aflare2;
	if( gun_3 == 6 )
		piecenum = aflare1a;
	if( gun_3 == 7 )
		piecenum = aflare1b;
}





SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles1 type BITMAPONLY | BITMAP1;
		explode bubbles2 type BITMAPONLY | BITMAP1;
		explode atur1 type BITMAPONLY | BITMAP1;
		explode atur2 type BITMAPONLY | BITMAP5;
		explode atur3 type BITMAPONLY | BITMAP5;
		explode coil1a type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles1 type FALL | BITMAP1;
		explode bubbles2 type FALL | BITMAP1;
		explode atur1 type BITMAPONLY | BITMAP1;
		explode atur2 type BITMAPONLY | BITMAP5;
		explode atur3 type FALL | BITMAP5;
		explode coil1a type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode bubbles2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode atur1 type BITMAPONLY | BITMAP1;
		explode atur2 type BITMAPONLY | BITMAP5;
		explode atur3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode coil1a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode bubbles1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode bubbles2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode atur1 type BITMAPONLY | BITMAP1;
	explode atur2 type BITMAPONLY | BITMAP5;
	explode atur3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode coil1a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
}
