#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, body, turret, sleeve, barrel1, barrel2,
	   cap1, cap2, door1, door2, w1, w2;

static-var  restore_delay, gun_1, moving, swimming ;

#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}
*/

RockUnit(anglex, anglez)
{
	signal 4;
	set-signal-mask 4;
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

EmitSFX()
{
	while( TRUE )
	{
		if( swimming == 3 )
		{
			set ARMORED to 1;
			if( moving )
			{
				emit-sfx 259 from w1;
				emit-sfx 259 from w2;
			}
		}
		if( swimming != 3 )
		{
			set ARMORED to 0;
		}	
		sleep 250;
	}
}

Create()
{
	set ARMORED to 0;
	
	hide flare1;
	hide flare2;
	
	swimming = 4;
	moving = 0;
	
	dont-cache flare1;
	dont-cache flare2;
	
	gun_1 = flare1;
	restore_delay = 3000;
	
	move cap1 to z-axis [7.000000] now;
	move cap2 to z-axis [7.000000] now;
	
	move barrel1 to z-axis [-4.000000] now;
	move barrel2 to z-axis [-4.000000] now;
	
	move sleeve to z-axis [-2.000000] now;
	
	move turret to y-axis [-2.000000] now;
	
	turn door1 to z-axis <-180.000000> now;
	turn door2 to z-axis <180.000000> now;
	

	while( get BUILD_PERCENT_LEFT )

	{
		sleep 1000;
	}
	start-script SmokeUnit();
	start-script EmitSFX();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

setSFXoccupy(Func_Var_1)
{
	swimming = Func_Var_1;
}

StartMoving()
{
	moving = TRUE;
}

StopMoving()
{
	moving = FALSE;
}

RestoreAfterDelay()
{
//	sleep restore_delay;
	
	sleep 20000;
	
	turn turret to y-axis <0.000000> speed <240.000000>;
	turn sleeve to x-axis <0.000000> speed <120.000000>;
	
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around y-axis;
	
	move cap1 to z-axis [7.000000] speed [300];
	move cap2 to z-axis [7.000000] speed [300];
	
	move barrel1 to z-axis [-4.000000] speed [300];
	move barrel2 to z-axis [-4.000000] speed [300];
	
	move sleeve to z-axis [-2.000000] speed [300];
	
	move turret to y-axis [-2.000000] speed [300];
	
	wait-for-move turret along y-axis;
	
	turn door1 to z-axis <180.000000> speed <200.000000>;
	turn door2 to z-axis <-180.000000> speed <200.000000>;
	
	
	
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn door1 to z-axis <0.000000> speed <200.000000>;
	turn door2 to z-axis <0.000000> speed <200.000000>;

	wait-for-turn door1 around z-axis;
	
	move turret to y-axis [0.000000] speed [300];
	
//	wait-for-move turret along y-axis;
	
	move sleeve to z-axis [0.000000] speed [300];
	
	move barrel1 to z-axis [0.000000] speed [300];
	move barrel2 to z-axis [0.000000] speed [300];
	
	move cap1 to z-axis [0.000000] speed [300];
	move cap2 to z-axis [0.000000] speed [300];
	
	turn turret to y-axis heading speed <480.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <240.000000>;

	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		move barrel1 to z-axis [-1.000000] speed [500.000000];
		move cap1 to z-axis [-1.000000] speed [500.000000];
		sleep 150;
		hide flare1;
		move barrel1 to z-axis [0.000000] speed [1.850000];
		move cap1 to z-axis [0.000000] speed [1.850000];
	}
	if( gun_1 == 1 )
	{
//		gun_1 = 1;
		show flare2;
		move barrel2 to z-axis [-1.000000] speed [500.000000];
		move cap2 to z-axis [-1.000000] speed [500.000000];
		sleep 150;
		hide flare2;
		move barrel2 to z-axis [0.000000] speed [1.850000];
		move cap2 to z-axis [0.000000] speed [1.850000];
	}
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	hide flare1;
	hide flare2;
	
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
//		explode flare1 type BITMAPONLY | BITMAP1;
//		explode flare2 type BITMAPONLY | BITMAP5;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
//		explode flare1 type FALL | BITMAP1;
//		explode flare2 type FALL | BITMAP5;
		explode sleeve type SHATTER | BITMAP1;
		explode turret type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
//		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeve type SHATTER | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
//	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
