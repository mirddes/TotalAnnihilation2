#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  firept1, firept2, turret, gunbase, pelvis, lleg, rleg, gun1,
       gun2, ground;

static-var  gun_3, restore_delay;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM_3			4


walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [1.750000] now;
			move rleg to y-axis [0.000000] now;
			move rleg to z-axis [-1.600000] now;
			turn pelvis to x-axis <6.000000> now;
			turn lleg to x-axis <-6.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.500000] now;
			move lleg to y-axis [0.500000] now;
			move rleg to y-axis [0.500000] now;
			turn pelvis to x-axis <4.917582> now;
			turn lleg to x-axis <-4.917582> now;
			turn rleg to x-axis <1.049451> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.300000] now;
			move lleg to y-axis [0.300000] now;
			move rleg to y-axis [0.300000] now;
			turn pelvis to x-axis <2.098901> now;
			turn lleg to x-axis <-2.098901> now;
			turn rleg to x-axis <2.807692> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.100000] now;
			move lleg to y-axis [0.100000] now;
			move rleg to y-axis [0.100000] now;
			turn pelvis to x-axis <1.049451> now;
			turn lleg to x-axis <-1.038462> now;
			turn rleg to x-axis <3.159341> now;
			sleep 10;
		}
		if( TRUE )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [1.100000] now;
			move rleg to z-axis [-1.850000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [1.000000] now;
			move rleg to z-axis [-0.350000] now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [0.000000] now;
			move rleg to z-axis [0.000000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-0.600000] now;
			move rleg to z-axis [0.850000] now;
			turn rleg to x-axis <-9.137363> now;
			sleep 100;
		}
		if( TRUE )
		{
			move lleg to z-axis [-1.200000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <6.000000> now;
			turn rleg to x-axis <-6.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.489996] now;
			move lleg to y-axis [0.500000] now;
			move rleg to y-axis [0.500000] now;
			turn pelvis to x-axis <4.565934> now;
			turn lleg to x-axis <0.697802> now;
			turn rleg to x-axis <-4.917582> now;
			sleep 30;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.279999] now;
			move lleg to y-axis [0.300000] now;
			move rleg to y-axis [0.300000] now;
			turn pelvis to x-axis <2.098901> now;
			turn lleg to x-axis <2.807692> now;
			turn rleg to x-axis <-2.098901> now;
			sleep 20;
		}
		if( TRUE )
		{
			move pelvis to y-axis [-0.100000] now;
			move lleg to y-axis [0.100000] now;
			move rleg to y-axis [0.100000] now;
			turn pelvis to x-axis <1.049451> now;
			turn lleg to x-axis <2.456044> now;
			turn rleg to x-axis <-1.038462> now;
			sleep 10;
		}
		if( TRUE )
		{
			move lleg to y-axis [1.100000] now;
			move lleg to z-axis [-1.550000] now;
			move rleg to y-axis [0.500000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [-0.700000] now;
			move rleg to z-axis [0.200000] now;
			sleep 60;
		}
		if( TRUE )
		{
			move lleg to z-axis [0.450000] now;
			move rleg to y-axis [0.000000] now;
			move rleg to z-axis [-0.300000] now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		move lleg to z-axis [1.000000] now;
		move rleg to y-axis [0.000000] now;
		move rleg to z-axis [-1.300000] now;
		turn lleg to x-axis <-10.192308> now;
		turn rleg to x-axis <0.000000> now;
		sleep 100;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	call-script walk();
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

Create()
{
	gun_3 = firept1;
	restore_delay = 3000;
	start-script StopMoving();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = firept1;
	}
	if( gun_3 == 0 )
	{
		piecenum = firept2;
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <180.000000>;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret to y-axis heading speed <360.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		gun_3 = firept2;
		move gun1 to z-axis [-1.500000] speed [25.000000];
		wait-for-move gun1 along z-axis;
		move gun1 to z-axis [0.000000] speed [3.000000];
		return (0);
	}
	if( gun_3 == 1 )
	{
		gun_3 = firept1;
		move gun2 to z-axis [-1.500000] speed [25.000000];
		wait-for-move gun2 along z-axis;
		move gun2 to z-axis [0.000000] speed [3.000000];
	}
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode firept1 type BITMAPONLY | BITMAP1;
		explode firept2 type BITMAPONLY | BITMAP1;
		explode ground type BITMAPONLY | BITMAP1;
		explode gun1 type BITMAPONLY | BITMAP1;
		explode gun2 type BITMAPONLY | BITMAP5;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lleg type BITMAPONLY | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode firept1 type FALL | BITMAP1;
		explode firept2 type FALL | BITMAP1;
		explode ground type FALL | BITMAP1;
		explode gun1 type FALL | BITMAP1;
		explode gun2 type FALL | BITMAP5;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lleg type FALL | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode rleg type FALL | BITMAP1;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode firept1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode firept2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gunbase type BITMAPONLY | BITMAP1;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pelvis type BITMAPONLY | BITMAP1;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode firept1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode firept2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gunbase type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pelvis type BITMAPONLY | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP5;
}
