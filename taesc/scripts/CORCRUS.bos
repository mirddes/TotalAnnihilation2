#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, sleeve, barrel1, flare1, barrel2, flare2, wake1, wake2,
       foreturret, foregun, foreflare, box, chrgflare;

static-var  restore_delay, gun_1, bMoving;

// Signal definitions

#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_MOVE			32

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

emitwakes()
{
	while( TRUE )
	{
		if( bMoving )
		{
			emit-sfx 2 from wake1;
			emit-sfx 4 from wake2;
		}
		sleep 300;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide foreturret;
	hide foregun;
	
	dont-cache flare1;
	dont-cache flare2;
	dont-cache foreflare;
	
	gun_1 = 0;
	bMoving = FALSE;
	restore_delay = 3000;
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 100;
	}
	set ACTIVATION to 1;
	start-script SmokeUnit();
//	start-script emitwakes();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <45.016484>;
	turn sleeve to x-axis <0.000000> speed <50.021978>;
}

restoredecklaser()
{
	sleep 3000;
	set-signal-mask 0;
	turn foreturret to y-axis <0.000000> speed <150.065934>;
	turn foregun to x-axis <0.000000> speed <100.043956>;
}

StartMoving()
{
//	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 4 from wake2;
		sleep 300;
	}
}

StopMoving()
{
//	bMoving = FALSE;
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <90.038462>;
	turn sleeve to x-axis <0.000000> - pitch speed <100.043956>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		gun_1 = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimTertiary(heading,pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
//	start-script RestoreAfterDelay();
	return (1);
}

AimFromTertiary(piecenum)
{
	piecenum=base;
}

QueryTertiary(piecenum)
{
	piecenum=chrgflare;
}



/*
AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn foreturret to y-axis heading speed <300.142857>;
	turn foregun to x-axis <0.000000> - pitch speed <200.087912>;
	wait-for-turn foreturret around y-axis;
	wait-for-turn foregun around x-axis;
	start-script restoredecklaser();
	return (1);
}

FireTertiary()
{
	show foreflare;
	sleep 150;
	hide foreflare;
}

AimFromTertiary(piecenum)
{
	piecenum = foregun;
}

QueryTertiary(piecenum)
{
	piecenum = foreflare;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide foreflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode foreturret type BITMAPONLY | BITMAP1;
		explode foregun type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP1;
		explode wake2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode foreturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode foregun type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake1 type FALL | BITMAP1;
		explode wake2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode foreturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode foregun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type BITMAPONLY | BITMAP1;
	explode barrel1 type BITMAPONLY | BITMAP1;
	explode sleeve type BITMAPONLY | BITMAP1;
	explode foreturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode foregun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
