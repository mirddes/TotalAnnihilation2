#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, flarea, flareb, flarec1, flarec2, turreta, hatch, shell1a,
       shell4b, shell3b, shell2b, shell1b, shell2a, shell3a, shell4a, turretb,
       turretc, hatchc, sleevec, hatchb, barrelc1, barrelc2, collarb, barrelb,
       barrela, sleevea, sleeveb;

static-var  gun_1, request_2, state_3, stayopen_4, timer_5,
            delay_6, open;
static-var	shield_on, charge_on, nbr_charge, nbr_shield, dome_on, nbr_dome ; 
static-var  firedelay_1, firedelay_2, firedelay_3, firing_1, firing_2, firing_3;

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_charge = 0;
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;
		
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_CHARGE)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						
						if (distance > MOBILE_RADIUS_6)			//60-90 seconds
						{
							shgen_count = 0;
						}
						if (distance <= MOBILE_RADIUS_6)		//60 seconds
						{
							shgen_count = 5;
						}
						if (distance <= MOBILE_RADIUS_5)		//45 seconds
						{
							shgen_count = 4;
						}
						if (distance <= MOBILE_RADIUS_4)		//30 seconds
						{
							shgen_count = 3;
						}
						if (distance <= MOBILE_RADIUS_3)		//15 seconds
						{
							shgen_count = 2;
						}
						if (distance <= BOOST_RADIUS)
						{
							shgen_count = 1;
							++nbr_charge;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_charge>=2)
		{
			if(!charge_on)
			{
				charge_on = 1;
				sleep 1;
				firedelay_1 = 0;		//1.5 seconds
				firedelay_2 = 0;		//0.3 seconds
				firedelay_3 = 0;		//0.2 seconds
			}
		}
		if(nbr_charge<2)
		{
			if(charge_on)
			{
				charge_on = 0;
				sleep 1;
				firedelay_1 = 2850;
				firedelay_2 = 550;		//0.6 seconds 
				firedelay_3 = 350;		//0.4 seconds
			}
		}	
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;	
				}
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;	
				}
			}
		}	
		if(shgen_count == 0)
		{
			sleep rand(60000,90000);
		}
		if(shgen_count == 1)
		{
			sleep rand(3000,4000);
		}
		if(shgen_count == 2)
		{
			sleep rand(8500,13500);
		}
		if(shgen_count == 3)
		{
			sleep rand(22500,28500);
		}
		if(shgen_count == 4)
		{
			sleep rand(30000,43500);
		}
		if(shgen_count == 5)
		{
			sleep rand(45000,58500);
		}
		sleep rand(3000,4000);
	}
}	


RestoreAfterDelay()
{
	timer_5 = 0;
	signal 2;
	signal 4;
	signal 8;
	set-signal-mask 0;
	if( !stayopen_4 )
	{
		turn turreta to y-axis <0.00> speed <50.00>;
		turn sleevea to x-axis <0.00> speed <50.00>;
		turn turretb to y-axis <0.00> speed <300.00>;
		turn sleeveb to x-axis <0.00> speed <300.00>;
		turn turretc to y-axis <0.00> speed <200.00>;
		turn sleevec to x-axis <0.00> speed <200.00>;
		wait-for-turn turreta around y-axis;
		wait-for-turn sleevea around x-axis;
		wait-for-turn turretb around y-axis;
		wait-for-turn sleeveb around x-axis;
		wait-for-turn turretc around y-axis;
		wait-for-turn sleevec around x-axis;
		if( timer_5 < 1 )
		{
			request_2 = 0;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( timer_5 > 0 )
		{
			timer_5 = timer_5 - sleeptime;
			if( timer_5 < 1 )
			{
				start-script RestoreAfterDelay();
			}
		}
	}
}

RequestState()
{
	while( TRUE )
	{
		if( ( !request_2 ) AND state_3 AND ( !stayopen_4 ) )
		{
			state_3 = 0;
			move turreta to y-axis [11.539996] now;
			move turretb to y-axis [7.100000] now;
			move turretc to y-axis [2.650000] now;
			move shell1a to x-axis [3.300000] now;
			move shell1a to y-axis [-11.450000] now;
			move shell1a to z-axis [0.000000] now;
			move shell2a to y-axis [-11.450000] now;
			move shell2a to z-axis [-3.300000] now;
			move shell3a to x-axis [-3.300000] now;
			move shell3a to y-axis [-11.400000] now;
			move shell4a to y-axis [-11.400000] now;
			move shell4a to z-axis [3.300000] now;
			move shell4b to x-axis [-4.150000] now;
			move shell3b to z-axis [-4.050000] now;
			move shell2b to x-axis [4.000000] now;
			move shell1b to z-axis [3.939996] now;
			move hatch to x-axis [3.200000] now;
			move hatch to y-axis [-3.650000] now;
			move hatchc to y-axis [1.700000] now;
			move hatchc to z-axis [-0.689996] now;
			move sleevec to z-axis [4.089996] now;
			move barrelc1 to z-axis [3.150000] now;
			move barrelc2 to z-axis [3.139996] now;
			move collarb to z-axis [3.400000] now;
			move hatchb to x-axis [2.950000] now;
			move hatchb to z-axis [-3.350000] now;
			move barrelb to z-axis [3.500000] now;
			move barrela to z-axis [3.639996] now;
			move barrela to z-axis [0.000000] speed [40.000000];
			turn hatch to z-axis <-49.241758> now;
			turn hatchb to y-axis <-46.917582> now;
			move barrelb to z-axis [0.000000] speed [40.000000];
		
			sleep 171;
		
			move barrelc1 to z-axis [0.000000] speed [32.000000];
			move barrelc2 to z-axis [0.000000] speed [32.000000];
			move collarb to z-axis [0.000000] speed [32.000000];
			move sleevec to z-axis [0.000000] speed [24.000000];
			move hatchb to x-axis [0.000000] speed [16.000000];
			move hatchb to z-axis [0.000000] speed [16.000000];
			turn hatchb to y-axis <0.000000> speed <274.000000>;
			move hatchc to y-axis [0.000000] speed [8.000000];
			move hatchc to z-axis [0.000000] speed [4.000000];
			move turreta to y-axis [0.000000] speed [16.000000];
			move turretb to y-axis [0.000000] speed [16.000000];
			move turretc to y-axis [0.000000] speed [16.000000];
		
			sleep 164;
		
			move shell1a to y-axis [0.000000] speed [68.000000];
			move shell2a to y-axis [0.000000] speed [68.000000];
			move shell3a to y-axis [0.000000] speed [68.000000];
			move shell4a to y-axis [0.000000] speed [68.000000];
				
			sleep 162;
		
			move shell1a to x-axis [0.000000] speed [20.000000];
			move shell1a to z-axis [0.000000] speed [0.000000];
			move shell2a to z-axis [0.000000] speed [20.000000];
			move shell3a to x-axis [0.000000] speed [20.000000];
			move shell4a to z-axis [0.000000] speed [20.000000];
			
			sleep 171;
		
			move shell1a to z-axis [0.000000] speed [0.000000];
			move shell4b to x-axis [0.000000] speed [24.000000];
			move shell3b to z-axis [0.000000] speed [24.000000];
			move shell2b to x-axis [0.000000] speed [24.000000];
			move shell1b to z-axis [0.000000] speed [20.000000];
		
			sleep 178;
		
			move hatch to x-axis [0.000000] speed [16.000000];
			move hatch to y-axis [0.000000] speed [20.000000];
			turn hatch to z-axis <-31.005495> speed <106.000000>;
		
			sleep 169;
		
			turn hatch to z-axis <0.000000> speed <192.000000>;
		
			open = 0;
			set ARMORED to 1;
		
			sleep 164;
		
			cache barrela;
			cache barrelb;
			cache barrelc1;
			cache barrelc2;
			cache collarb;
			cache flarea;
			cache flareb;
			cache flarec1;
			cache flarec2;
			cache hatch;
			cache hatchb;
			cache hatchc;
			cache shell1a;
			cache shell1b;
			cache shell2a;
			cache shell2b;
			cache shell3a;
			cache shell3b;
			cache shell4a;
			cache shell4b;
			cache sleevea;
			cache sleeveb;
			cache sleevec;
			cache turreta;
			cache turretb;
			cache turretc;
		}
		if( request_2 AND ( !state_3 ) )
		{
			dont-cache barrela;
			dont-cache barrelb;
			dont-cache barrelc1;
			dont-cache barrelc2;
			dont-cache collarb;
			dont-cache flarea;
			dont-cache flareb;
			dont-cache flarec1;
			dont-cache flarec2;
			dont-cache hatch;
			dont-cache hatchb;
			dont-cache hatchc;
			dont-cache shell1a;
			dont-cache shell1b;
			dont-cache shell2a;
			dont-cache shell2b;
			dont-cache shell3a;
			dont-cache shell3b;
			dont-cache shell4a;
			dont-cache shell4b;
			dont-cache sleevea;
			dont-cache sleeveb;
			dont-cache sleevec;
			dont-cache turreta;
			dont-cache turretb;
			dont-cache turretc;
			turn hatch to z-axis <0.00> now;
			turn hatch to z-axis <-31.58> speed <47.00>;
		
			sleep 672;
		
			open = 1;
			set ARMORED to 0;
			if(( shield_on || dome_on))
			{
				set ARMORED to 1;
			}	
					
			move hatch to x-axis [3.200000] speed [16.000000];
			move hatch to y-axis [-3.650000] speed [20.000000];
			turn hatch to z-axis <-49.010989> speed <104.000000>;
					
			sleep 168;
		
			move shell1a to z-axis [0.000000] speed [0.000000];
			move shell4b to x-axis [-4.150000] speed [24.000000];
			move shell3b to z-axis [-4.050000] speed [24.000000];
			move shell2b to x-axis [4.000000] speed [10.000000];
			move shell1b to z-axis [3.939996] speed [10.000000];
	
			sleep 168;
		
			move shell1a to x-axis [3.300000] speed [16.000000];
			move shell1a to z-axis [0.000000] speed [0.000000];
			move shell2a to z-axis [-3.300000] speed [16.000000];
			move shell3a to x-axis [-3.300000] speed [16.000000];
			move shell4a to z-axis [3.300000] speed [16.000000];
			
			sleep 166;
		
			move shell1a to y-axis [-11.450000] speed [68.000000];
			move shell2a to y-axis [-11.450000] speed [68.000000];
			move shell3a to y-axis [-11.400000] speed [64.000000];
			move shell4a to y-axis [-11.400000] speed [64.000000];
			move turreta to y-axis [11.539996] speed [16.000000];
			move turretb to y-axis [7.100000] speed [12.000000];
			move turretc to y-axis [2.650000] speed [12.000000];
			
			sleep 167;
		
			move hatchc to y-axis [1.700000] speed [8.000000];
			move hatchc to z-axis [-0.689996] speed [4.000000];
			move sleevec to z-axis [4.089996] speed [24.000000];
			move hatchb to x-axis [2.950000] speed [16.000000];
			move hatchb to z-axis [-3.350000] speed [16.000000];
			turn hatchb to y-axis <-46.010989> speed <274.000000>;
			move barrelc1 to z-axis [3.150000] speed [32.000000];
			move barrelc2 to z-axis [3.139996] speed [32.000000];
			move collarb to z-axis [3.400000] speed [32.000000];
			move barrelb to z-axis [3.500000] speed [40.000000];
			move barrela to z-axis [3.639996] speed [40.000000];
		
			sleep 171;
		
			state_3 = 1;
		}
		sleep 200;
	}
}

Create()
{
	set ARMORED to 0;
	
	nbr_charge = 0;
	nbr_shield = 0;
	nbr_dome = 0;
	
	charge_on = 0;
	shield_on = 0;
	
	firedelay_1 = 2850;
	firedelay_2 = 550;
	firedelay_3 = 350;
	firing_1 = 0;
	firing_2 = 0;
	firing_3 = 0;
	
	hide flarea;
	hide flareb;
	hide flarec1;
	hide flarec2;
	dont-shade barrela;
	dont-shade barrelb;
	dont-shade barrelc1;
	dont-shade barrelc2;
	dont-shade collarb;
	dont-shade flarea;
	dont-shade flareb;
	dont-shade flarec1;
	dont-shade flarec2;
	dont-shade hatch;
	dont-shade hatchb;
	dont-shade hatchc;
	dont-shade shell1a;
	dont-shade shell1b;
	dont-shade shell2a;
	dont-shade shell2b;
	dont-shade shell3a;
	dont-shade shell3b;
	dont-shade shell4a;
	dont-shade shell4b;
	dont-shade sleevea;
	dont-shade sleeveb;
	dont-shade sleevec;
	dont-shade turreta;
	dont-shade turretb;
	dont-shade turretc;
	
	gun_1 = 0;
	request_2 = 1;
	state_3 = 0;
	stayopen_4 = 0;
	timer_5 = 0;
	delay_6 = 0;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
	start-script RequestState();
	
	timer_5 = 25000;
}

Activate()
{
	stayopen_4 = 1;
	request_2 = 1;
}

Deactivate()
{
	signal 2;
	signal 4;
	signal 8;
	set-signal-mask 0;
	stayopen_4 = 0;
	request_2 = 0;
	delay_6 = 1;
	sleep 8000;
	delay_6 = 0;
}

AimPrimary(heading, pitch)
{
	if( delay_6 AND ( !stayopen_4 ) )
	{
		signal 2;
		return (0);
	}
	request_2 = 1;
	while( !state_3 )
	{
		sleep 300;
		request_2 = 1;
	}
	signal 2;
	set-signal-mask 2;
	turn turreta to y-axis heading speed <60.00>;
	turn sleevea to x-axis <0.00> - pitch speed <50.00>;
	wait-for-turn turreta around y-axis;
	wait-for-turn sleevea around x-axis;
	while( firing_1 )
	{
		sleep 50;
	}
	timer_5 = 20000;
	return (1);
}

AimSecondary(heading, pitch)
{
	if( delay_6 AND ( !stayopen_4 ) )
	{
		signal 4;
		return (0);
	}
	request_2 = 1;
	while( !state_3 )
	{
		sleep 300;
		request_2 = 1;
	}
	signal 4;
	set-signal-mask 4;
	turn turretc to y-axis heading speed <200.00>;
	turn sleevec to x-axis <0.00> - pitch speed <150.00>;
	wait-for-turn turretc around y-axis;
	wait-for-turn sleevec around x-axis;
	while( firing_2 )
	{
		sleep 50;
	}
	timer_5 = 20000;
	return (1);
}

AimTertiary(heading, pitch)
{
	if( delay_6 AND ( !stayopen_4 ) )
	{
		signal 8;
		return (0);
	}
	request_2 = 1;
	while( !state_3 )
	{
		sleep 300;
		request_2 = 1;
	}
	signal 8;
	set-signal-mask 8;
	turn turretb to y-axis heading speed <300.00>;
	turn sleeveb to x-axis <0.00> - pitch speed <200.00>;
	wait-for-turn turretb around y-axis;
	wait-for-turn sleeveb around x-axis;
	while( firing_3 )
	{
		sleep 50;
	}
	timer_5 = 20000;
	return (1);
}

FirePrimary()
{
	firing_1 = 1;
	move barrela to z-axis [1.00] speed [500.00];
	show flarea;
	sleep 150;
	move barrela to z-axis [3.65] speed [2.65];
	hide flarea;
	wait-for-move barrela along z-axis;
	sleep firedelay_1;
	firing_1 = 0;
}

FireSecondary()
{
	if( !gun_1 )
	{
		firing_2 = 1;
		show flarec1;
		sleep 50;
		hide flarec1;
		gun_1 = 1;
		sleep firedelay_2;
		firing_2 = 0;
		return (0);
	}
	firing_2 = 1;
	show flarec2;
	sleep 50;
	hide flarec2;
	sleep firedelay_2;
	firing_2 = 0;
	gun_1 = 0;
}

FireTertiary()
{
	firing_3 = 1;
	show flareb;
	sleep 50;
	hide flareb;
	sleep firedelay_3;
	firing_3 = 0;
}

AimFromPrimary(piecenum)
{
	piecenum = turreta;
}

AimFromSecondary(piecenum)
{
	piecenum = turretc;
}

AimFromTertiary(piecenum)
{
	piecenum = turretb;
}

QueryPrimary(piecenum)
{
	piecenum = flarea;
}

QuerySecondary(piecenum)
{
	if( !gun_1 )
	{
		piecenum = flarec1;
		return (0);
	}
	piecenum = flarec2;
}

QueryTertiary(piecenum)
{
	piecenum = flareb;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flarea;
	hide flareb;
	hide flarec1;
	hide flarec2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrela type BITMAPONLY | BITMAP1;
		explode barrelb type BITMAPONLY | BITMAP1;
		explode barrelc1 type BITMAPONLY | BITMAP1;
		explode barrelc2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type BITMAPONLY | BITMAP1;
//		explode flarea type BITMAPONLY | BITMAP1;
//		explode flareb type BITMAPONLY | BITMAP1;
//		explode flarec1 type BITMAPONLY | BITMAP1;
//		explode flarec2 type BITMAPONLY | BITMAP5;
		explode hatch type BITMAPONLY | BITMAP1;
		explode hatchb type BITMAPONLY | BITMAP1;
		explode hatchc type BITMAPONLY | BITMAP1;
		explode shell1a type BITMAPONLY | BITMAP1;
		explode shell1b type BITMAPONLY | BITMAP5;
		explode shell2a type BITMAPONLY | BITMAP1;
		explode shell2b type BITMAPONLY | BITMAP1;
		explode shell3a type BITMAPONLY | BITMAP1;
		explode shell3b type BITMAPONLY | BITMAP1;
		explode shell4a type BITMAPONLY | BITMAP5;
		explode shell4b type BITMAPONLY | BITMAP1;
		explode sleevea type BITMAPONLY | BITMAP1;
		explode sleeveb type BITMAPONLY | BITMAP1;
		explode sleevec type BITMAPONLY | BITMAP1;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrela type FALL | BITMAP1;
		explode barrelb type FALL | BITMAP1;
		explode barrelc1 type FALL | BITMAP1;
		explode barrelc2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type FALL | BITMAP1;
//		explode flarea type FALL | BITMAP1;
//		explode flareb type FALL | BITMAP1;
//		explode flarec1 type FALL | BITMAP1;
//		explode flarec2 type FALL | BITMAP5;
		explode hatch type FALL | BITMAP1;
		explode hatchb type FALL | BITMAP1;
		explode hatchc type FALL | BITMAP1;
		explode shell1a type BITMAPONLY | BITMAP1;
		explode shell1b type BITMAPONLY | BITMAP5;
		explode shell2a type BITMAPONLY | BITMAP1;
		explode shell2b type BITMAPONLY | BITMAP1;
		explode shell3a type BITMAPONLY | BITMAP1;
		explode shell3b type BITMAPONLY | BITMAP1;
		explode shell4a type BITMAPONLY | BITMAP5;
		explode shell4b type BITMAPONLY | BITMAP1;
		explode sleevea type FALL | BITMAP1;
		explode sleeveb type FALL | BITMAP1;
		explode sleevec type FALL | BITMAP1;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelc1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelc2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//		explode flarea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//		explode flareb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//		explode flarec1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//		explode flarec2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode hatch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hatchb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hatchc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode shell1a type BITMAPONLY | BITMAP1;
		explode shell1b type BITMAPONLY | BITMAP5;
		explode shell2a type BITMAPONLY | BITMAP1;
		explode shell2b type BITMAPONLY | BITMAP1;
		explode shell3a type BITMAPONLY | BITMAP1;
		explode shell3b type BITMAPONLY | BITMAP1;
		explode shell4a type BITMAPONLY | BITMAP5;
		explode shell4b type BITMAPONLY | BITMAP1;
		explode sleevea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeveb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleevec type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelc1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelc2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP5;
	explode collarb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flarea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flareb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flarec1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flarec2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode hatch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hatchb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hatchc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode shell1a type BITMAPONLY | BITMAP1;
	explode shell1b type BITMAPONLY | BITMAP5;
	explode shell2a type BITMAPONLY | BITMAP1;
	explode shell2b type BITMAPONLY | BITMAP1;
	explode shell3a type BITMAPONLY | BITMAP1;
	explode shell3b type BITMAPONLY | BITMAP1;
	explode shell4a type BITMAPONLY | BITMAP5;
	explode shell4b type BITMAPONLY | BITMAP1;
	explode sleevea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeveb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleevec type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turreta type BITMAPONLY | BITMAP5;
	explode turretb type BITMAPONLY | BITMAP1;
	explode turretc type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
