#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, stand, gun, turret;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-103.917582> speed <101.978022>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <103.763736> speed <101.824176>;
		sleep 1019;
	}
	if( TRUE )
	{
		turn door1 to z-axis <-206.598901> speed <308.351648>;
		turn door2 to z-axis <207.500000> speed <311.516484>;
		sleep 333;
	}
	if( TRUE )
	{
		move stand to y-axis [4.099994] speed [12.312305];
		move gun to y-axis [0.700000] speed [2.102100];
		sleep 333;
	}
	sleep 12;
}

deactivatescr()
{
	if( TRUE )
	{
		move stand to y-axis [4.099994] now;
		move stand to y-axis [0.000000] speed [5.710303];
		move gun to y-axis [0.700000] now;
		move gun to y-axis [0.000000] speed [0.974927];
		turn door1 to z-axis <-206.598901> now;
		turn door2 to z-axis <207.500000> now;
		sleep 718;
	}
	if( TRUE )
	{
		turn door1 to x-axis <0.000000> speed <0.000000>;
		turn door1 to z-axis <-103.917582> speed <210.412088>;
		turn door2 to z-axis <103.763736> speed <212.571429>;
		sleep 488;
	}
	if( TRUE )
	{
		turn door1 to x-axis <0.000000> speed <0.000000>;
		turn door1 to z-axis <0.000000> speed <212.945055>;
		turn door2 to z-axis <0.000000> speed <212.631868>;
		sleep 488;
	}
	sleep 8;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set INBUILDSTANCE to 1;
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <160.038462>;
	wait-for-turn turret around y-axis;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.038462>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	sleep rand(25,250);
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP5;
		explode stand type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode gun type SHATTER | BITMAP5;
		explode stand type FALL | BITMAP1;
		explode turret type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode gun type SHATTER | BITMAP5;
		explode stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP1;
	explode door2 type BITMAPONLY | BITMAP1;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
