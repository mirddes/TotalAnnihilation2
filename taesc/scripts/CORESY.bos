#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, body, guna1, guna2, guna3, guna4, gunb1, gunb2, gunb3, gunb4,
	   beam1, beam2, beam3, beam4, beam5, beam6, beam7, beam8, nano, guna, gunb,
	   lights, slip, wheel1, wheel2, wheel3, wheel4, arrow;

static-var  Static_Var_1, Static_Var_3, statechg_DesiredState, statechg_StateChanging,
            Static_Var_6, building, firing;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ;


// Signal definitions
#define SIG_ACTIVATE			2

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

#include "sfxtype.h"
#include "exptype.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	

activatescr()
{
	//dont-cache lights;
	dont-cache guna1;
	dont-cache gunb1;
	turn guna1 to z-axis <-90> speed <90>;
	turn gunb1 to z-axis <90> speed <90>;
	sleep 200;
	
	dont-cache guna2;
	dont-cache gunb2;
	turn guna2 to z-axis <-90> speed <90>;
	turn gunb2 to z-axis <90> speed <90>;
	sleep 200;
	
	dont-cache guna3;
	dont-cache gunb3;
	turn guna3 to z-axis <-90> speed <90>;
	turn gunb3 to z-axis <90> speed <90>;
	sleep 200;
	
	dont-cache guna4;
	dont-cache gunb4;
	turn guna4 to z-axis <-90> speed <90>;
	turn gunb4 to z-axis <90> speed <90>;
	sleep 1;
	wait-for-turn guna4 around z-axis;
	cache guna1; cache gunb1;
	cache guna2; cache gunb2;
	cache guna3; cache gunb3;
	cache guna4; cache gunb4;
	sleep 200;
}

deactivatescr()
{
	//cache lights;
	dont-cache guna1;
	dont-cache gunb1;
	turn guna1 to z-axis <0> speed <45>;
	turn gunb1 to z-axis <0> speed <45>;
	sleep 400;
	
	dont-cache guna2;
	dont-cache gunb2;
	turn guna2 to z-axis <0> speed <45>;
	turn gunb2 to z-axis <0> speed <45>;
	sleep 400;
	
	dont-cache guna3;
	dont-cache gunb3;
	turn guna3 to z-axis <0> speed <45>;
	turn gunb3 to z-axis <0> speed <45>;
	sleep 400;
	
	dont-cache guna4;
	dont-cache gunb4;
	turn guna4 to z-axis <0> speed <45>;
	turn gunb4 to z-axis <0> speed <45>;
	sleep 1;
	wait-for-turn guna4 around z-axis;
	cache guna1; cache gunb1;
	cache guna2; cache gunb2;
	cache guna3; cache gunb3;
	cache guna4; cache gunb4;
	sleep 400;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


OpenYard()
{
	building=1;
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	building=0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	sleep 10000;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	building=0;
	
	firing = 0;	
	hide arrow;
	
	Static_Var_1 = 1;
	
	move slip to z-axis [2.00] now;
	
	dont-shade arrow;
	dont-cache arrow;
	
	dont-shade guna1;
	dont-shade guna2;
	dont-shade guna3;
	dont-shade guna4;
	dont-shade gunb1;
	dont-shade gunb2;
	dont-shade gunb3;
	dont-shade gunb4;
	dont-shade body;
	dont-shade lights;
	dont-cache lights;
	
	dont-shade wheel1;
	dont-cache wheel1;
	dont-shade wheel2;
	dont-cache wheel2;
	dont-shade wheel3;
	dont-cache wheel3;
	dont-shade wheel4;
	dont-cache wheel4;
	
	//unitviewer = FALSE;
	Static_Var_6 = 0;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
	spin wheel1 around y-axis speed <70.000000>;
	spin wheel2 around y-axis speed <70.000000>;
	spin wheel3 around y-axis speed <70.000000>;
	spin wheel4 around y-axis speed <70.000000>;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = beam2;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = beam3;
	}
	if( Static_Var_1 == 4 )
	{
		piecenum = beam4;
	}
	if( Static_Var_1 == 5 )
	{
		piecenum = beam5;
	}
	if( Static_Var_1 == 6 )
	{
		piecenum = beam6;
	}
	if( Static_Var_1 == 7 )
	{
		piecenum = beam7;
	}
	if( Static_Var_1 == 8 )
	{
		piecenum = beam8;
	}
	++Static_Var_1;
	if( Static_Var_1 == 9 )
	{
		Static_Var_1 = 1;
	}
}

Activate()
{
	start-script RequestState(0);
	signal SIG_ACTIVATE;
}

Deactivate()
{
	Static_Var_6 = 0;
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

QueryBuildInfo(piecenum)
{
	piecenum = slip;
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	
	if( heading > <90.00> AND heading < <270.00> )
	{
		turn slip to y-axis <180.00> now;
		move slip to z-axis [-2.00] now;
		return(1);
	}
	
	turn slip to y-axis <0.00> now;
	move slip to z-axis [2.00] now;
	
	while (firing)
	{
		sleep 50;
	}	
	return(1);
}

FireTertiary()
{
	signal 8;
	set-signal-mask 8;
	if(get UNIT_IS_ON_THIS_COMP(get MY_ID)) 
	{			
		firing = 1;
		show arrow;
		move arrow to y-axis [5.00] now;
		move arrow to z-axis [40.00] now;
		move arrow to z-axis [50.00] speed [20.00];
		sleep 500;
		move arrow to z-axis [40.00] now;
		move arrow to z-axis [50.00] speed [20.00];
		sleep 500;
		move arrow to z-axis [40.00] now;
		move arrow to z-axis [50.00] speed [20.00];
		sleep 500;
		move arrow to z-axis [40.00] now;
		move arrow to z-axis [50.00] speed [20.00];
		sleep 500;
		hide arrow;
		firing = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = slip;
}

QueryTertiary(piecenum)
{
	piecenum = slip;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode base	type	BITMAPONLY | BITMAP1;
		explode body	type	BITMAPONLY | BITMAP1;
		explode guna	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode gunb1	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb2	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode guna3	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode guna4	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode gunb3	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode gunb4	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode guna1	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode guna2	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode beam1	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam2	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam3	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam4	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam5	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam6	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam7	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam8	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return(0);
		}
	if (severity <= 50)
		{
		corpsetype = 2;
		explode base	type	BITMAPONLY | BITMAP1;
		explode body	type	BITMAPONLY | BITMAP1;
		explode guna	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode gunb1	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb2	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode guna3	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode guna4	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode gunb3	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode gunb4	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode guna1	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode guna2	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode beam1	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam2	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam3	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam4	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam5	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam6	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam7	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam8	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return(0);
		}
	if (severity <= 99)
		{
		corpsetype = 3;

		explode base	type	BITMAPONLY | BITMAP1;
		explode body	type	BITMAPONLY | BITMAP1;
		explode guna	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode gunb1	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb2	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode guna3	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode guna4	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode gunb3	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode gunb4	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode guna1	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode guna2	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode beam1	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam2	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam3	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam4	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam5	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam6	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam7	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode beam8	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return(0);
		}
	corpsetype = 3;
	explode base	type	BITMAPONLY | BITMAP1;
	explode body	type	BITMAPONLY | BITMAP1;
	explode guna	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode gunb	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode gunb1	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode gunb2	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode guna3	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode guna4	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode gunb3	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode gunb4	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode guna1	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode guna2	type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode beam1	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode beam2	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode beam3	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode beam4	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode beam5	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode beam6	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode beam7	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode beam8	type	FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	return(0);
	}
