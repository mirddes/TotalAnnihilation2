#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, body, supports, clamps, arms, 
	   sup01, sup02, sup03, sup04, sup05, sup06,
	   clamp01, block01, clamp02, block02, clamp03, block03,
	   clamp04, block04, clamp05, block05, clamp06, block06, 
	   clamp07, block07, clamp08, block08, clamp09, block09,
	   clamp10, block10, clamp11, block11, clamp12, block12, 
	   clamp13, block13, clamp14, block14, 
	   arm01a, arm01b, lathe01, nano01, arm02a, arm02b, lathe02, nano02,
	   arm03a, arm03b, lathe03, nano03, arm04a, arm04b, lathe04, nano04,  
	   arm05a, arm05b, lathe05, nano05, arm06a, arm06b, lathe06, nano06,  
	   arm07a, arm07b, lathe07, nano07, arm08a, arm08b, lathe08, nano08,
	   arm09a, arm09b, lathe09, nano09, arm10a, arm10b, lathe10, nano10,
	   arm11a, arm11b, lathe11, nano11, arm12a, arm12b, lathe12, nano12,
	   lights, pad, target, pad2, arrow;
	   
static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, firing;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_ACTIVATE			2

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif


Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	

activatescr()
{
	if( TRUE )
	{
		move block02 to x-axis [7.2000] speed [2.700000];
		move block02 to y-axis [-7.2000] speed [2.700000];
		move block04 to x-axis [7.2000] speed [2.800000];
		move block04 to y-axis [-7.2000] speed [2.800000];
		move block06 to x-axis [7.2000] speed [2.900000];
		move block06 to y-axis [-7.2000] speed [2.900000];
		move block08 to x-axis [7.2000] speed [3.000000];
		move block08 to y-axis [-7.2000] speed [3.000000];
		move block10 to x-axis [7.2000] speed [2.900000];
		move block10 to y-axis [-7.2000] speed [2.900000];
		move block12 to x-axis [7.2000] speed [2.800000];
		move block12 to y-axis [-7.2000] speed [2.800000];
		move block14 to x-axis [7.2000] speed [2.700000];
		move block14 to y-axis [-7.2000] speed [2.700000];
		
		move block01 to x-axis [-7.2000] speed [2.700000];
		move block01 to y-axis [-7.2000] speed [2.700000];
		move block03 to x-axis [-7.2000] speed [2.800000];
		move block03 to y-axis [-7.2000] speed [2.800000];
		move block05 to x-axis [-7.2000] speed [2.900000];
		move block05 to y-axis [-7.2000] speed [2.900000];
		move block07 to x-axis [-7.2000] speed [3.000000];
		move block07 to y-axis [-7.2000] speed [3.000000];
		move block09 to x-axis [-7.2000] speed [2.900000];
		move block09 to y-axis [-7.2000] speed [2.900000];
		move block11 to x-axis [-7.2000] speed [2.800000];
		move block11 to y-axis [-7.2000] speed [2.800000];
		move block13 to x-axis [-7.2000] speed [2.700000];
		move block13 to y-axis [-7.2000] speed [2.700000];
		sleep 250;
	}	
	if( TRUE )
	{
		move clamp02 to x-axis [21.6000] speed [15.000000];
		move clamp04 to x-axis [21.6000] speed [16.000000];
		move clamp06 to x-axis [21.6000] speed [17.000000];
		move clamp08 to x-axis [21.6000] speed [18.000000];
		move clamp10 to x-axis [21.6000] speed [17.000000];
		move clamp12 to x-axis [21.6000] speed [16.000000];
		move clamp14 to x-axis [21.6000] speed [15.000000];
				
		move clamp01 to x-axis [-21.6000] speed [15.000000];
		move clamp03 to x-axis [-21.6000] speed [16.000000];
		move clamp05 to x-axis [-21.6000] speed [17.000000];
		move clamp07 to x-axis [-21.6000] speed [18.000000];
		move clamp09 to x-axis [-21.6000] speed [17.000000];
		move clamp11 to x-axis [-21.6000] speed [16.000000];
		move clamp13 to x-axis [-21.6000] speed [15.000000];
		sleep 250;
	}

	if( TRUE )
	{
		turn arm02a to z-axis <-90.000000> speed <15.000000>;
		turn arm04a to z-axis <-90.000000> speed <16.000000>;
		turn arm06a to z-axis <-90.000000> speed <17.000000>;
		turn arm08a to z-axis <-90.000000> speed <17.000000>;
		turn arm10a to z-axis <-90.000000> speed <16.000000>;
		turn arm12a to z-axis <-90.000000> speed <15.000000>;
			
		turn arm01a to z-axis <90.000000> speed <15.000000>;
		turn arm03a to z-axis <90.000000> speed <16.000000>;
		turn arm05a to z-axis <90.000000> speed <17.000000>;
		turn arm07a to z-axis <90.000000> speed <17.000000>;
		turn arm09a to z-axis <90.000000> speed <16.000000>;
		turn arm11a to z-axis <90.000000> speed <15.000000>;
			
		sleep 250;
	}
	if( TRUE )
	{
		turn arm02b to z-axis <-45.000000> speed <15.000000>;
		turn arm04b to z-axis <-45.000000> speed <16.000000>;
		turn arm06b to z-axis <-45.000000> speed <17.000000>;
		turn arm08b to z-axis <-45.000000> speed <17.000000>;
		turn arm10b to z-axis <-45.000000> speed <16.000000>;
		turn arm12b to z-axis <-45.000000> speed <15.000000>;
				
		turn arm01b to z-axis <45.000000> speed <15.000000>;
		turn arm03b to z-axis <45.000000> speed <16.000000>;
		turn arm05b to z-axis <45.000000> speed <17.000000>;
		turn arm07b to z-axis <45.000000> speed <17.000000>;
		turn arm09b to z-axis <45.000000> speed <16.000000>;
		turn arm11b to z-axis <45.000000> speed <15.000000>;
				
		sleep 400;
	}
	sleep 34;
}

deactivatescr()
{
	
	if( TRUE )
	{
		turn arm02b to z-axis <0.000000> speed <15.000000>;
		turn arm04b to z-axis <0.000000> speed <15.000000>;
		turn arm06b to z-axis <0.000000> speed <15.000000>;
		turn arm08b to z-axis <0.000000> speed <15.000000>;
		turn arm10b to z-axis <0.000000> speed <15.000000>;
		turn arm12b to z-axis <0.000000> speed <15.000000>;
				
		turn arm01b to z-axis <0.000000> speed <15.000000>;
		turn arm03b to z-axis <0.000000> speed <15.000000>;
		turn arm05b to z-axis <0.000000> speed <15.000000>;
		turn arm07b to z-axis <0.000000> speed <15.000000>;
		turn arm09b to z-axis <0.000000> speed <15.000000>;
		turn arm11b to z-axis <0.000000> speed <15.000000>;
					
		sleep 250;
	}
	if( TRUE )
	{
		turn arm02a to z-axis <0.000000> speed <15.000000>;
		turn arm04a to z-axis <0.000000> speed <15.000000>;
		turn arm06a to z-axis <0.000000> speed <15.000000>;
		turn arm08a to z-axis <0.000000> speed <15.000000>;
		turn arm10a to z-axis <0.000000> speed <15.000000>;
		turn arm12a to z-axis <0.000000> speed <15.000000>;
		
		turn arm01a to z-axis <0.000000> speed <15.000000>;
		turn arm03a to z-axis <0.000000> speed <15.000000>;
		turn arm05a to z-axis <0.000000> speed <15.000000>;
		turn arm07a to z-axis <0.000000> speed <15.000000>;
		turn arm09a to z-axis <0.000000> speed <15.000000>;
		turn arm11a to z-axis <0.000000> speed <15.000000>;
				
		sleep 250;
	}
	if( TRUE )
	{
		move clamp02 to x-axis [0.000000] speed [15.000000];
		move clamp04 to x-axis [0.000000] speed [15.000000];
		move clamp06 to x-axis [0.000000] speed [15.000000];
		move clamp08 to x-axis [0.000000] speed [15.000000];
		move clamp10 to x-axis [0.000000] speed [15.000000];
		move clamp12 to x-axis [0.000000] speed [15.000000];
		move clamp14 to x-axis [0.000000] speed [15.000000];
				
		move clamp01 to x-axis [0.000000] speed [15.000000];
		move clamp03 to x-axis [0.000000] speed [15.000000];
		move clamp05 to x-axis [0.000000] speed [15.000000];
		move clamp07 to x-axis [0.000000] speed [15.000000];
		move clamp09 to x-axis [0.000000] speed [15.000000];
		move clamp11 to x-axis [0.000000] speed [15.000000];
		move clamp13 to x-axis [0.000000] speed [15.000000];
		sleep 250;
	}
	if( TRUE )
	{
		move block02 to x-axis [0.000000] speed [3.000000];
		move block02 to y-axis [0.000000] speed [3.000000];
		move block04 to x-axis [0.000000] speed [3.000000];
		move block04 to y-axis [0.000000] speed [3.000000];
		move block06 to x-axis [0.000000] speed [3.000000];
		move block06 to y-axis [0.000000] speed [3.000000];
		move block06 to x-axis [0.000000] speed [3.000000];
		move block06 to y-axis [0.000000] speed [3.000000];
		move block08 to x-axis [0.000000] speed [3.000000];
		move block08 to y-axis [0.000000] speed [3.000000];
		move block10 to x-axis [0.000000] speed [3.000000];
		move block10 to y-axis [0.000000] speed [3.000000];
		move block12 to x-axis [0.000000] speed [3.000000];
		move block12 to y-axis [0.000000] speed [3.000000];
		move block14 to x-axis [0.000000] speed [3.000000];
		move block14 to y-axis [0.000000] speed [3.000000];
		
		move block01 to x-axis [0.000000] speed [3.000000];
		move block01 to y-axis [0.000000] speed [3.000000];
		move block03 to x-axis [0.000000] speed [3.000000];
		move block03 to y-axis [0.000000] speed [3.000000];
		move block05 to x-axis [0.000000] speed [3.000000];
		move block05 to y-axis [0.000000] speed [3.000000];
		move block07 to x-axis [0.000000] speed [3.000000];
		move block07 to y-axis [0.000000] speed [3.000000];
		move block09 to x-axis [0.000000] speed [3.000000];
		move block09 to y-axis [0.000000] speed [3.000000];
		move block11 to x-axis [0.000000] speed [3.000000];
		move block11 to y-axis [0.000000] speed [3.000000];
		move block13 to x-axis [0.000000] speed [3.000000];
		move block13 to y-axis [0.000000] speed [3.000000];
		sleep 250;
	}	
	
	sleep 34;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

go()
{
//	cache light1;
//	cache light2;
//	cache light3;
//	cache light4;
//	hide light1;
//	hide light2;
//	hide light3;
//	hide light4;
//	show glow1;
//	show glow2;
//	show glow3;
//	show glow4;
//	dont-cache glow1;
//	dont-cache glow2;
//	dont-cache glow3;
//	dont-cache glow4;
//	set ARMORED to 0;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
//	set ARMORED to 1;
//	cache glow1;
//	cache glow2;
//	cache glow3;
//	cache glow4;
//	hide glow1;
//	hide glow2;
//	hide glow3;
//	hide glow4;
//	show light1;
//	show light2;
//	show light3;
//	show light4;
//	dont-cache light1;
//	dont-cache light2;
//	dont-cache light3;
//	dont-cache light4;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	Static_Var_1 = 1;

	move target to z-axis [2.00] now;

	firing = 0;	
	hide arrow;
	
	dont-shade arrow;
	dont-cache arrow;

	dont-shade pad;
	dont-cache pad;

	dont-shade pad2;
	dont-cache pad2;
	
	dont-shade clamp01;
	dont-shade clamp02;
	dont-shade clamp03;
	dont-shade clamp04;
	dont-shade clamp05;
	dont-shade clamp06;
	dont-shade clamp07;
	dont-shade clamp08;
	dont-shade clamp09;
	dont-shade clamp10;
	dont-shade clamp11;
	dont-shade clamp12;
	dont-shade clamp13;
	dont-shade clamp14;
	
	dont-shade block01;
	dont-shade block02;
	dont-shade block03;
	dont-shade block04;
	dont-shade block05;
	dont-shade block06;
	dont-shade block07;
	dont-shade block08;
	dont-shade block09;
	dont-shade block10;
	dont-shade block11;
	dont-shade block12;
	dont-shade block13;
	dont-shade block14;
	
	dont-shade sup01;
	dont-shade sup02;
	dont-shade sup03;
	dont-shade sup04;
	dont-shade sup05;
	dont-shade sup06;
	
	dont-shade arm01a;
	dont-shade arm02a;
	dont-shade arm03a;
	dont-shade arm04a;
	dont-shade arm05a;
	dont-shade arm06a;
	dont-shade arm07a;
	dont-shade arm08a;
	dont-shade arm09a;
	dont-shade arm10a;
	dont-shade arm11a;
	dont-shade arm12a;
		
	dont-shade arm01b;
	dont-shade arm02b;
	dont-shade arm03b;
	dont-shade arm04b;
	dont-shade arm05b;
	dont-shade arm06b;
	dont-shade arm07b;
	dont-shade arm08b;
	dont-shade arm09b;
	dont-shade arm10b;
	dont-shade arm11b;
	dont-shade arm12b;
	
	dont-shade lathe01;
	dont-shade lathe02;
	dont-shade lathe03;
	dont-shade lathe04;
	dont-shade lathe05;
	dont-shade lathe06;
	dont-shade lathe07;
	dont-shade lathe08;
	dont-shade lathe09;
	dont-shade lathe10;
	dont-shade lathe11;
	dont-shade lathe12;
	
	dont-shade nano01;
	dont-shade nano02;
	dont-shade nano03;
	dont-shade nano04;
	dont-shade nano05;
	dont-shade nano06;
	dont-shade nano07;
	dont-shade nano08;
	dont-shade nano09;
	dont-shade nano10;
	dont-shade nano11;
	dont-shade nano12;
	
	dont-shade body;
	dont-shade lights;
	
	dont-cache lights;

	call-script InitState();	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = nano01;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = nano02;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = nano03;
	}
	if( Static_Var_1 == 4 )
	{
		piecenum = nano04;
	}
	if( Static_Var_1 == 5 )
	{
		piecenum = nano05;
	}
	if( Static_Var_1 == 6 )
	{
		piecenum = nano06;
	}
	if( Static_Var_1 == 7 )
	{
		piecenum = nano07;
	}
	if( Static_Var_1 == 8 )
	{
		piecenum = nano08;
	}
	if( Static_Var_1 == 9 )
	{
		piecenum = nano09;
	}
	if( Static_Var_1 == 10 )
	{
		piecenum = nano10;
	}
	if( Static_Var_1 == 11 )
	{
		piecenum = nano11;
	}
	if( Static_Var_1 == 12 )
	{
		piecenum = nano12;
	}
	++Static_Var_1;
	if( Static_Var_1 == 13 )
	{
		Static_Var_1 = 1;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = target;
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	
	if( heading > <90.00> AND heading < <270.00> )
	{
		turn target to y-axis <180.00> now;
		move target to z-axis [-2.00] now;
		return(1);
	}
	
	turn target to y-axis <0.00> now;
	move target to z-axis [2.00] now;
	while (firing)
	{
		sleep 50;
	}	
	return(1);
}

FireTertiary()
{
	signal 8;
	set-signal-mask 8;
	if(get UNIT_IS_ON_THIS_COMP(get MY_ID)) 
	{			
		firing = 1;
		show arrow;
		move arrow to y-axis [5.00] now;
		move arrow to z-axis [40.00] now;
		move arrow to z-axis [50.00] speed [20.00];
		sleep 500;
		move arrow to z-axis [40.00] now;
		move arrow to z-axis [50.00] speed [20.00];
		sleep 500;
		move arrow to z-axis [40.00] now;
		move arrow to z-axis [50.00] speed [20.00];
		sleep 500;
		move arrow to z-axis [40.00] now;
		move arrow to z-axis [50.00] speed [20.00];
		sleep 500;
		hide arrow;
		firing = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = target;
}

QueryTertiary(piecenum)
{
	piecenum = target;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		return (0);
	}
}
