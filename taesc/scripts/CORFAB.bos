#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, nano1, nano2, nano3, nano4, nano5, nano6, nano7, nano8,
	   arm1a, arm2a, arm3a, arm4a, arm1b, arm2b, arm3b, arm4b, 
	   arm5a, arm6a, arm7a, arm8a, arm5b, arm6b, arm7b, arm8b, 
	   lathe1, lathe2, lathe3, lathe4, lathe5, lathe6, lathe7, lathe8, 
       clamp1, clamp2, clamp3, clamp4, clamp1b, clamp2b, clamp3b, clamp4b,
       clamp5, clamp6, clamp7, clamp8, clamp5b, clamp6b, clamp7b, clamp8b,
       pylon1, pylon2, pylon3, pylon4, glow1, glow2, glow3, glow4, 
       pylon5, pylon6, pylon7, pylon8, glow5, glow6, glow7, glow8, 
       tower1, tower2, radar, light1, light2, housing, pad, crane, cranetop,
       extend, more, runway, target;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, building;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_ACTIVATE			2


#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	

activatescr()
{
	if( TRUE )
	{
		turn clamp4b to z-axis <0.000000> now;
		turn clamp4b to z-axis <28.851648> speed <94.291209>;
		turn clamp3b to z-axis <0.000000> now;
		turn clamp3b to z-axis <34.483516> speed <112.686813>;
		turn clamp2b to z-axis <0.000000> now;
		turn clamp2b to z-axis <-32.703297> speed <106.945055>;
		turn clamp1b to z-axis <0.000000> now;
		turn clamp1b to z-axis <-30.972527> speed <101.192308>;
		
		turn clamp8b to z-axis <0.000000> now;
		turn clamp8b to z-axis <28.851648> speed <94.291209>;
		turn clamp7b to z-axis <0.000000> now;
		turn clamp7b to z-axis <34.483516> speed <112.686813>;
		turn clamp6b to z-axis <0.000000> now;
		turn clamp6b to z-axis <-32.703297> speed <106.945055>;
		turn clamp5b to z-axis <0.000000> now;
		turn clamp5b to z-axis <-30.972527> speed <101.192308>;
		
		sleep 306;
	}
	if( TRUE )
	{
		turn clamp4b to z-axis <49.258242> speed <57.000000>;
		turn clamp3b to z-axis <49.609890> speed <42.269231>;
		turn clamp2b to z-axis <-48.906593> speed <45.208791>;
		turn clamp1b to z-axis <-49.609890> speed <52.082418>;
		
		turn clamp8b to z-axis <49.258242> speed <57.000000>;
		turn clamp7b to z-axis <49.609890> speed <42.269231>;
		turn clamp6b to z-axis <-48.906593> speed <45.208791>;
		turn clamp5b to z-axis <-49.609890> speed <52.082418>;
		
		sleep 358;
	}
	if( TRUE )
	{
		turn clamp4b to z-axis <36.598901> speed <38.604396>;
		turn clamp3b to z-axis <37.274725> speed <37.543956>;
		turn clamp2b to z-axis <-39.384615> speed <28.972527>;
		turn clamp1b to z-axis <-39.054945> speed <32.164835>;
		
		turn clamp8b to z-axis <36.598901> speed <38.604396>;
		turn clamp7b to z-axis <37.274725> speed <37.543956>;
		turn clamp6b to z-axis <-39.384615> speed <28.972527>;
		turn clamp5b to z-axis <-39.054945> speed <32.164835>;
		
		sleep 328;
	}
	if( TRUE )
	{
		move clamp1 to x-axis [10.000000] speed [28.569995];
		move clamp4 to x-axis [-10.000000] speed [27.109998];
		turn clamp4b to z-axis <41.164835> speed <14.840659>;
		turn clamp3b to z-axis <41.164835> speed <12.549451>;
		turn clamp2b to z-axis <-41.164835> speed <5.697802>;
		turn clamp1b to z-axis <-42.554945> speed <11.412088>;

		move clamp5 to x-axis [10.000000] speed [28.569995];
		move clamp8 to x-axis [-10.000000] speed [27.109998];
		turn clamp8b to z-axis <41.164835> speed <14.840659>;
		turn clamp7b to z-axis <41.164835> speed <12.549451>;
		turn clamp6b to z-axis <-41.164835> speed <5.697802>;
		turn clamp5b to z-axis <-42.554945> speed <11.412088>;
		
		sleep 308;
	}
	if( TRUE )
	{
		move clamp1 to x-axis [15.000000] speed [7.000000];
		move clamp2 to x-axis [10.000000] speed [13.769995];
		move clamp3 to x-axis [-10.000000] speed [13.169995];
		move clamp4 to x-axis [-15.000000] speed [8.219995];
		
		move clamp5 to x-axis [15.000000] speed [7.000000];
		move clamp6 to x-axis [10.000000] speed [13.769995];
		move clamp7 to x-axis [-10.000000] speed [13.169995];
		move clamp8 to x-axis [-15.000000] speed [8.219995];
		
		sleep 657;
	}
	if( TRUE )
	{
		move clamp1 to x-axis [21.110896] speed [2.229999];
		move clamp2 to x-axis [15.000000] speed [5.929999];
		move clamp3 to x-axis [-15.000000] speed [6.350000];
		move clamp4 to x-axis [-21.110896] speed [1.950000];
		turn crane to x-axis <-10.192308> speed <14.219780>;
		turn clamp4b to z-axis <15.818681> speed <35.313187>;
		turn clamp1b to z-axis <-14.071429> speed <39.758242>;
		
		move clamp5 to x-axis [21.110896] speed [2.229999];
		move clamp6 to x-axis [15.000000] speed [5.929999];
		move clamp7 to x-axis [-15.000000] speed [6.350000];
		move clamp8 to x-axis [-21.110896] speed [1.950000];
//		turn crane to x-axis <-10.192308> speed <14.219780>;
		turn clamp8b to z-axis <15.818681> speed <35.313187>;
		turn clamp5b to z-axis <-14.071429> speed <39.758242>;
		
		sleep 717;
	}
	if( TRUE )
	{
		move clamp2 to x-axis [21.110896] speed [3.309998];
		move clamp3 to x-axis [-21.110896] speed [3.219995];
		
		move clamp4b to x-axis [-3.200004] speed [8.469995];
		move clamp1b to x-axis [3.200004] speed [8.469995];
		move clamp3b to x-axis [-3.200004] speed [8.800000];
		move clamp2b to x-axis [3.200004] speed [8.889996];

		move clamp4b to y-axis [-2.504054] speed [10.039996];
		move clamp1b to y-axis [-2.504054] speed [9.939996];
		move clamp3b to y-axis [-2.504054] speed [9.659998];
		move clamp2b to y-axis [-2.504054] speed [9.659998];
			
		turn crane to x-axis <-24.961538> speed <27.203297>;
		turn clamp4b to z-axis <-36.247253> speed <95.901099>;
		turn clamp3b to z-axis <13.010989> speed <51.840659>;
		turn clamp2b to z-axis <-13.362637> speed <51.192308>;
		turn clamp1b to z-axis <39.384615> speed <98.489011>;

		
		move clamp6 to x-axis [21.110896] speed [3.309998];
		move clamp7 to x-axis [-21.110896] speed [3.219995];
		
		move clamp8b to x-axis [-3.200004] speed [8.469995];
		move clamp5b to x-axis [3.200004] speed [8.469995];
		move clamp7b to x-axis [-3.200004] speed [8.800000];
		move clamp6b to x-axis [3.200004] speed [8.889996];

		move clamp8b to y-axis [-2.504054] speed [10.039996];
		move clamp5b to y-axis [-2.504054] speed [9.939996];
		move clamp7b to y-axis [-2.504054] speed [9.659998];
		move clamp6b to y-axis [-2.504054] speed [9.659998];
			
//		turn crane to x-axis <-24.961538> speed <27.203297>;
		turn clamp8b to z-axis <-36.247253> speed <95.901099>;
		turn clamp7b to z-axis <13.010989> speed <51.840659>;
		turn clamp6b to z-axis <-13.362637> speed <51.192308>;
		turn clamp5b to z-axis <39.384615> speed <98.489011>;
		
		sleep 543;
	}
	if( TRUE )
	{

		turn crane to x-axis <-37.274725> speed <23.532967>;
		turn clamp4b to z-axis <0.000000> speed <69.285714>;
		turn clamp3b to z-axis <-36.934066> speed <95.532967>;
		turn clamp2b to z-axis <39.769231> speed <101.593407>;
		turn clamp1b to z-axis <0.000000> speed <75.335165>;
		
//		turn crane to x-axis <-37.274725> speed <23.532967>;
		turn clamp8b to z-axis <0.000000> speed <69.285714>;
		turn clamp7b to z-axis <-36.934066> speed <95.532967>;
		turn clamp6b to z-axis <39.769231> speed <101.593407>;
		turn clamp5b to z-axis <0.000000> speed <75.335165>;
		
		sleep 523;
	}
	if( TRUE )
	{

		turn crane to x-axis <-48.560440> speed <21.510989>;
		turn clamp3b to z-axis <0.000000> speed <70.631868>;
		turn clamp2b to z-axis <0.000000> speed <76.005495>;
		
//		turn crane to x-axis <-48.560440> speed <21.510989>;
		turn clamp7b to z-axis <0.000000> speed <70.631868>;
		turn clamp6b to z-axis <0.000000> speed <76.005495>;
		
		sleep 523;
	}
	if( TRUE )
	{
		turn crane to x-axis <-64.384615> speed <30.252747>;
		sleep 523;
	}
	if( TRUE )
	{
		turn crane to x-axis <-83.049451> speed <35.653846>;
		sleep 523;
	}
	if( TRUE )
	{
		turn crane to x-axis <-95.010989> speed <22.862637>;
		sleep 523;
	}
	if( TRUE )
	{
		turn crane to x-axis <-92.901099> speed <4.027473>;
		sleep 523;
	}
	if( TRUE )
	{
		turn crane to x-axis <-89.016484> speed <7.401099>;
		sleep 523;
	}
	if( TRUE )
	{
		turn crane to x-axis <-90.076923> speed <2.016484>;
		sleep 523;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <8.087912> speed <15.461538>;
		turn arm2a to z-axis <20.043956> speed <38.324176>;
		turn arm3a to z-axis <-19.340659> speed <36.994505>;
		turn arm4a to z-axis <-11.247253> speed <21.510989>;
		
		turn arm5a to z-axis <8.087912> speed <15.461538>;
		turn arm6a to z-axis <20.043956> speed <38.324176>;
		turn arm7a to z-axis <-19.340659> speed <36.994505>;
		turn arm8a to z-axis <-11.247253> speed <21.510989>;
		
		sleep 523;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <26.021978> speed <31.302198>;
		turn arm2a to z-axis <41.868132> speed <38.043956>;
		turn arm3a to z-axis <-42.554945> speed <40.527473>;
		turn arm4a to z-axis <-25.324176> speed <24.543956>;
		turn arm3b to z-axis <-29.912088> speed <52.192308>;
		turn arm2b to z-axis <26.741758> speed <46.670330>;
		
		turn arm5a to z-axis <26.021978> speed <31.302198>;
		turn arm6a to z-axis <41.868132> speed <38.043956>;
		turn arm7a to z-axis <-42.554945> speed <40.527473>;
		turn arm8a to z-axis <-25.324176> speed <24.543956>;
		turn arm7b to z-axis <-29.912088> speed <52.192308>;
		turn arm6b to z-axis <26.741758> speed <46.670330>;
		
		sleep 573;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <59.461538> speed <60.439560>;
		turn arm2a to z-axis <73.884615> speed <57.890110>;
		turn arm3a to z-axis <-73.175824> speed <55.351648>;
		turn arm4a to z-axis <-53.478022> speed <50.901099>;
		turn arm4b to z-axis <-36.214286> speed <65.532967>;
		turn arm3b to z-axis <-74.945055> speed <81.445055>;
		turn arm2b to z-axis <78.467033> speed <93.527473>;
		turn arm1b to z-axis <40.467033> speed <73.164835>;
		
		turn arm5a to z-axis <59.461538> speed <60.439560>;
		turn arm6a to z-axis <73.884615> speed <57.890110>;
		turn arm7a to z-axis <-73.175824> speed <55.351648>;
		turn arm8a to z-axis <-53.478022> speed <50.901099>;
		turn arm8b to z-axis <-36.214286> speed <65.532967>;
		turn arm7b to z-axis <-74.945055> speed <81.445055>;
		turn arm6b to z-axis <78.467033> speed <93.527473>;
		turn arm5b to z-axis <40.467033> speed <73.164835>;
		
		sleep 553;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <77.054945> speed <31.813187>;
		turn arm2a to z-axis <86.565934> speed <22.890110>;
		turn arm3a to z-axis <-83.747253> speed <19.071429>;
		turn arm4a to z-axis <-75.285714> speed <39.445055>;
		turn arm4b to z-axis <-56.291209> speed <36.263736>;
		turn arm1b to z-axis <68.961538> speed <51.538462>;
		
		turn arm5a to z-axis <77.054945> speed <31.813187>;
		turn arm6a to z-axis <86.565934> speed <22.890110>;
		turn arm7a to z-axis <-83.747253> speed <19.071429>;
		turn arm8a to z-axis <-75.285714> speed <39.445055>;
		turn arm8b to z-axis <-56.291209> speed <36.263736>;
		turn arm5b to z-axis <68.961538> speed <51.538462>;
		
		sleep 553;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <86.906593> speed <18.131868>;
		turn arm4a to z-axis <-86.906593> speed <21.373626>;
		turn arm4b to z-axis <-78.115385> speed <40.164835>;
		turn arm1b to z-axis <77.763736> speed <16.192308>;
		
		turn arm5a to z-axis <86.906593> speed <18.131868>;
		turn arm8a to z-axis <-86.906593> speed <21.373626>;
		turn arm8b to z-axis <-78.115385> speed <40.164835>;
		turn arm5b to z-axis <77.763736> speed <16.192308>;
		
		sleep 543;
	}
	if( TRUE )
	{
		move pad to z-axis [3.000000] speed [13.119995];
		sleep 583;
	}
	sleep 703;
}

deactivatescr()
{
	if( TRUE )
	{
		move pad to z-axis [0.000000] speed [13.119995];
		sleep 200;
	}
	if( TRUE )
	{
		move clamp1 to x-axis [17.100000] now;
		move clamp2 to x-axis [17.209998] now;
		move clamp3 to x-axis [-17.039996] now;
		move clamp4 to x-axis [-17.269995] now;

		turn crane to x-axis <-90.076923> now;
		turn clamp4b to z-axis <0.000000> now;
		turn clamp3b to z-axis <0.000000> now;
		turn clamp2b to z-axis <0.000000> now;
		turn clamp1b to z-axis <0.000000> now;
		turn arm1a to z-axis <86.906593> now;
		turn arm2a to z-axis <86.565934> now;
		turn arm3a to z-axis <-83.747253> now;
		turn arm4a to z-axis <-86.906593> now;
		turn arm4b to z-axis <-78.115385> now;
		turn arm3b to z-axis <-74.945055> now;
		turn arm2b to z-axis <78.467033> now;
		turn arm1b to z-axis <77.763736> now;


		move clamp5 to x-axis [17.100000] now;
		move clamp6 to x-axis [17.209998] now;
		move clamp7 to x-axis [-17.039996] now;
		move clamp8 to x-axis [-17.269995] now;

//		turn crane to x-axis <-90.076923> now;
		turn clamp8b to z-axis <0.000000> now;
		turn clamp7b to z-axis <0.000000> now;
		turn clamp6b to z-axis <0.000000> now;
		turn clamp5b to z-axis <0.000000> now;
		turn arm5a to z-axis <86.906593> now;
		turn arm6a to z-axis <86.565934> now;
		turn arm7a to z-axis <-83.747253> now;
		turn arm8a to z-axis <-86.906593> now;
		turn arm8b to z-axis <-78.115385> now;
		turn arm7b to z-axis <-74.945055> now;
		turn arm6b to z-axis <78.467033> now;
		turn arm5b to z-axis <77.763736> now;


		sleep 200;
	}
	if( TRUE )
	{
//		move arm1a to z-axis [0.000000] speed [24.500000];
//		move arm4a to z-axis [0.000000] speed [24.500000];
		sleep 200;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <77.054945> speed <49.258242>;
		turn arm4a to z-axis <-75.285714> speed <58.049451>;
		turn arm4b to z-axis <-56.291209> speed <109.071429>;
		turn arm1b to z-axis <68.961538> speed <43.978022>;
		
		turn arm5a to z-axis <77.054945> speed <49.258242>;
		turn arm8a to z-axis <-75.285714> speed <58.049451>;
		turn arm8b to z-axis <-56.291209> speed <109.071429>;
		turn arm5b to z-axis <68.961538> speed <43.978022>;
		
		sleep 200;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <59.461538> speed <87.967033>;
		turn arm2a to z-axis <73.884615> speed <63.335165>;
		turn arm3a to z-axis <-73.175824> speed <52.780220>;
		turn arm4a to z-axis <-53.478022> speed <109.071429>;
		turn arm4b to z-axis <-36.214286> speed <100.269231>;
		turn arm1b to z-axis <40.467033> speed <142.500000>;
		
		turn arm5a to z-axis <59.461538> speed <87.967033>;
		turn arm6a to z-axis <73.884615> speed <63.335165>;
		turn arm7a to z-axis <-73.175824> speed <52.780220>;
		turn arm8a to z-axis <-53.478022> speed <109.071429>;
		turn arm8b to z-axis <-36.214286> speed <100.269231>;
		turn arm5b to z-axis <40.467033> speed <142.500000>;
		
		sleep 200;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <26.021978> speed <167.148352>;
		turn arm2a to z-axis <41.868132> speed <160.115385>;
		turn arm3a to z-axis <-42.554945> speed <153.054945>;
		turn arm4a to z-axis <-25.324176> speed <140.752747>;
		turn arm4b to z-axis <0.000000> speed <181.208791>;
		turn arm3b to z-axis <-29.912088> speed <225.203297>;
		turn arm2b to z-axis <26.741758> speed <258.642857>;
		turn arm1b to z-axis <0.000000> speed <202.346154>;
		
		turn arm5a to z-axis <26.021978> speed <167.148352>;
		turn arm6a to z-axis <41.868132> speed <160.115385>;
		turn arm7a to z-axis <-42.554945> speed <153.054945>;
		turn arm8a to z-axis <-25.324176> speed <140.752747>;
		turn arm8b to z-axis <0.000000> speed <181.208791>;
		turn arm7b to z-axis <-29.912088> speed <225.203297>;
		turn arm6b to z-axis <26.741758> speed <258.642857>;
		turn arm5b to z-axis <0.000000> speed <202.346154>;
		
		sleep 200;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <8.087912> speed <89.719780>;
		turn arm2a to z-axis <20.043956> speed <109.071429>;
		turn arm3a to z-axis <-19.340659> speed <116.115385>;
		turn arm4a to z-axis <-11.247253> speed <70.373626>;
		turn arm3b to z-axis <0.000000> speed <149.554945>;
		turn arm2b to z-axis <0.000000> speed <133.719780>;
		
		turn arm5a to z-axis <8.087912> speed <89.719780>;
		turn arm6a to z-axis <20.043956> speed <109.071429>;
		turn arm7a to z-axis <-19.340659> speed <116.115385>;
		turn arm8a to z-axis <-11.247253> speed <70.373626>;
		turn arm7b to z-axis <0.000000> speed <149.554945>;
		turn arm6b to z-axis <0.000000> speed <133.719780>;
		
		sleep 200;
	}
	if( TRUE )
	{
		turn arm1a to z-axis <0.000000> speed <40.467033>;
		turn arm2a to z-axis <0.000000> speed <100.280220>;
		turn arm3a to z-axis <0.000000> speed <96.758242>;
		turn arm4a to z-axis <0.000000> speed <56.291209>;
		
		turn arm5a to z-axis <0.000000> speed <40.467033>;
		turn arm6a to z-axis <0.000000> speed <100.280220>;
		turn arm7a to z-axis <0.000000> speed <96.758242>;
		turn arm8a to z-axis <0.000000> speed <56.291209>;
		
		sleep 200;
	}
	if( TRUE )
	{
		turn crane to x-axis <-92.901099> speed <14.071429>;
		sleep 200;
	}
	if( TRUE )
	{
		turn crane to x-axis <-91.131868> speed <8.791209>;
		sleep 200;
	}
	if( TRUE )
	{
		turn crane to x-axis <-87.967033> speed <15.818681>;
		sleep 200;
	}
	if( TRUE )
	{
		turn crane to x-axis <-83.049451> speed <24.620879>;
		sleep 200;
	}
	if( TRUE )
	{
		turn crane to x-axis <-64.384615> speed <93.241758>;
		sleep 200;
	}
	if( TRUE )
	{
		turn crane to x-axis <-48.560440> speed <79.164835>;
		sleep 200;
	}
	if( TRUE )
	{
		turn crane to x-axis <-37.274725> speed <56.291209>;
		turn clamp3b to z-axis <-36.934066> speed <184.741758>;
		turn clamp2b to z-axis <39.769231> speed <198.813187>;

//		turn crane to x-axis <-37.274725> speed <56.291209>;
		turn clamp7b to z-axis <-36.934066> speed <184.741758>;
		turn clamp6b to z-axis <39.769231> speed <198.813187>;

		sleep 200;
	}
	if( TRUE )
	{
		turn crane to x-axis <-24.961538> speed <61.560440>;
		turn clamp4b to z-axis <-36.247253> speed <181.219780>;
		turn clamp3b to z-axis <13.010989> speed <249.846154>;
		turn clamp2b to z-axis <-13.362637> speed <265.670330>;
		turn clamp1b to z-axis <39.384615> speed <197.065934>;

//		turn crane to x-axis <-24.961538> speed <61.560440>;
		turn clamp8b to z-axis <-36.247253> speed <181.219780>;
		turn clamp7b to z-axis <13.010989> speed <249.846154>;
		turn clamp6b to z-axis <-13.362637> speed <265.670330>;
		turn clamp5b to z-axis <39.384615> speed <197.065934>;

		sleep 200;
	}
	if( TRUE )
	{
		move clamp2 to x-axis [12.639996] speed [9.000000];
		move clamp3 to x-axis [-12.539996] speed [8.750000];

		turn crane to x-axis <-10.192308> speed <73.884615>;
		turn clamp4b to z-axis <15.818681> speed <260.401099>;
		turn clamp3b to z-axis <41.164835> speed <140.752747>;
		turn clamp2b to z-axis <-41.164835> speed <138.989011>;
		turn clamp1b to z-axis <-14.071429> speed <267.434066>;

		move clamp6 to x-axis [12.639996] speed [9.000000];
		move clamp7 to x-axis [-12.539996] speed [8.750000];

//		turn crane to x-axis <-10.192308> speed <73.884615>;
		turn clamp8b to z-axis <15.818681> speed <260.401099>;
		turn clamp7b to z-axis <41.164835> speed <140.752747>;
		turn clamp6b to z-axis <-41.164835> speed <138.989011>;
		turn clamp5b to z-axis <-14.071429> speed <267.434066>;

		sleep 200;
	}
	if( TRUE )
	{
		move clamp1 to x-axis [12.729999] speed [8.000000];
		move clamp2 to x-axis [8.600000] speed [21.250000];
		move clamp3 to x-axis [-8.219995] speed [22.750000];
		move clamp4 to x-axis [-13.059998] speed [7.000000];
		turn crane to x-axis <0.000000> speed <51.010989>;
		turn clamp4b to z-axis <41.164835> speed <126.675824>;
		turn clamp1b to z-axis <-42.554945> speed <142.510989>;
		
		move clamp5 to x-axis [12.729999] speed [8.000000];
		move clamp6 to x-axis [8.600000] speed [21.250000];
		move clamp7 to x-axis [-8.219995] speed [22.750000];
		move clamp8 to x-axis [-13.059998] speed [7.000000];
//		turn crane to x-axis <0.000000> speed <51.010989>;
		turn clamp8b to z-axis <41.164835> speed <126.675824>;
		turn clamp5b to z-axis <-42.554945> speed <142.510989>;
		
		sleep 200;
	}
	if( TRUE )
	{
		move clamp1 to x-axis [8.359998] speed [23.000000];
		move clamp2 to x-axis [0.000000] speed [45.250000];
		move clamp3 to x-axis [0.000000] speed [43.250000];
		move clamp4 to x-axis [-7.929999] speed [27.000000];
		
		move clamp5 to x-axis [8.359998] speed [23.000000];
		move clamp6 to x-axis [0.000000] speed [45.250000];
		move clamp7 to x-axis [0.000000] speed [43.250000];
		move clamp8 to x-axis [-7.929999] speed [27.000000];
		
		sleep 200;
	}
	if( TRUE )
	{
		move clamp1 to x-axis [0.000000] speed [44.000000];
		move clamp4 to x-axis [0.000000] speed [41.750000];
		turn clamp4b to z-axis <36.598901> speed <22.851648>;
		turn clamp3b to z-axis <37.274725> speed <19.340659>;
		turn clamp2b to z-axis <-39.384615> speed <8.791209>;
		turn clamp1b to z-axis <-39.054945> speed <17.582418>;
		
		move clamp5 to x-axis [0.000000] speed [44.000000];
		move clamp8 to x-axis [0.000000] speed [41.750000];
		turn clamp8b to z-axis <36.598901> speed <22.851648>;
		turn clamp7b to z-axis <37.274725> speed <19.340659>;
		turn clamp6b to z-axis <-39.384615> speed <8.791209>;
		turn clamp5b to z-axis <-39.054945> speed <17.582418>;
		
		sleep 200;
	}
	if( TRUE )
	{
		turn clamp4b to z-axis <28.851648> speed <38.708791>;
		turn clamp3b to z-axis <34.483516> speed <14.071429>;
		turn clamp2b to z-axis <-32.703297> speed <33.423077>;
		turn clamp1b to z-axis <-30.972527> speed <40.467033>;
		
		turn clamp8b to z-axis <28.851648> speed <38.708791>;
		turn clamp7b to z-axis <34.483516> speed <14.071429>;
		turn clamp6b to z-axis <-32.703297> speed <33.423077>;
		turn clamp5b to z-axis <-30.972527> speed <40.467033>;
		
		sleep 200;
	}
	if( TRUE )
	{
		turn clamp4b to z-axis <0.000000> speed <144.274725>;
		turn clamp3b to z-axis <0.000000> speed <172.428571>;
		turn clamp2b to z-axis <0.000000> speed <163.626374>;
		turn clamp1b to z-axis <0.000000> speed <154.835165>;
		
		turn clamp8b to z-axis <0.000000> speed <144.274725>;
		turn clamp7b to z-axis <0.000000> speed <172.428571>;
		turn clamp6b to z-axis <0.000000> speed <163.626374>;
		turn clamp5b to z-axis <0.000000> speed <154.835165>;
		
		sleep 200;
	}
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	building=1;
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	building=0;
}

go()
{
	dont-cache arm1a;
	dont-cache arm1b;
	dont-cache arm2a;
	dont-cache arm2b;
	dont-cache arm3a;
	dont-cache arm3b;
	dont-cache arm4a;
	dont-cache arm4b;
	dont-cache arm5a;
	dont-cache arm5b;
	dont-cache arm6a;
	dont-cache arm6b;
	dont-cache arm7a;
	dont-cache arm7b;
	dont-cache arm8a;
	dont-cache arm8b;

	dont-cache clamp1;
	dont-cache clamp1b;
	dont-cache clamp2;
	dont-cache clamp2b;
	dont-cache clamp3;
	dont-cache clamp3b;
	dont-cache clamp4;
	dont-cache clamp4b;
	dont-cache clamp5;
	dont-cache clamp5b;
	dont-cache clamp6;
	dont-cache clamp6b;
	dont-cache clamp7;
	dont-cache clamp7b;
	dont-cache clamp8;
	dont-cache clamp8b;

	dont-cache crane;
	dont-cache extend;

	dont-cache lathe1;
	dont-cache lathe2;
	dont-cache lathe3;
	dont-cache lathe4;
	dont-cache lathe5;
	dont-cache lathe6;
	dont-cache lathe7;
	dont-cache lathe8;

	dont-cache pad;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache arm1a;
	cache arm1b;
	cache arm2a;
	cache arm2b;
	cache arm3a;
	cache arm3b;
	cache arm4a;
	cache arm4b;
	cache arm5a;
	cache arm5b;
	cache arm6a;
	cache arm6b;
	cache arm7a;
	cache arm7b;
	cache arm8a;
	cache arm8b;

	cache clamp1;
	cache clamp1b;
	cache clamp2;
	cache clamp2b;
	cache clamp3;
	cache clamp3b;
	cache clamp4;
	cache clamp4b;
	cache clamp5;
	cache clamp5b;
	cache clamp6;
	cache clamp6b;
	cache clamp7;
	cache clamp7b;
	cache clamp8;
	cache clamp8b;

	cache crane;
	cache extend;
	
	cache lathe1;
	cache lathe2;
	cache lathe3;
	cache lathe4;
	cache lathe5;
	cache lathe6;
	cache lathe7;
	cache lathe8;
	
	cache pad;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}




Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	building=0;
	
	dont-shade light1;
	dont-cache light1;
	dont-shade light2;
	dont-cache light2;
	
	dont-shade glow1;
	dont-cache glow1;
	dont-shade glow2;
	dont-cache glow2;
	dont-shade glow3;
	dont-cache glow3;
	dont-shade glow4;
	dont-cache glow4;
	dont-shade glow5;
	dont-cache glow5;
	dont-shade glow6;
	dont-cache glow6;
	dont-shade glow7;
	dont-cache glow7;
	dont-shade glow8;
	dont-cache glow8;
	
	dont-shade cranetop;
	dont-cache cranetop;

	dont-shade arm1a;
	dont-shade arm1b;
	dont-shade arm2a;
	dont-shade arm2b;
	dont-shade arm3a;
	dont-shade arm3b;
	dont-shade arm4a;
	dont-shade arm4b;
	dont-shade arm5a;
	dont-shade arm5b;
	dont-shade arm6a;
	dont-shade arm6b;
	dont-shade arm7a;
	dont-shade arm7b;
	dont-shade arm8a;
	dont-shade arm8b;

	dont-shade clamp1;
	dont-shade clamp1b;
	dont-shade clamp2;
	dont-shade clamp2b;
	dont-shade clamp3;
	dont-shade clamp3b;
	dont-shade clamp4;
	dont-shade clamp4b;
	dont-shade clamp5;
	dont-shade clamp5b;
	dont-shade clamp6;
	dont-shade clamp6b;
	dont-shade clamp7;
	dont-shade clamp7b;
	dont-shade clamp8;
	dont-shade clamp8b;
	
	dont-shade crane;
	dont-shade extend;
	
	dont-shade lathe1;
	dont-shade lathe2;
	dont-shade lathe3;
	dont-shade lathe4;
	dont-shade lathe5;
	dont-shade lathe6;
	dont-shade lathe7;
	dont-shade lathe8;
	
	dont-shade base;
	
	dont-shade pad;
	dont-shade radar;
	
	dont-shade pylon1;
	dont-shade pylon2;
	dont-shade pylon3;
	dont-shade pylon4;
	dont-shade pylon5;
	dont-shade pylon6;
	dont-shade pylon7;
	dont-shade pylon8;
	
	dont-shade housing;
	
	
	Static_Var_1 = 1;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
	spin radar around y-axis speed <150.032967>;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = nano1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = nano2;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = nano3;
	}
	if( Static_Var_1 == 4 )
	{
		piecenum = nano4;
	}
	if( Static_Var_1 == 5 )
	{
		piecenum = nano5;
	}
	if( Static_Var_1 == 6 )
	{
		piecenum = nano6;
	}
	if( Static_Var_1 == 7 )
	{
		piecenum = nano7;
	}
	if( Static_Var_1 == 8 )
	{
		piecenum = nano8;
	}
	
	++Static_Var_1;
	if( Static_Var_1 == 9 )
	{
		Static_Var_1 = 1;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = target;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1a type BITMAPONLY | BITMAP1;
		explode arm1b type BITMAPONLY | BITMAP1;
		explode arm2a type BITMAPONLY | BITMAP1;
		explode arm2b type BITMAPONLY | BITMAP1;
		explode arm3a type BITMAPONLY | BITMAP5;
		explode arm3b type BITMAPONLY | BITMAP1;
		explode arm4a type BITMAPONLY | BITMAP1;
		explode arm4b type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode clamp1 type BITMAPONLY | BITMAP5;
		explode clamp1b type BITMAPONLY | BITMAP1;
		explode clamp2 type BITMAPONLY | BITMAP1;
		explode clamp2b type BITMAPONLY | BITMAP1;
		explode clamp3 type BITMAPONLY | BITMAP1;
		explode clamp3b type BITMAPONLY | BITMAP5;
		explode clamp4 type BITMAPONLY | BITMAP1;
		explode clamp4b type BITMAPONLY | BITMAP1;
		explode glow1 type BITMAPONLY | BITMAP1;
		explode glow2 type BITMAPONLY | BITMAP1;
		explode glow3 type BITMAPONLY | BITMAP5;
		explode glow4 type BITMAPONLY | BITMAP1;
		explode crane type BITMAPONLY | BITMAP1;
		explode cranetop type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		explode light1 type BITMAPONLY | BITMAP5;
		explode lathe1 type BITMAPONLY | BITMAP1;
		explode lathe2 type BITMAPONLY | BITMAP1;
		explode lathe3 type BITMAPONLY | BITMAP1;
		explode lathe4 type BITMAPONLY | BITMAP1;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1a type FALL | BITMAP1;
		explode arm1b type FALL | BITMAP1;
		explode arm2a type FALL | BITMAP1;
		explode arm2b type FALL | BITMAP1;
		explode arm3a type FALL | BITMAP5;
		explode arm3b type FALL | BITMAP1;
		explode arm4a type FALL | BITMAP1;
		explode arm4b type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode clamp1 type BITMAPONLY | BITMAP5;
		explode clamp1b type FALL | BITMAP1;
		explode clamp2 type BITMAPONLY | BITMAP1;
		explode clamp2b type FALL | BITMAP1;
		explode clamp3 type BITMAPONLY | BITMAP1;
		explode clamp3b type FALL | BITMAP5;
		explode clamp4 type BITMAPONLY | BITMAP1;
		explode clamp4b type FALL | BITMAP1;
		explode glow1 type FALL | BITMAP1;
		explode glow2 type FALL | BITMAP1;
		explode glow3 type FALL | BITMAP5;
		explode glow4 type FALL | BITMAP1;
		explode crane type BITMAPONLY | BITMAP1;
		explode cranetop type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		explode light1 type BITMAPONLY | BITMAP5;
		explode lathe1 type FALL | BITMAP1;
		explode lathe2 type FALL | BITMAP1;
		explode lathe3 type FALL | BITMAP1;
		explode lathe4 type FALL | BITMAP1;
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode arm1b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode arm3a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode arm3b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode arm4a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode arm4b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode clamp1 type BITMAPONLY | BITMAP5;
		explode clamp1b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode clamp2 type BITMAPONLY | BITMAP1;
		explode clamp2b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode clamp3 type BITMAPONLY | BITMAP1;
		explode clamp3b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode clamp4 type BITMAPONLY | BITMAP1;
		explode clamp4b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode glow1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode glow2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode glow3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode glow4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode crane type BITMAPONLY | BITMAP1;
		explode cranetop type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		explode light1 type BITMAPONLY | BITMAP5;
		explode lathe1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lathe2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lathe3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lathe4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	}
	corpsetype = 3;
	explode arm1a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode arm1b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode arm2a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode arm2b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode arm3a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode arm3b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode arm4a type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode arm4b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode clamp1 type BITMAPONLY | BITMAP5;
	explode clamp1b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode clamp2 type BITMAPONLY | BITMAP1;
	explode clamp2b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode clamp3 type BITMAPONLY | BITMAP1;
	explode clamp3b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode clamp4 type BITMAPONLY | BITMAP1;
	explode clamp4b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode glow1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode glow2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode glow3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode glow4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode crane type BITMAPONLY | BITMAP1;
	explode cranetop type BITMAPONLY | BITMAP1;
	explode pad type BITMAPONLY | BITMAP1;
	explode light1 type BITMAPONLY | BITMAP5;
	explode lathe1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lathe2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lathe3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lathe4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
