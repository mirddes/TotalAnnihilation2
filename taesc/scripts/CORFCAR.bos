#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, land, beam1, beam2, beam3, body, arm1, arm2, arm3, arm4, arm5, arm6,
	   thrust1, thrust2, thrust3, thrust4, thrust5, thrust6;

static-var  statechg_DesiredState, statechg_StateChanging, flying, spray;

/*
OffScreenCheck(base_xz, base_x, base_z, ground, heading)
{
	while (flying)
	{
		signal 4;
		base_xz = get PIECE_XZ(base);
		base_x = base_xz / 65536;
		base_z = base_xz - base_x * 65536;
		ground = get GROUND_HEIGHT(get PIECE_XZ(base));
		if (base_z < 88 OR ground < 0) 
		{
			++dontfire;
			if (dontfire >= 60)
			{
				dontfire=60;
			}
		}
		if (base_z > 88 OR ground >= 0)
		{
			if (dontfire >= 1)								//3 second grace period - set to 4 if used, 1 if not
			{
				show naughty;
				set ARMORED to 0;
				set ACTIVATION to 0;
			}
//			if ((dontfire >= 1) && (dontfire < 4))			//This provides a warning, comment out if not used
//			{
//				show naughty;
//				sleep 250;
//				hide naughty;
//			}
		}	
		if (base_z > 88 && ground >= 0)
		{
			--dontfire;
			if (dontfire >= 1)								//set to 4 if warning used, 1 if not
			{
				show naughty;
				set ARMORED to 0;
				set ACTIVATION to 0;				
			}
			if (dontfire <= 0)								//set to 3 if warning used, 0 if not
			{
				dontfire=0;
				hide naughty;
				set ARMORED to 1;
				set ACTIVATION to 100;
				if (landed >= 1)
				{	
					set ACTIVATION to 0;
					set ARMORED to 0;
				}	
			}
		}
		sleep 1000;
	}
}
*/

activatescr()
{
	if( TRUE )
	{
		flying=1;
//		start-script OffScreenCheck();
		
		turn arm1 to y-axis <45> speed <25.000000>;
		turn arm3 to y-axis <-45> speed <25.000000>;
		turn arm4 to y-axis <-45> speed <25.000000>;
		turn arm6 to y-axis <45> speed <25.000000>;
		
		move arm2 to x-axis [-4.000000] speed [25.000000];
		move arm5 to x-axis [4.000000] speed [25.000000];
		
		sleep 998;
	}
	sleep 44;
}

deactivatescr()
{
	if( TRUE )
	{
		
		turn arm1 to y-axis <0> speed <25.000000>;
		turn arm3 to y-axis <0> speed <25.000000>;
		turn arm4 to y-axis <0> speed <25.000000>;
		turn arm6 to y-axis <0> speed <25.000000>;
				
		move arm2 to x-axis [0.000000] speed [25.000000];
		move arm5 to x-axis [0.000000] speed [25.000000];
		
		sleep 998;
		
		flying=0;
	}
	sleep 44;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from base;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

flames()
{
	while(1)
	{
		if (flying)
		{
			emit-sfx 0 from thrust1;
			emit-sfx 0 from thrust2;
			emit-sfx 0 from thrust3;
			emit-sfx 0 from thrust4;
			emit-sfx 0 from thrust5;
			emit-sfx 0 from thrust6;
		}	
		
		sleep 33;
	}
}

Create()
{
	move body to y-axis [45] now;
	flying = 0;
//	dontfire = 0;
//	dont-cache naughty;
	
//	move naughty to y-axis  [15] now;
//	hide naughty;
	
	spray = 0;
	
	call-script InitState();
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 1000;
	}
	start-script SmokeUnit();
	start-script flames();
	move body to y-axis [0] speed [10];
}

Activate()
{
	set ARMORED to 1;
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
	set ARMORED to 0;
}

QueryLandingPad(Func_Var_1)
{
	Func_Var_1 = land;
//	Func_Var_2 = 6;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray == 1 )
	{
		piecenum = beam2;
	}
	if( spray == 2 )
	{
		piecenum = beam3;
	}
	++spray;
	if( spray >= 3 )
	{
		spray = 0;
	}
//	spray = !spray;
}

/*
StartBuilding()
{
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = base;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP5;
		explode arm3 type BITMAPONLY | BITMAP1;
		explode arm4 type BITMAPONLY | BITMAP1;
		explode thrust1 type BITMAPONLY | BITMAP1;
		explode thrust2 type BITMAPONLY | BITMAP5;
		explode thrust3 type BITMAPONLY | BITMAP1;
		explode thrust4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode arm2 type FALL | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP5;
		explode arm3 type BITMAPONLY | BITMAP1;
		explode arm4 type FALL | BITMAP1;
		explode thrust1 type SHATTER | BITMAP1;
		explode thrust2 type BITMAPONLY | BITMAP5;
		explode thrust3 type FALL | BITMAP1;
		explode thrust4 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP5;
		explode arm3 type BITMAPONLY | BITMAP1;
		explode arm4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrust1 type SHATTER | BITMAP1;
		explode thrust2 type SHATTER | BITMAP5;
		explode thrust3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrust4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 4;
	explode base type BITMAPONLY | BITMAP1;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode arm1 type BITMAPONLY | BITMAP5;
	explode arm3 type BITMAPONLY | BITMAP1;
	explode arm4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrust1 type SHATTER | BITMAP1;
	explode thrust2 type SHATTER | BITMAP5;
	explode thrust3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrust4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
