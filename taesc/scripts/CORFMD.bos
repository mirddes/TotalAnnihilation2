#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, dummy, wedge, drawer;

static-var  Static_Var_1, bAiming;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_AIM				2

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Unit's maxdamage value (not percentage)
#ifndef HEALTH_VAL
#define HEALTH_VAL 76
#endif

// Is unit cloaked
#ifndef CLOAKED
#define CLOAKED 77
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif


Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
				if (!bAiming)
				{
					set ARMORED to 1;
				}
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
				if (!bAiming)
				{
					set ARMORED to 1;
				}
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	set ARMORED to 1;
	
	dont-shade dummy;
	dont-shade drawer;
	dont-shade dummy;
	dont-shade wedge;
	Static_Var_1 = 0;
	bAiming = FALSE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 15000;
	set-signal-mask 0;
	Static_Var_1 = 0;
	bAiming = TRUE;
	set ARMORED to 1;
	move wedge to x-axis [2.289996] now;
	move drawer to y-axis [9.400000] now;
	move dummy to x-axis [-2.089996] now;
	move dummy to x-axis [0.000000] speed [20.000000];
	move drawer to y-axis [0.000000] speed [32.000000];
	sleep 300;
	move wedge to x-axis [0.000000] speed [20.000000];
	sleep 650;
	cache drawer;
	cache dummy;
	cache wedge;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	while( bAiming )
	{
		sleep 150;
	}
	if( !Static_Var_1 )
	{
		bAiming = TRUE;
		dont-cache drawer;
		dont-cache dummy;
		dont-cache wedge;
		move wedge to x-axis [0.000000] now;
		move wedge to x-axis [2.289996] speed [20.000000];
		sleep 125;
		move drawer to y-axis [9.400000] speed [32.100000];
		move dummy to x-axis [-2.089996] speed [20.000000];
		sleep 300;
		set ARMORED to 0;
		if(( shield_on || dome_on))
		{
			set ARMORED to 1;
		}
		Static_Var_1 = 1;
		bAiming = FALSE;
	}
	signal SIG_AIM;
	set-signal-mask 0;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	bAiming = TRUE;
	hide dummy;
	sleep 150;
	move wedge to x-axis [2.289996] now;
	move drawer to y-axis [9.400000] now;
	move dummy to x-axis [0.250000] now;
	move drawer to y-axis [0.000000] speed [33.400000];
	sleep Rand( 250, 1000 );
	show dummy;
	move wedge to x-axis [2.289996] now;
	move drawer to y-axis [0.000000] now;
	move drawer to y-axis [9.400000] speed [44.000000];
	sleep 225;
	move dummy to x-axis [-2.039996] speed [40.000000];
	sleep Rand( 100, 450 );
	bAiming = FALSE;
}

QueryPrimary(piecenum)
{
	piecenum = dummy;
}

AimFromPrimary(piecenum)
{
	piecenum = dummy;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode dummy type BITMAPONLY | BITMAP1;
		explode wedge type BITMAPONLY | BITMAP5;
		explode drawer type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode dummy type BITMAPONLY | BITMAP1;
		explode wedge type FALL | BITMAP5;
		explode drawer type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode dummy type BITMAPONLY | BITMAP1;
		explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode drawer type SHATTER | BITMAP5;
		return (0);
	}
	explode base type BITMAPONLY | BITMAP1;
	explode dummy type BITMAPONLY | BITMAP1;
	explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode drawer type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
