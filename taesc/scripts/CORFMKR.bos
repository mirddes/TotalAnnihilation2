#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, float1, float2, float3, float4, float5, float6, door1,
       door2, door3, door4, glow, arm1, arm2;

static-var  statechg_DesiredState, statechg_StateChanging, closed ;
static-var	shield_on, nbr_shield, dome_on, nbr_dome, metal_on, nbr_metal ; 

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		nbr_metal = 0;
		
		shgen_count = 0;
/*		
		for (shgen_id = min; shgen_id < max; ++shgen_id)
		{
			if((!get UNIT_ALLIED(shgen_ID)) == 1)
			{
				h = get UNIT_HEIGHT(shgen_id);
				if(h == 13600954 || 11848867 )
				{
					shgen_count = 1;
				}
				break;
			}
		}
*/		
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
/*			
			if((!get UNIT_ALLIED(unit_ID)) == 1)	
			{	
				if(get UNIT_HEIGHT(unit_id)==METAL_UPGRADE_HEIGHT)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==100)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						{
							++nbr_metal;
						}
					}
				}
			}
*/
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
				if (closed)
				{
					set ARMORED to 1;
				}	
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
				if (closed)
				{
					set ARMORED to 1;
				}	
			}
		}	
/*
		if(nbr_metal>=1)
		{
			if(!metal_on)
			{
				metal_on = 1;
				set ACTIVATION to 0;
				sleep 50;
			}
		}
		if(nbr_metal==0)
		{
			if(metal_on)
			{
				metal_on = 0;
				set ACTIVATION to 1;
				sleep 50;
			}
		}	
*/
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	


activatescr()
{
	if( TRUE )
	{
		move float1 to y-axis [0.000000] now;
		move float1 to z-axis [0.000000] now;
		move float1 to z-axis [-2.150000] speed [2.232605];
		move float2 to x-axis [0.000000] now;
		move float2 to x-axis [-1.799994] speed [1.869153];
		move float2 to y-axis [0.000000] now;
		move float2 to z-axis [0.000000] now;
		move float2 to z-axis [-1.050000] speed [1.090338];
		move float3 to x-axis [0.000000] now;
		move float3 to x-axis [-1.750000] speed [1.817236];
		move float3 to y-axis [0.000000] now;
		move float3 to z-axis [0.000000] now;
		move float3 to z-axis [0.999994] speed [1.038416];
		move float4 to y-axis [0.000000] now;
		move float4 to z-axis [0.000000] now;
		move float4 to z-axis [2.150000] speed [2.232605];
		move float5 to x-axis [0.000000] now;
		move float5 to x-axis [1.849994] speed [1.921075];
		move float5 to y-axis [0.000000] now;
		move float5 to z-axis [0.000000] now;
		move float5 to z-axis [1.100000] speed [1.142261];
		move float6 to x-axis [0.000000] now;
		move float6 to x-axis [1.850000] speed [1.921075];
		move float6 to y-axis [0.000000] now;
		move float6 to z-axis [0.000000] now;
		move float6 to z-axis [-1.050000] speed [1.090338];
		sleep 963;
	}
	if( TRUE )
	{
		turn door1 to x-axis <-90.021978> speed <92.994505>;
		turn door2 to x-axis <90.021978> speed <92.994505>;
		turn door3 to z-axis <90.021978> speed <92.994505>;
		turn door4 to z-axis <-90.021978> speed <92.994505>;
		sleep 968;
	}
	sleep 19;
}

deactivatescr()
{
	if( TRUE )
	{
		move float1 to y-axis [0.000000] now;
		move float1 to z-axis [-2.150000] now;
		move float2 to x-axis [-1.799994] now;
		move float2 to y-axis [0.000000] now;
		move float2 to z-axis [-1.050000] now;
		move float3 to x-axis [-1.750000] now;
		move float3 to y-axis [0.000000] now;
		move float3 to z-axis [0.999994] now;
		move float4 to y-axis [0.000000] now;
		move float4 to z-axis [2.150000] now;
		move float5 to x-axis [1.849994] now;
		move float5 to y-axis [0.000000] now;
		move float5 to z-axis [1.100000] now;
		move float6 to x-axis [1.850000] now;
		move float6 to y-axis [0.000000] now;
		move float6 to z-axis [-1.050000] now;
		turn door1 to x-axis <0.000000> speed <90.197802>;
		turn door2 to x-axis <0.000000> speed <90.197802>;
		turn door3 to z-axis <0.000000> speed <90.197802>;
		turn door4 to z-axis <0.000000> speed <90.197802>;
		sleep 998;
	}
	if( TRUE )
	{
		move float1 to z-axis [-0.727332] speed [1.411377];
		move float2 to x-axis [-0.608923] speed [1.181616];
		move float2 to z-axis [-0.355206] speed [0.689276];
		move float3 to x-axis [-0.592010] speed [1.148792];
		move float3 to z-axis [0.338287] speed [0.656451];
		move float4 to z-axis [0.727325] speed [1.411377];
		move float5 to x-axis [0.625842] speed [1.214441];
		move float5 to z-axis [0.372119] speed [0.722095];
		move float6 to x-axis [0.625842] speed [1.214441];
		move float6 to z-axis [-0.355206] speed [0.689276];
		sleep 1008;
	}
	sleep 32;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	move base to y-axis [0.000000] speed [5.000000];
	
	closed = 0;
	
	set ARMORED to 0;
	if(( shield_on || dome_on))
	{
		set ARMORED to 1;
	}	
	if(metal_on)
	{
		set ACTIVATION to 0;
	}
}

Stop()
{
	call-script deactivatescr();
	move base to y-axis [-5.000000] speed [5.000000];
	
	closed = 1;
	
	set ARMORED to 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


Create()
{
	nbr_shield = 0;
	nbr_dome = 0;
	nbr_metal = 0;
	
	shield_on = 0;
	dome_on = 0;
	metal_on = 0;
	
	closed = 0;
	
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade float1;
	dont-shade float2;
	dont-shade float3;
	dont-shade float4;
	dont-shade float5;
	dont-shade float6;
	dont-cache base;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache float1;
	dont-cache float2;
	dont-cache float3;
	dont-cache float4;
	dont-cache float5;
	dont-cache float6;
	dont-cache glow;
	dont-shade glow;
	call-script InitState();
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
}


Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode door3 type BITMAPONLY | BITMAP1;
		explode door4 type BITMAPONLY | BITMAP5;
		explode float1 type BITMAPONLY | BITMAP1;
		explode float2 type BITMAPONLY | BITMAP1;
		explode float3 type BITMAPONLY | BITMAP1;
		explode float4 type BITMAPONLY | BITMAP1;
		explode float5 type BITMAPONLY | BITMAP5;
		explode float6 type BITMAPONLY | BITMAP1;
		explode glow type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type FALL | BITMAP1;
		explode door2 type FALL | BITMAP1;
		explode door3 type FALL | BITMAP1;
		explode door4 type FALL | BITMAP5;
		explode float1 type FALL | BITMAP1;
		explode float2 type FALL | BITMAP1;
		explode float3 type FALL | BITMAP1;
		explode float4 type FALL | BITMAP1;
		explode float5 type FALL | BITMAP5;
		explode float6 type FALL | BITMAP1;
		explode glow type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode float1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode float2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode float3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode float4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode float5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode float6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode glow type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode float1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode float2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode float3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode float4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode float5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode float6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode glow type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
