#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, globebottom, towers, globetop, shining, fins, wtf, wtf2, this, body, flashtur, flashpoint ;

static-var shared, upgraded;
static-var shield_on, charge_on, nbr_charge, nbr_shield, dome_on, nbr_dome ; 


//#define SIG_HIT 2


#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif
/*
#define talfus 6970681
#define talckfus 6136734
#define armfus 3319069
#define armckfus 3384605
#define corfus 4247847
#define corckfus 4247847
#define corsfus 5093181
#define armsfus 4813814
*/

#define armfusSize ([16] + [1.25])
#define armckfusSize ([16] + [1.25])
#define corfusSize ([16] + [1.25])
#define corckfusSize ([16] + [1.25])
#define talfusSize ([22.4] + [2.5])
#define talckfusSize ([22.4] + [2.5])
#define corsfusSize ([32] + [5])
#define armsfusSize ([32] + [5])

#define mySize corfusSize

Detect()
{
	shared = 0;
	sleep rand(500,5000);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	max = (get MAX_ID);
	min = (get MIN_ID);
	
//	var h;
//	var shgen_id;
//	var shgen_count;
		
	while (1)
	{
		nbr_charge = 0;
		nbr_shield = 0;
		nbr_dome = 0;
		
//		shgen_count = 0;
		
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
						//	shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
						//	shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
						//	shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
						//	shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_CHARGE)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= BOOST_RADIUS)
						{
							++nbr_charge;
//							++nbr_charge;
						}
					}
				}
				if((get UNIT_BUILD_PERCENT_LEFT(unit_ID)) == 0)
				{
					height = get UNIT_HEIGHT(unit_ID);
					if((height == CORSFUS) || (height == ARMSFUS))
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= mySize + corsfusSize)
						{
							++nbr_charge;
							++nbr_charge;
						}
					}
					if((height == CORFUS) || (height == CORCKFUS))
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= mySize + corfusSize)
						{
							++nbr_charge;
							++nbr_charge;
						}
					}
					if((height == TALFUS) || (height == TALCKFUS))
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= mySize + talfusSize)
						{
							++nbr_charge;
							++nbr_charge;
						}
					}
					if((height == ARMFUS) || (height == ARMCKFUS))
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= mySize + armfusSize)
						{
							++nbr_charge;
							++nbr_charge;
						}
					}
				}
			}
			if((!get UNIT_ALLIED(unit_ID)) == 1)	
			{	
				if(get UNIT_HEIGHT(unit_id)==METAL_UPGRADE_HEIGHT)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==100)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						{
							--nbr_charge;
							--nbr_charge;
							--nbr_charge;
							--nbr_charge;
						}
					}
				}
			}
		}
		if (nbr_charge < 4)
		{
			shared = 0;
			set ACTIVATION to 0;
			hide shining;
			show globetop;
			show globebottom;
			
		}
		if (nbr_charge >= 4)
		{
			shared = 1;
			set ACTIVATION to 1;
			spin shining around y-axis speed <15>;
			show shining;
			hide globetop;
			hide globebottom;
			
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(upgraded)
				{
					set ARMORED to 1;	
				}
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(upgraded)
				{
					set ARMORED to 1;	
				}
			}
		}	
		sleep rand(4000,6000);
	}
}

Upgrade()
{
	var xz, x, z, unit_ID, distance;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	var myid;
	myid= get MY_ID;
//	if (get UNIT_IS_ON_THIS_COMP(get(MY_ID)))
//	{
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if(unit_ID != myid)
			{
				if(get UNIT_HEIGHT(unit_ID) == 4680548)
				{
					xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
					SECURE_XZ;
					distance=get XZ_HYPOT(xz);
					if (distance <= [25])
					{
						if (get UNIT_IS_ON_THIS_COMP(get(MY_ID)))
						{
							if (get UNIT_IS_ON_THIS_COMP(unit_ID))
							{
								drop-unit unit_ID;
								attach-unit unit_ID to this;
							}
						}
						hide base;
						hide fins;
//						show circle;
						show wtf;
						show wtf2;
						show body;
						upgraded = 1;
						set ARMORED to 1;
						set INBUILDSTANCE to 0;
						return(0);
					}
				}
			}
		}
//	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 2;
	set-signal-mask 2;
	if( Static_Var_3 )
	{
		var Func_Var_3;
		Func_Var_3 = Static_Var_4 - get HEALTH;
		Static_Var_4 = get HEALTH;
		var Func_Var_4;
		Func_Var_4 = 0;
		while( Func_Var_4 < Func_Var_3 + 1 )
		{
			turn flashtur to y-axis get ATAN(Func_Var_2,Func_Var_1) + Rand( ( <0.000000> - Func_Var_4 ) * <10.000000>, Func_Var_4 * <10.000000> ) now;
			explode flashpoint type BITMAPONLY | BITMAP5;
			sleep 10;
			++Func_Var_4;
		}
		sleep 400;
	}
}
*/

Create()
{
	nbr_charge = 0;
	nbr_shield = 0;
	nbr_dome = 0;	
	
	charge_on = 0;
	shield_on = 0;
	dome_on =0;
	
	upgraded =0;
	
	dont-shade towers;
	dont-shade wtf2;
	dont-shade globetop;
	dont-shade globebottom;
	dont-cache shining;
	
	hide shining;
	hide wtf;
	hide wtf2;
	hide body;	
	
	set INBUILDSTANCE to 1;
	
	set ARMORED to 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
//	previoushealth=get HEALTH;
}

/*
Activate()
{
	if (nbr_charge < 2)
	{
		shared = 0;
		set ACTIVATION to 0;
	}
}

Deactivate()
{
	if (nbr_charge >= 2)
	{
		shared = 1;
		set ACTIVATION to 1;
	}
}
*/

StopBuilding()
{

	show fins;
	show base;
	hide body;
	sleep 1;
	set INBUILDSTANCE to 1;
	call-script upgrade();
}

StartBuilding()
{
	set INBUILDSTANCE to 0;
//	set ACTIVATION to 0;
	hide fins;
	hide base;
	show body;
	sleep 1;
}

QueryBuildInfo(piecenum)
{
	piecenum = this;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( upgraded == 1 )
	{
		if( severity <= 80 )
		{
			corpsetype = 1;
			explode base type BITMAPONLY | BITMAP1;
			explode globetop type BITMAPONLY | BITMAP1;
			explode globebottom type BITMAPONLY | BITMAP1;
			explode towers type BITMAPONLY | BITMAP1;
			explode wtf type BITMAPONLY | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode globetop type BITMAPONLY | BITMAP1;
		explode globebottom type BITMAPONLY | BITMAP1;
		explode towers type BITMAPONLY | BITMAP1;
		explode wtf type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}	
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode globetop type BITMAPONLY | BITMAP1;
		explode globebottom type BITMAPONLY | BITMAP1;
		explode towers type BITMAPONLY | BITMAP1;
		explode wtf type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode globetop type BITMAPONLY | BITMAP1;
		explode globebottom type BITMAPONLY | BITMAP1;
		explode towers type BITMAPONLY | BITMAP1;
		explode wtf type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 4;
	explode base type BITMAPONLY | BITMAP1;
	explode globetop type BITMAPONLY | BITMAP1;
	explode globebottom type BITMAPONLY | BITMAP1;
	explode towers type BITMAPONLY | BITMAP1;
	explode wtf type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
