#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, body, turret, pivot, launcher, tube1, missile1, tube2, missile2, 
	   wake01, wake02, wake03, wake04, wake05, wake06, wake07, wake08;


static-var  Static_Var_1, restore_delay, gun_1, gun_3, weaponnum, bAiming, firing_1, firing_3, firedelay, weaponhold;
static-var  onoff, waiting, next ;	

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_ACTIVATE		16
#define SIG_MOVE			32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}
*/

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake01;
			emit-sfx 5 from wake02;
			emit-sfx 5 from wake03;
			emit-sfx 5 from wake04;
			emit-sfx 5 from wake05;
			emit-sfx 5 from wake06;
			emit-sfx 3 from wake07;
			emit-sfx 3 from wake08;
			emit-sfx 3 from wake01;
			emit-sfx 3 from wake02;
			emit-sfx 3 from wake03;
			emit-sfx 3 from wake04;
			emit-sfx 3 from wake05;
			emit-sfx 3 from wake06;
			emit-sfx 5 from wake07;
			emit-sfx 5 from wake08;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 5 from wake01;
			emit-sfx 5 from wake02;
			emit-sfx 5 from wake03;
			emit-sfx 5 from wake04;
			emit-sfx 5 from wake05;
			emit-sfx 5 from wake06;
			emit-sfx 3 from wake07;
			emit-sfx 3 from wake08;
			emit-sfx 3 from wake01;
			emit-sfx 3 from wake02;
			emit-sfx 3 from wake03;
			emit-sfx 3 from wake04;
			emit-sfx 3 from wake05;
			emit-sfx 3 from wake06;
			emit-sfx 5 from wake07;
			emit-sfx 5 from wake08;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	if( Static_Var_1 == 2 || Static_Var_1 == 1 )
	{
		dont-cache body;
		dont-cache turret;
		dont-cache launcher;
		dont-cache missile1;
		dont-cache missile2;
		dont-cache pivot;
	}
	if( Static_Var_1 != 2 && Static_Var_1 != 1 )
	{
		cache body;
		cache turret;
		cache launcher;
		cache missile1;
		cache missile2;
		cache pivot;
	}
}

Create()
{
	onoff = 0;
	waiting = 0;
	
	weaponnum=1;
	
	hide flare1;
	hide flare2;
	bAiming = FALSE;
	gun_1 = 0;
	gun_3 = 0;
	
	firing_1 = 0;
	firing_3 = 0;
	
	firedelay = 1350;
	weaponhold = 1500;
	
	restore_delay = 3000;
	start-script SmokeUnit();
}

Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	
	onoff = 1;
	waiting = 1;
	
	sleep 2000;
	
//	gun_2 = next;
	
	turn turret to y-axis 0 speed <150.027473>;
	turn launcher to x-axis <-90> speed <75.027473>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	
	sleep 1000;
	
	waiting = 0;
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	
	onoff = 0;
	waiting = 1;
	
	sleep 2000;
	
//	gun_1 = next;
	
	turn turret to y-axis <0.000000> speed <150.016484>;
	turn launcher to x-axis <0.000000> speed <75.005495>;
	
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	
	sleep 1000;
	
	waiting = 0;
}


SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep 12500;
//	weaponnum=0;
//	sleep 1500;
//	weaponnum=0;
//	if(weaponnum==0)
//	{
	turn turret to y-axis <0.000000> speed <180.016484>;
//	turn launcher to x-axis <0.000000> speed <50.005495>;
//	bAiming = FALSE;
//	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while ( onoff == 1 OR waiting == 1)
	{
		sleep weaponhold;
	}
//	weaponnum=1;
//	bAiming = TRUE;

	turn turret to y-axis heading speed <180.027473>;
	turn launcher to x-axis <0.000000> - pitch speed <90.027473>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	while( firing_1 )
	{
		sleep 50;
	}
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	if( gun_1 == 0 )
	{
		firing_1 = 1;
		show flare1;
		hide missile1;
		sleep 150;
		hide flare1;
		sleep firedelay;
		show missile1;
		firing_1 = 0;
	}
	if( gun_1 == 1 )
	{
		firing_1 = 1;
		show flare2;
		hide missile2;
		sleep 150;
		hide flare2;
		sleep firedelay;
		show missile2;
		firing_1 = 0;
	}
	++gun_1;
	if( gun_1 >= 2 )
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimTertiary()
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	while (onoff == 0 OR waiting == 1)
	{
		sleep weaponhold;
	}
//	weaponnum=3;
//	bAiming = TRUE;

	turn turret to y-axis 0 speed <180.027473>;
	turn launcher to x-axis <-90> speed <90.027473>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	while( firing_3 )
	{
		sleep 50;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		firing_3 = 1;
		show flare1;
		hide missile1;
		sleep 150;
		hide flare1;
		sleep firedelay;
		firing_3 = 0;
	}
	if( gun_3 == 1 )
	{
		firing_3 = 1;
		show flare2;
		hide missile2;
		sleep 150;
		hide flare2;
		sleep firedelay;
		firing_3 = 0;
	}
	++gun_3;
	if( gun_3 >= 2 )
	{
		gun_3 = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_3 == 1 )
	{
		piecenum = flare2;
	}
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	if( Static_Var_1 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode launcher type FALL | BITMAP1;
			explode body type BITMAPONLY | BITMAP5;
			explode missile1 type FALL | BITMAP1;
			explode turret type SHATTER | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP5;
		explode missile1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type SHATTER | BITMAP5;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode launcher type FALL | BITMAP1;
			explode body type BITMAPONLY | BITMAP5;
			explode missile1 type FALL | BITMAP1;
			explode turret type SHATTER | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP5;
		explode missile1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode launcher type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP5;
		explode missile1 type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode launcher type FALL | BITMAP1;
		explode body type BITMAPONLY | BITMAP5;
		explode missile1 type FALL | BITMAP1;
		explode turret type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP5;
		explode missile1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode body type BITMAPONLY | BITMAP5;
	explode missile1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
