#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare2a, flare2b, flare2c, flare2d, flare1a, flare1b, flare1c, flare1d,  
	   r1, r2, r3, r4, r5, r6, 
	   lflare1a, lflare1b, lflare2a, lflare2b, lflare3a, lflare3b, lflare4a, lflare4b,
	   base, body, box, arms, penta1, penta2, pipes, vlaunch, stand,  
	   turret1, sleeves1, barrel1a, barrel1b, barrel1c, barrel1d, 
	   turret2, sleeves2, barrel2a, barrel2b, barrel2c, barrel2d,	//43 
	   ltur1, lslv1, lbar1a, lbar1b, ltur2, lslv2, lbar2a, lbar2b,
	   ltur3, lslv3, lbar3a, lbar3b, ltur4, lslv4, lbar4a, lbar4b,
	   wake01a, wake02a, wake03a, wake04a, wake05a, wake06a, wake07a, wake08a, 
	   wake01b, wake02b, wake03b, wake04b, wake05b, wake06b, wake07b, wake08b, 
	   wakes_fore, wakes_aft;

static-var  Static_Var_1, restore_delay, gun_1, gun_2, gun_3, salvo_1, salvo_2, salvo_3, aimback, brb, wait;
static-var  firedelay, firing, firedelay_2, firing_2, firedelay_3, firing_3;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_R				16
#define SIG_MOVE			32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}
*/
StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake01a;
			emit-sfx 5 from wake02a;
			emit-sfx 5 from wake03a;
			emit-sfx 5 from wake04a;
			emit-sfx 5 from wake05a;
			emit-sfx 5 from wake06a;
			emit-sfx 5 from wake07a;
			emit-sfx 5 from wake08a;
			
			emit-sfx 3 from wake01a;
			emit-sfx 3 from wake02a;
			emit-sfx 3 from wake03a;
			emit-sfx 3 from wake04a;
			emit-sfx 3 from wake05a;
			emit-sfx 3 from wake06a;
			emit-sfx 3 from wake07a;
			emit-sfx 3 from wake08a;
			
			emit-sfx 5 from wake01b;
			emit-sfx 5 from wake02b;
			emit-sfx 5 from wake03b;
			emit-sfx 5 from wake04b;
			emit-sfx 5 from wake05b;
			emit-sfx 5 from wake06b;
			emit-sfx 5 from wake07b;
			emit-sfx 5 from wake08b;
			
			emit-sfx 3 from wake01b;
			emit-sfx 3 from wake02b;
			emit-sfx 3 from wake03b;
			emit-sfx 3 from wake04b;
			emit-sfx 3 from wake05b;
			emit-sfx 3 from wake06b;
			emit-sfx 3 from wake07b;
			emit-sfx 3 from wake08b;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 5 from wake01a;
			emit-sfx 5 from wake02a;
			emit-sfx 5 from wake03a;
			emit-sfx 5 from wake04a;
			emit-sfx 5 from wake05a;
			emit-sfx 5 from wake06a;
			emit-sfx 5 from wake07a;
			emit-sfx 5 from wake08a;
			
			emit-sfx 3 from wake01a;
			emit-sfx 3 from wake02a;
			emit-sfx 3 from wake03a;
			emit-sfx 3 from wake04a;
			emit-sfx 3 from wake05a;
			emit-sfx 3 from wake06a;
			emit-sfx 3 from wake07a;
			emit-sfx 3 from wake08a;
			
			emit-sfx 5 from wake01b;
			emit-sfx 5 from wake02b;
			emit-sfx 5 from wake03b;
			emit-sfx 5 from wake04b;
			emit-sfx 5 from wake05b;
			emit-sfx 5 from wake06b;
			emit-sfx 5 from wake07b;
			emit-sfx 5 from wake08b;
			
			emit-sfx 3 from wake01b;
			emit-sfx 3 from wake02b;
			emit-sfx 3 from wake03b;
			emit-sfx 3 from wake04b;
			emit-sfx 3 from wake05b;
			emit-sfx 3 from wake06b;
			emit-sfx 3 from wake07b;
			emit-sfx 3 from wake08b;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	if( Static_Var_1 == 2 || Static_Var_1 == 1 )
	{
		dont-cache body;
		dont-cache box;
		dont-cache arms;
		dont-cache penta1;
		dont-cache penta2;
		dont-cache stand;
		dont-cache pipes;
				
		dont-cache turret1;
		dont-cache sleeves1;
		dont-cache barrel1a;
		dont-cache barrel1b;
		dont-cache barrel1c;
		dont-cache barrel1d;
		dont-cache turret2;
		dont-cache sleeves2;
		dont-cache barrel2a;
		dont-cache barrel2b;
		dont-cache barrel2c;
		dont-cache barrel2d;
		
		dont-cache ltur1;
		dont-cache lslv1;
		dont-cache lbar1a;
		dont-cache lbar1b;
		
		dont-cache ltur2;
		dont-cache lslv2;
		dont-cache lbar2a;
		dont-cache lbar2b;
		
		dont-cache ltur3;
		dont-cache lslv3;
		dont-cache lbar3a;
		dont-cache lbar3b;
		
		dont-cache ltur4;
		dont-cache lslv4;
		dont-cache lbar4a;
		dont-cache lbar4b;
		
		dont-cache vlaunch;
	}
	if( Static_Var_1 != 2 && Static_Var_1 != 1 )
	{
		cache body;
		cache box;
		cache arms;
		cache penta1;
		cache penta2;
		cache stand;
		cache pipes;
				
		cache turret1;
		cache sleeves1;
		cache barrel1a;
		cache barrel1b;
		cache barrel1c;
		cache barrel1d;
		cache turret2;
		cache sleeves2;
		cache barrel2a;
		cache barrel2b;
		cache barrel2c;
		cache barrel2d;
		
		cache ltur1;
		cache lslv1;
		cache lbar1a;
		cache lbar1b;
		
		cache ltur2;
		cache lslv2;
		cache lbar2a;
		cache lbar2b;
		
		cache ltur3;
		cache lslv3;
		cache lbar3a;
		cache lbar3b;
		
		cache ltur4;
		cache lslv4;
		cache lbar4a;
		cache lbar4b;
		
		cache vlaunch;
	}
}

Create()
{
	set ARMORED to 1;
	set ACTIVATION to 1;
	
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare1d;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	hide flare2d;
	
	hide lflare1a;
	hide lflare1b;
	hide lflare2a;
	hide lflare2b;
	hide lflare3a;
	hide lflare3b;
	hide lflare4a;
	hide lflare4b;
	
	dont-cache flare1a;
	dont-cache flare1b;
	dont-cache flare1c;
	dont-cache flare1d;
	dont-cache flare2a;
	dont-cache flare2b;
	dont-cache flare2c;
	dont-cache flare2d;
	
	brb = 0;
	aimback = 0;
	wait=0;
	gun_1 = 0;
	gun_2 = 8;
	gun_3 = 14;
//	salvo_1 = 0;
//	salvo_2 = 2;
	salvo_3 = 0;
	
	firedelay = 330;
	firing = 0;
	firedelay_2 = 240;
	firing_2 = 0;
	firedelay_3 = 150;
	firing_3 = 0;
	
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
}

/*
SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}
*/

Restore()
{
	signal SIG_R;
	set-signal-mask SIG_R;
	sleep 15000;
	turn turret1 to y-axis <0.000000> speed <60.000000>;
	turn sleeves1 to x-axis <0.000000> speed <60.000000>;
	turn turret2 to y-axis <0.000000> speed <60.000000>;
	turn sleeves2 to x-axis <0.000000> speed <60.000000>;
	
	turn ltur1 to y-axis <0.000000> speed <180.000000>;
	turn lslv1 to x-axis <0.000000> speed <180.000000>;
	turn ltur2 to y-axis <0.000000> speed <180.000000>;
	turn lslv2 to x-axis <0.000000> speed <180.000000>;
	turn ltur3 to y-axis <0.000000> speed <180.000000>;
	turn lslv3 to x-axis <0.000000> speed <180.000000>;
	turn ltur4 to y-axis <0.000000> speed <180.000000>;
	turn lslv4 to x-axis <0.000000> speed <180.000000>;
}

RestoreTurret1()
{
	if(brb == 0)
	{
		brb = 1;
		sleep 18000;
	}
	turn turret2 to y-axis <0> speed <60.000000>;
	turn sleeves2 to x-axis <0> speed <60.000000>;
}



AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	if ( heading >= <110> AND heading <= <250> )
	{
		aimback=1;
		start-script RestoreTurret1();
		if (gun_1 <= 3)
		{
			gun_1 = 4;
		}
	}
	if (!( heading >= <110> AND heading <= <250> ))
	{
		aimback=0;
		turn turret2 to y-axis heading speed <60>;
		turn sleeves2 to x-axis <0.000000> - pitch speed <60>;
	}
	turn turret1 to y-axis heading speed <60>;
	turn sleeves1 to x-axis <0.000000> - pitch speed <60>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeves1 around x-axis;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeves2 around x-axis;
	while(wait)
	{
		sleep 1;
	}
	while(firing)
	{
		sleep 50;
	}
	Start-script Restore();
	return (1);
}

FirePrimary()
{
	wait=1;
	if( gun_1 == 0 )
	{
		firing = 1;
		move barrel2a to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2a along z-axis;
		move barrel2a to z-axis [0.000000] speed [3.000000];
		show flare2a;
		sleep 150;
		hide flare2a;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 1 )
	{
		firing = 1;
		move barrel2b to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2b along z-axis;
		move barrel2b to z-axis [0.000000] speed [3.000000];
		show flare2b;
		sleep 150;
		hide flare2b;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 2 )
	{
		firing = 1;
		move barrel2c to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2c along z-axis;
		move barrel2c to z-axis [0.000000] speed [3.000000];
		show flare2c;
		sleep 150;
		hide flare2c;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 3 )
	{
		firing = 1;
		move barrel2d to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel2d along z-axis;
		move barrel2d to z-axis [0.000000] speed [3.000000];
		show flare2d;
		sleep 150;
		hide flare2d;
		sleep firedelay;
		firing = 0;
	}
	//=========================back turret============================================================================================================
	if( gun_1 == 4 )
	{
		firing = 1;
		move barrel1a to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1a along z-axis;
		move barrel1a to z-axis [0.000000] speed [3.000000];
		show flare1a;
		sleep 150;
		hide flare1a;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 5 )
	{
		firing = 1;
		move barrel1b to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1b along z-axis;
		move barrel1b to z-axis [0.000000] speed [3.000000];
		show flare1b;
		sleep 150;
		hide flare1b;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 6 )
	{
		firing = 1;
		move barrel1c to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1c along z-axis;
		move barrel1c to z-axis [0.000000] speed [3.000000];
		show flare1c;
		sleep 150;
		hide flare1c;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 7 )
	{
		firing = 1;
		move barrel1d to z-axis [-2.400000] speed [500.000000];
		wait-for-move barrel1d along z-axis;
		move barrel1d to z-axis [0.000000] speed [3.000000];
		show flare1d;
		sleep 150;
		hide flare1d;
		sleep firedelay;
		firing = 0;
	}
	++gun_1;
	if( gun_1 == 8 )
	{
		if(aimback == 1)
		{
			gun_1 = 4;
			sleep 600;
		}
		if(aimback == 0)
		{
			gun_1 = 0;
		}
	}
	wait=0;
}


AimFromPrimary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare2a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2b;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2c;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare2d;
	}
	if( gun_1 == 4 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 5 )
	{
		piecenum = flare1b;
	}
	if( gun_1 == 6 )
	{
		piecenum = flare1c;
	}
	if( gun_1 == 7 )
	{
		piecenum = flare1d;
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	while( firing_2 )
	{
		sleep 50;
	}
	return (1);
}


FireSecondary()
{
	if( gun_2 == 8 )
	{
		firing_2 = 1;
		explode r1 type BITMAPONLY | BITMAP5;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2 == 9 )
	{
		firing_2 = 1;
		explode r2 type BITMAPONLY | BITMAP5;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2 == 10 )
	{
		firing_2 = 1;
		explode r3 type BITMAPONLY | BITMAP5;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2 == 11 )
	{
		firing_2 = 1;
		explode r4 type BITMAPONLY | BITMAP5;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2 == 12 )
	{
		firing_2 = 1;
		explode r5 type BITMAPONLY | BITMAP5;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2 == 13 )
	{
		firing_2 = 1;
		explode r6 type BITMAPONLY | BITMAP5;
		sleep firedelay_2;
		firing_2 = 0;
	}
	++gun_2;
	if (gun_2 == 14)
	{
		gun_2 = 8;
	}
}


AimFromSecondary(piecenum)
{
	piecenum = base;
}


QuerySecondary(piecenum)
{
	if (gun_2 == 8)
	{
		piecenum = r1;
	}
	if (gun_2 == 9)
	{
		piecenum = r2;
	}
	if (gun_2 == 10)
	{
		piecenum = r3;
	}
	if (gun_2 == 11)
	{
		piecenum = r4;
	}
	if (gun_2 == 12)
	{
		piecenum = r5;
	}
	if (gun_2 == 13)
	{
		piecenum = r6;
	}
}



//*************************************************Tertiary******************************************************

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	
	if( salvo_3 == 0 )
	{
		turn ltur1 to y-axis heading speed <720>;
		turn lslv1 to x-axis <0.000000> - pitch speed <720.000000>;
	}
	if( salvo_3 == 1 )
	{
		turn ltur2 to y-axis heading speed <720>;
		turn lslv2 to x-axis <0.000000> - pitch speed <720.000000>;
	}
	if( salvo_3 == 2 )
	{
		turn ltur3 to y-axis heading speed <720>;
		turn lslv3 to x-axis <0.000000> - pitch speed <720.000000>;
	}
	if( salvo_3 == 3 )
	{
		turn ltur4 to y-axis heading speed <720>;
		turn lslv4 to x-axis <0.000000> - pitch speed <720.000000>;
	}
	wait-for-turn ltur1 around y-axis;
	wait-for-turn lslv1 around x-axis;
	wait-for-turn ltur2 around y-axis;
	wait-for-turn lslv2 around x-axis;
	wait-for-turn ltur3 around y-axis;
	wait-for-turn lslv3 around x-axis;
	wait-for-turn ltur4 around y-axis;
	wait-for-turn lslv4 around x-axis;
//	while( firing_3 )
//	{
//		sleep 100;
//	}
	Start-script Restore();
	return (1);
}

FireTertiary()
{
	var gun_3_tmp;
	gun_3_tmp = gun_3;
	++gun_3;
	if( gun_3 == 22 )
	{
		gun_3 = 14;
	}
	if( gun_3_tmp == 14 )
	{
//		firing_3 = 1;
		salvo_3 = 0; 
		sleep 150;
//		sleep firedelay_3;
//		firing_3 = 0;
	}
	if( gun_3_tmp == 15 )
	{
//		firing_3 = 1;
		salvo_3 = 1; 
		sleep 150;
//		sleep firedelay_3;
//		firing_3 = 0;
	}
	if( gun_3_tmp == 16 )
	{
//		firing_3 = 1;
		salvo_3 = 1; 
		sleep 150;
//		sleep firedelay_3;
//		firing_3 = 0;		
	}
	if( gun_3_tmp == 17 )
	{
//		firing_3 = 1;
		salvo_3 = 2; 
		sleep 150;
//		sleep firedelay_3;
//		firing_3 = 0;
	}
	if( gun_3_tmp == 18 )
	{
//		firing_3 = 1;
		salvo_3 = 2; 
		sleep 150;
//		sleep firedelay_3;
//		firing_3 = 0;
	}
	if( gun_3_tmp == 19 )
	{
//		firing_3 = 1;
		salvo_3 = 3; 
		sleep 150;
//		sleep firedelay_3;
//		firing_3 = 0;
	}
	if( gun_3_tmp == 20 )
	{
//		firing_3 = 1;
		salvo_3 = 3; 
		sleep 150;
//		sleep firedelay_3;
//		firing_3 = 0;
	}
	if( gun_3_tmp == 21 )
	{
//		firing_3 = 1;
		salvo_3 = 0; 
		sleep 150;
//		sleep firedelay_3;
//		firing_3 = 0;
	}
}

AimFromTertiary(piecenum)
{
	if( salvo_3 == 0 )
		piecenum = ltur1;
	if( salvo_3 == 1 )
		piecenum = ltur2;
	if( salvo_3 == 2 )
		piecenum = ltur3;
	if( salvo_3 == 3 )	
		piecenum = ltur4;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 14 )
		piecenum = lflare1a;
	if( gun_3 == 15 )
		piecenum = lflare1b;
	if( gun_3 == 16 )
		piecenum = lflare2a;
	if( gun_3 == 17 )
		piecenum = lflare2b;
	if( gun_3 == 18 )
		piecenum = lflare3a;
	if( gun_3 == 19 )
		piecenum = lflare3b;
	if( gun_3 == 20 )
		piecenum = lflare4a;
	if( gun_3 == 21 )
		piecenum = lflare4b;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare1d;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	hide flare2d;
	
	hide lflare1a;
	hide lflare1b;
	hide lflare2a;
	hide lflare2b;
	hide lflare3a;
	hide lflare3b;
	hide lflare4a;
	hide lflare4b;
	
	
	if( Static_Var_1 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode turret1 type FALL | BITMAP1;
			explode turret2 type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP1;
			explode flare1a type FALL | BITMAP1;
			explode flare2b type FALL | BITMAP5;
			explode sleeves1 type SHATTER | BITMAP1;
			explode barrel1a type FALL | BITMAP1;
			explode barrel1c type FALL | BITMAP1;
			explode barrel2b type FALL | BITMAP1;
			return (0);
		}
		corpsetype = 3;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeves1 type SHATTER | BITMAP1;
		explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode turret1 type FALL | BITMAP1;
			explode turret2 type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP1;
			explode flare1a type FALL | BITMAP1;
			explode flare2b type FALL | BITMAP5;
			explode sleeves1 type SHATTER | BITMAP1;
			explode barrel1a type FALL | BITMAP1;
			explode barrel1c type FALL | BITMAP1;
			explode barrel2b type FALL | BITMAP1;
			return (0);
		}
		corpsetype = 3;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeves1 type SHATTER | BITMAP1;
		explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type BITMAPONLY | BITMAP1;
		explode flare2b type BITMAPONLY | BITMAP5;
		explode sleeves1 type BITMAPONLY | BITMAP1;
		explode barrel1a type BITMAPONLY | BITMAP1;
		explode barrel1c type BITMAPONLY | BITMAP1;
		explode barrel2a type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret1 type FALL | BITMAP1;
		explode turret2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | BITMAP1;
		explode flare2b type FALL | BITMAP5;
		explode sleeves1 type SHATTER | BITMAP1;
		explode barrel1a type FALL | BITMAP1;
		explode barrel1c type FALL | BITMAP1;
		explode barrel2b type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeves1 type SHATTER | BITMAP1;
		explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeves1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
