#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, bturret1, bsleeve1, bbarrel1a, bflare1a, bbarrel1b, bflare1b,
	   bturret2, bsleeve2, bbarrel2a, bflare2a, bbarrel2b, bflare2b,
	   mturret1, msleeve1, mflare1a, mflare1b, mturret2, msleeve2, mflare2a, mflare2b,
	   mturret3, msleeve3, mflare3a, mflare3b, 
	   lturret1, lsleeve1a, lbarrel1a, lflare1a, lsleeve1b, lbarrel1b, lflare1b, 
	   lturret2, lsleeve2a, lbarrel2a, lflare2a, lsleeve2b, lbarrel2b, lflare2b,
	   wake01, wake02, wake03, wake04, wake05, wake06, wake07, wake08,
	   bridge;


static-var  Static_Var_1, restore_delay, gun_1, gun_2, gun_3, salvo_1, salvo_2, salvo_3, firedelay, firing, firedelay_2, firing_2, firedelay_3, firing_3;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_R				16
#define SIG_MOVE			32


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}
*/

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake01;
			emit-sfx 5 from wake02;
			emit-sfx 5 from wake03;
			emit-sfx 5 from wake04;
			emit-sfx 5 from wake05;
			emit-sfx 5 from wake06;
			emit-sfx 3 from wake07;
			emit-sfx 3 from wake08;
			emit-sfx 3 from wake01;
			emit-sfx 3 from wake02;
			emit-sfx 3 from wake03;
			emit-sfx 3 from wake04;
			emit-sfx 3 from wake05;
			emit-sfx 3 from wake06;
			emit-sfx 5 from wake07;
			emit-sfx 5 from wake08;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 5 from wake01;
			emit-sfx 5 from wake02;
			emit-sfx 5 from wake03;
			emit-sfx 5 from wake04;
			emit-sfx 5 from wake05;
			emit-sfx 5 from wake06;
			emit-sfx 3 from wake07;
			emit-sfx 3 from wake08;
			emit-sfx 3 from wake01;
			emit-sfx 3 from wake02;
			emit-sfx 3 from wake03;
			emit-sfx 3 from wake04;
			emit-sfx 3 from wake05;
			emit-sfx 3 from wake06;
			emit-sfx 5 from wake07;
			emit-sfx 5 from wake08;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	if( Static_Var_1 == 2 || Static_Var_1 == 1 )
	{
		dont-cache body;
		dont-cache bturret1;
		dont-cache bsleeve1;
		dont-cache bbarrel1a;
		dont-cache bbarrel1b;
		dont-cache bturret2;
		dont-cache bsleeve2;
		dont-cache bbarrel2a;
		dont-cache bbarrel2b;
		dont-cache mturret1;
		dont-cache msleeve1;
		dont-cache mturret2;
		dont-cache msleeve2;
		dont-cache mturret3;
		dont-cache msleeve3;
		dont-cache lturret1;
		dont-cache lsleeve1a;
		dont-cache lbarrel1a;
		dont-cache lsleeve1b;
		dont-cache lbarrel1b;
		dont-cache lturret2;
		dont-cache lsleeve2a;
		dont-cache lbarrel2a;
		dont-cache lsleeve2b;
		dont-cache lbarrel2b;
		dont-cache bridge;
	}
	if( Static_Var_1 != 2 && Static_Var_1 != 1 )
	{
		cache body;
		cache bturret1;
		cache bsleeve1;
		cache bbarrel1a;
		cache bbarrel1b;
		cache bturret2;
		cache bsleeve2;
		cache bbarrel2a;
		cache bbarrel2b;
		cache mturret1;
		cache msleeve1;
		cache mturret2;
		cache msleeve2;
		cache mturret3;
		cache msleeve3;
		cache lturret1;
		cache lsleeve1a;
		cache lbarrel1a;
		cache lsleeve1b;
		cache lbarrel1b;
		cache lturret2;
		cache lsleeve2a;
		cache lbarrel2a;
		cache lsleeve2b;
		cache lbarrel2b;
		cache bridge;
	}
}

Create()
{
	SET ARMORED to 1;
	
	dont-cache bflare1a;
	dont-cache bflare1b;
	dont-cache bflare2a;
	dont-cache bflare2b;
	dont-cache mflare1a;
	dont-cache mflare1b;
	dont-cache mflare2a;
	dont-cache mflare2b;
	dont-cache mflare3a;
	dont-cache mflare3b;
	dont-cache lflare1a;
	dont-cache lflare1b;
	dont-cache lflare2a;
	dont-cache lflare2b;
	
	
	hide bflare1a;
	hide bflare1b;
	hide bflare2a;
	hide bflare2b;
	hide mflare1a;
	hide mflare1b;
	hide mflare2a;
	hide mflare2b;
	hide mflare3a;
	hide mflare3b;
	hide lflare1a;
	hide lflare1b;
	hide lflare2a;
	hide lflare2b;
	
	firedelay = 850;
	firing = 0;
	
	firedelay_2 = 650;
	firing_2 = 0;
	
	firedelay_3 = 850;
	firing_3 = 0;
	
	gun_1 = 0;
	gun_2 = 4;
	gun_3 = 8;
	salvo_1 = 0;
	salvo_2 = 2;
	salvo_3 = 4;
	
	start-script SmokeUnit();
}


Restore()
{
	signal SIG_R;
	set-signal-mask SIG_R;
	sleep 12000;
	turn bturret1 to y-axis <0> speed <60.000000>;
	turn bsleeve1 to x-axis <0> speed <60.000000>;
	turn bturret2 to y-axis <0> speed <60.000000>;
	turn bsleeve2 to x-axis <0> speed <60.000000>;
	turn lturret1 to y-axis <0> speed <75.000000>;
	turn lsleeve1a to x-axis <0> speed <75.000000>;
	turn lsleeve1b to x-axis <0> speed <75.000000>;
	turn lturret2 to y-axis <0> speed <75.000000>;
	turn lsleeve2a to x-axis <0> speed <75.000000>;
	turn lsleeve2b to x-axis <0> speed <75.000000>;
	turn mturret1 to y-axis <0> speed <180.000000>;
	turn msleeve1 to x-axis <0> speed <180.000000>;
	turn mturret2 to y-axis <0> speed <180.000000>;
	turn msleeve2 to x-axis <0> speed <180.000000>;
	turn mturret3 to y-axis <0> speed <180.000000>;
	turn msleeve3 to x-axis <0> speed <180.000000>;
}




AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	if( salvo_1 == 0 )
	{
		turn bturret1 to y-axis heading speed <120.000000>;
		turn bsleeve1 to x-axis <0.000000> - pitch speed <120.000000>;
	}
	if( salvo_1 == 1 )
	{
		turn bturret2 to y-axis heading speed <120.000000>;
		turn bsleeve2 to x-axis <0.000000> - pitch speed <120.000000>;
	}
	wait-for-turn bturret1 around y-axis;
	wait-for-turn bsleeve1 around x-axis;
	wait-for-turn bturret2 around y-axis;
	wait-for-turn bsleeve2 around x-axis;
	while( firing )
	{
		sleep 100;
	}	
	
	Start-script Restore();
	return (1);
}


FirePrimary()
{
	var gun_1_tmp;
	gun_1_tmp = gun_1;
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 0;
	}
	if( gun_1_tmp == 0 )
	{
		firing = 1;
		salvo_1 = 0; 
		show bflare1a;
		sleep 150;
		hide bflare1a;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1_tmp == 1 )
	{
		firing = 1;
		salvo_1 = 1; 
		show bflare1b;
		sleep 150;
		hide bflare1b;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1_tmp == 2 )
	{
		firing = 1;
		salvo_1 = 1; 
		show bflare2a;
		sleep 150;
		hide bflare2a;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1_tmp == 3 )
	{
		firing = 1;
		salvo_1 = 0; 
		show bflare2b;
		sleep 150;
		hide bflare2b;
		sleep firedelay;
		firing = 0;
	}
}

AimFromPrimary(piecenum)
{
	if( salvo_1 == 0 )
		piecenum = bturret1;
	if( salvo_1 == 1 )
		piecenum = bturret2;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = bflare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = bflare1b;
	}
	if( gun_1 == 2 )
	{
		piecenum = bflare2a;
	}
	if( gun_1 == 3 )
	{
		piecenum = bflare2b;
	}
}

//================================2nd===========================================================================================================================================================

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( salvo_2 == 2 )
	{
		turn lturret1 to y-axis heading speed <150.000000>;
		turn lsleeve1a to x-axis <0.000000> - pitch speed <150.000000>;
		turn lsleeve1b to x-axis <0.000000> - pitch speed <150.000000>;
	
	}
	if( salvo_2 == 3 )
	{
		turn lturret2 to y-axis heading speed <150.000000>;
		turn lsleeve2a to x-axis <0.000000> - pitch speed <150.000000>;
		turn lsleeve2b to x-axis <0.000000> - pitch speed <150.000000>;
	}
	wait-for-turn lturret1 around y-axis;
	wait-for-turn lsleeve1a around x-axis;
	wait-for-turn lsleeve1b around x-axis;
	wait-for-turn lturret2 around y-axis;
	wait-for-turn lsleeve2a around x-axis;
	wait-for-turn lsleeve2b around x-axis;
	while( firing_2 )
	{
		sleep 100;
	}	
	Start-script Restore();
	return (1);
}


FireSecondary()
{
	var gun_2_tmp;
	gun_2_tmp = gun_2;
	++gun_2;
	if( gun_2 == 8 )
	{
		gun_2 = 4;
	}
	if( gun_2_tmp == 4 )
	{
		firing_2 = 1;
		salvo_2 = 2;
		show lflare1a;
		sleep 150;
		hide lflare1a;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2_tmp == 5 )
	{
		firing_2 = 1;
		salvo_2 = 3;
		show lflare1b;
		sleep 150;
		hide lflare1b;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2_tmp == 6 )
	{
		firing_2 = 1;
		salvo_2 = 3;
		show lflare2a;
		sleep 150;
		hide lflare2a;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2_tmp == 7 )
	{
		firing_2 = 1;
		salvo_2 = 2;
		show lflare2b;
		sleep 150;
		hide lflare2b;
		sleep firedelay_2;
		firing_2 = 0;
	}
	
}

AimFromSecondary(piecenum)
{
	if( salvo_3 == 2 )
		piecenum = lturret1;
	if( salvo_3 == 3 )
		piecenum = lturret2;
}

QuerySecondary(piecenum)
{
	if( gun_2 == 4 )
	{
		piecenum = lflare1a;
	}
	if( gun_2 == 5 )
	{
		piecenum = lflare1b;
	}
	if( gun_2 == 6 )
	{
		piecenum = lflare2a;
	}
	if( gun_2 == 7 )
	{
		piecenum = lflare2b;
	}
}

//================================3rd===========================================================================================================================================================

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	
	if( salvo_3 == 4 )
	{
		turn mturret1 to y-axis heading speed <360>;
		turn msleeve1 to x-axis <0.000000> - pitch speed <360.000000>;
	}
	if( salvo_3 == 5 )
	{
		turn mturret2 to y-axis heading speed <360>;
		turn msleeve2 to x-axis <0.000000> - pitch speed <360.000000>;
	}
	if( salvo_3 == 6 )
	{
		turn mturret3 to y-axis heading speed <360>;
		turn msleeve3 to x-axis <0.000000> - pitch speed <360.000000>;
	}
	wait-for-turn mturret1 around y-axis;
	wait-for-turn msleeve1 around x-axis;
	wait-for-turn mturret2 around y-axis;
	wait-for-turn msleeve2 around x-axis;
	wait-for-turn mturret3 around y-axis;
	wait-for-turn msleeve3 around x-axis;
	while( firing_3 )
	{
		sleep 100;
	}
	Start-script Restore();
	return (1);
}

FireTertiary()
{
	var gun_3_tmp;
	gun_3_tmp = gun_3;
	++gun_3;
	if( gun_3 == 14 )
	{
		gun_3 = 8;
	}
	if( gun_3_tmp == 8 )
	{
		firing_3 = 1;
		salvo_3 = 4; 
		sleep 150;
		sleep firedelay_3;
		firing_3 = 0;
	}
	if( gun_3_tmp == 9 )
	{
		firing_3 = 1;
		salvo_3 = 5; 
		sleep 150;
		sleep firedelay_3;
		firing_3 = 0;
	}
	if( gun_3_tmp == 10 )
	{
		firing_3 = 1;
		salvo_3 = 5; 
		sleep 150;
		sleep firedelay_3;
		firing_3 = 0;		
	}
	if( gun_3_tmp == 11 )
	{
		firing_3 = 1;
		salvo_3 = 6; 
		sleep 150;
		sleep firedelay_3;
		firing_3 = 0;
	}
	if( gun_3_tmp == 12 )
	{
		firing_3 = 1;
		salvo_3 = 6; 
		sleep 150;
		sleep firedelay_3;
		firing_3 = 0;
	}
	if( gun_3_tmp == 13 )
	{
		firing_3 = 1;
		salvo_3 = 4; 
		sleep 150;
		sleep firedelay_3;
		firing_3 = 0;
	}
}

AimFromTertiary(piecenum)
{
	if( salvo_3 == 4 )
		piecenum = mturret1;
	if( salvo_3 == 5 )
		piecenum = mturret2;
	if( salvo_3 == 6 )
		piecenum = mturret3;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 8 )
		piecenum = mflare1a;
	if( gun_3 == 9 )
		piecenum = mflare1b;
	if( gun_3 == 10 )
		piecenum = mflare2a;
	if( gun_3 == 11 )
		piecenum = mflare2b;
	if( gun_3 == 12 )
		piecenum = mflare3a;
	if( gun_3 == 13 )
		piecenum = mflare3b;		
}



SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	hide bflare1a;
	hide bflare1b;
	hide bflare2a;
	hide bflare2b;
	hide mflare1a;
	hide mflare1b;
	hide mflare2a;
	hide mflare2b;
	hide mflare3a;
	hide mflare3b;
	hide lflare1a;
	hide lflare1b;
	hide lflare2a;
	hide lflare2b;
		
	if( Static_Var_1 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode body type BITMAPONLY | BITMAP1;
			explode bturret1 type SHATTER | BITMAP1;
			explode bsleeve1 type FALL | BITMAP1;
			explode bbarrel1a type FALL | BITMAP1;
			explode bbarrel1b type FALL | BITMAP5;
			explode bturret2 type SHATTER | BITMAP5;
			explode bsleeve2 type FALL | BITMAP1;
			explode bbarrel2a type FALL | BITMAP1;
			explode bbarrel2b type FALL | BITMAP5;
			explode mturret1 type SHATTER | BITMAP1;
			explode msleeve1 type FALL | BITMAP5;
			explode mturret2 type SHATTER | BITMAP1;
			explode msleeve2 type FALL | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode bturret1 type SHATTER | BITMAP1;
		explode bsleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode bturret2 type SHATTER | BITMAP1;
		explode bsleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode mturret1 type SHATTER | BITMAP5;
		explode msleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode mturret2 type SHATTER | BITMAP5;
		explode msleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode body type BITMAPONLY | BITMAP1;
			explode bturret1 type SHATTER | BITMAP1;
			explode bsleeve1 type FALL | BITMAP1;
			explode bbarrel1a type FALL | BITMAP1;
			explode bbarrel1b type FALL | BITMAP5;
			explode bturret2 type SHATTER | BITMAP5;
			explode bsleeve2 type FALL | BITMAP1;
			explode bbarrel2a type FALL | BITMAP1;
			explode bbarrel2b type FALL | BITMAP5;
			explode mturret1 type SHATTER | BITMAP1;
			explode msleeve1 type FALL | BITMAP5;
			explode mturret2 type SHATTER | BITMAP1;
			explode msleeve2 type FALL | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode bturret1 type SHATTER | BITMAP1;
		explode bsleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode bturret2 type SHATTER | BITMAP1;
		explode bsleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode mturret1 type SHATTER | BITMAP5;
		explode msleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode mturret2 type SHATTER | BITMAP5;
		explode msleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		
		explode body type BITMAPONLY | BITMAP1;
		explode bturret1 type BITMAPONLY | BITMAP1;
		explode bsleeve1 type BITMAPONLY | BITMAP5;
		explode bbarrel1a type BITMAPONLY | BITMAP1;
		explode bbarrel1b type BITMAPONLY | BITMAP5;
		explode bturret2 type BITMAPONLY | BITMAP1;
		explode bsleeve2 type BITMAPONLY | BITMAP5;
		explode bbarrel2a type BITMAPONLY | BITMAP1;
		explode bbarrel2b type BITMAPONLY | BITMAP5;
		explode mturret1 type BITMAPONLY | BITMAP1;
		explode msleeve1 type BITMAPONLY | BITMAP5;
		explode mturret2 type BITMAPONLY | BITMAP1;
		explode msleeve2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode bturret1 type SHATTER | BITMAP1;
		explode bsleeve1 type FALL | BITMAP1;
		explode bbarrel1a type FALL | BITMAP1;
		explode bbarrel1b type FALL | BITMAP5;
		explode bturret2 type SHATTER | BITMAP5;
		explode bsleeve2 type FALL | BITMAP1;
		explode bbarrel2a type FALL | BITMAP1;
		explode bbarrel2b type FALL | BITMAP5;
		explode mturret1 type SHATTER | BITMAP1;
		explode msleeve1 type FALL | BITMAP5;
		explode mturret2 type SHATTER | BITMAP1;
		explode msleeve2 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode bturret1 type SHATTER | BITMAP1;
		explode bsleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode bturret2 type SHATTER | BITMAP1;
		explode bsleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode bbarrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode mturret1 type SHATTER | BITMAP5;
		explode msleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode mturret2 type SHATTER | BITMAP5;
		explode msleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode bturret1 type SHATTER | BITMAP1;
	explode bsleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrel1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode bturret2 type SHATTER | BITMAP1;
	explode bsleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrel2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode mturret1 type SHATTER | BITMAP5;
	explode msleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode mturret2 type SHATTER | BITMAP5;
	explode msleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
