#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, frame, door1, door2, door3, hole, tower, stand, turret, gear1, gear2, 
	   spindle, sleeve1, barrel4, sleeve2, barrel5, sleeve3, barrel6, sleeve4, barrel7, sleeve5, barrel8,
	   spindleback, flare, side1, side2, tower2, stand2, turret2, spindle2, barrel1, barrel2, barrel3,
	   flare2, cover, this ;

static-var  open, restore_delay, gun_1, upgraded, firedelay, firing, inlimbo, closing, building;
static-var	shield_on, charge_on, nbr_charge, nbr_shield, dome_on, nbr_dome; 

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	closing = 1;
	open = 0;
	
	stop-spin stand around y-axis;
	stop-spin gear1 around x-axis;
	sleep 40;
		
	turn stand to y-axis <0.000000> speed <300.000000>;
	wait-for-turn stand around y-axis;
	sleep 40;
	
	turn gear1 to x-axis <-90.000000> speed <200.000000>;
	wait-for-turn gear1 around x-axis;
	sleep 40;
		
	move tower to y-axis [-18.000000] speed [80.000000];
	wait-for-move tower along y-axis;
	sleep 40;
	
	hide tower;
	move tower to y-axis [-24.000000] speed [80.000000];
	wait-for-move tower along y-axis;
	sleep 40;
	
	hide stand;
	move tower to y-axis [-27.000000] speed [80.000000];
	wait-for-move tower along y-axis;
	sleep 40;
	
	hide gear1;
	hide gear2;
	hide spindleback;
	hide side1;
	hide side2;
	move tower to y-axis [-30.000000] speed [80.000000];
	wait-for-move tower along y-axis;
	sleep 40;
	
	hide spindle;
	move tower to y-axis [-32.000000] speed [80.000000];
	wait-for-move tower along y-axis;
	sleep 40;
	
	hide sleeve1;
	hide sleeve2;
	hide sleeve3;
	hide sleeve4;
	hide sleeve5;
	move tower to y-axis [-40.000000] speed [80.000000];
	wait-for-move tower along y-axis;
	sleep 40;
	
	hide barrel4;
	hide barrel5;
	hide barrel6;
	hide barrel7;
	hide barrel8;
		
	hide flare;
	
	sleep 200;
	
	show door1;
	show door2;
	show door3;
				
	turn door1 to z-axis <0.000000> speed <90.000000>;
	turn door2 to z-axis <0.000000> speed <90.000000>;
	turn door3 to z-axis <0.000000> speed <90.000000>;
		
	sleep 100;
	
//	cache door1;
		
	set ARMORED to 1;
	
	closing = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	inlimbo=1;
	if ( upgraded )
	{
		while(closing)
		{
			sleep 100;
		}
		set ARMORED to 0;
		if(( shield_on || dome_on))
		{
			set ARMORED to 1;
		}
		if( !open )
		{
			
			turn door3 to z-axis <180.000102> speed <90.000000>;
			turn door2 to z-axis <180.000102> speed <90.000000>;
			turn door1 to z-axis <90.000051> speed <90.000000>;
															
			sleep 200;
						
			hide door1;
			hide door2;
			hide door3;
			
			sleep 40;
			
			turn gear1 to x-axis <-90.000000> now;
			turn stand to x-axis <0.000000> now;
			
			sleep 40;
					
			show barrel4;
			show barrel5;
			show barrel6;
			show barrel7;
			show barrel8;
						
			move tower to y-axis [-32.000000] speed [80.000000];
			wait-for-move tower along y-axis;
			sleep 40;
						
			show sleeve1;
			show sleeve2;
			show sleeve3;
			show sleeve4;
			show sleeve5;
			move tower to y-axis [-30.000000] speed [80.000000];
			wait-for-move tower along y-axis;
			sleep 40;
						
												
			show spindle;
			move tower to y-axis [-27.000000] speed [80.000000];
			wait-for-move tower along y-axis;
			sleep 40;
						
			show gear1;
			show gear2;
			show spindleback;
			show side1;
			show side2;
			move tower to y-axis [-24.000000] speed [80.000000];
			wait-for-move tower along y-axis;
			sleep 40;
				
			show stand;
			move tower to y-axis [-18.000000] speed [80.000000];
			wait-for-move tower along y-axis;
			sleep 40;
						
			show tower;
			move tower to y-axis [0.000000] speed [80.000000];
			wait-for-move tower along y-axis;
			sleep 40;
						
			turn turret to y-axis <0.000000> speed <300.000000>;
			turn gear1 to x-axis <0.000000> speed <200.000000>;
			sleep 40;
		}
		open = 1;
		turn stand to y-axis heading speed <300.021978>;
		turn gear1 to x-axis <0.000000> - pitch speed <200.010989>;
		wait-for-turn stand around y-axis;
		wait-for-turn gear1 around x-axis;
		while( firing )
		{
//			sleep firedelay;
//			wait-for-turn stand around y-axis;
//			wait-for-turn gear1 around x-axis;
//			firing = 0;
			sleep 50;
		}
		start-script RestoreAfterDelay();
		inlimbo=0;
		return (1);
	}	
	if ( !upgraded )
	{
		while(building)
		{
			sleep 100;
		}
		set ARMORED to 0;
		if(( shield_on || dome_on))
		{
			set ARMORED to 1;
		}
		turn stand to y-axis heading now;
		turn gear1 to x-axis <0.000000> - pitch now;
		turn stand2 to y-axis heading speed <300.005495>;
		turn turret2 to x-axis <0.000000> - pitch speed <200.010989>;
		wait-for-turn stand2 around y-axis;
		wait-for-turn turret2 around x-axis;
		while( firing )
		{
//			sleep firedelay;
//			wait-for-turn stand2 around y-axis;
//			wait-for-turn turret2 around x-axis;
//			firing = 0;
			sleep 50;
		}
		inlimbo=0;
		return (1);
	}	
}

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_charge = 0;
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;
		
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_CHARGE)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						
						if (distance > MOBILE_RADIUS_6)			//60-90 seconds
						{
							shgen_count = 0;
						}
						if (distance <= MOBILE_RADIUS_6)		//60 seconds
						{
							shgen_count = 5;
						}
						if (distance <= MOBILE_RADIUS_5)		//45 seconds
						{
							shgen_count = 4;
						}
						if (distance <= MOBILE_RADIUS_4)		//30 seconds
						{
							shgen_count = 3;
						}
						if (distance <= MOBILE_RADIUS_3)		//15 seconds
						{
							shgen_count = 2;
						}
						if (distance <= BOOST_RADIUS)
						{
							shgen_count = 1;
							++nbr_charge;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_charge>=1)
		{
			if(!charge_on)
			{
				charge_on = 1;
				sleep 1;
				firedelay = 550;		//0.6 seconds
				if (upgraded)
				{
					firedelay = 0;		//0.3 seconds
				}
			}
		}
		if(nbr_charge==0)
		{
			if(charge_on)
			{
				charge_on = 0;
				sleep 1;
				firedelay = 1150;		//1.2 seconds
				if (upgraded)
				{
					firedelay = 550;	//0.6 seconds
				}
			}
		}	
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;	
				}
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;	
				}
			}
		}	
		sleep rand(3000,4000);
		if(shgen_count == 0)
		{
			sleep rand(60000,90000);
		}
		if(shgen_count == 1)
		{
			sleep rand(3000,4000);
		}
		if(shgen_count == 2)
		{
			sleep rand(8500,13500);
		}
		if(shgen_count == 3)
		{
			sleep rand(22500,28500);
		}
		if(shgen_count == 4)
		{
			sleep rand(30000,43500);
		}
		if(shgen_count == 5)
		{
			sleep rand(45000,58500);
		}
	}
}	

Upgrade()
{
	var xz, x, z, unit_ID, distance;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	var myid;
	myid= get MY_ID;

	for (unit_ID = min; unit_ID <= max; ++unit_ID)
	{
		if(unit_ID != myid)
		{
			if(get UNIT_HEIGHT(unit_ID) == [7.75])
			{
				if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
				{
					xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
					SECURE_XZ;
					distance=get XZ_HYPOT(xz);
					if (distance <= [2])
					{
						if (get UNIT_IS_ON_THIS_COMP(get(MY_ID)))
						{
							if (get UNIT_IS_ON_THIS_COMP(unit_ID))
							{
								drop-unit unit_ID;
								attach-unit unit_ID to this;
							}
						}
						firing = 1;
						closing = 1;
											
//						show door1;
//						show door2;
//						show door3;
						show hole;
						show frame;
						
						
						open = 0;
						set INBUILDSTANCE to 0;
						upgraded = 1;
						gun_1 = 3;
						
//						dont-cache door1;
//						dont-cache door2;
//						dont-cache door3;
						
						dont-cache tower2;
						
						turn door1 to z-axis <0.000000> speed <90.000000>;
						turn door2 to z-axis <0.000000> speed <90.000000>;
						turn door3 to z-axis <0.000000> speed <90.000000>;
											
						sleep 200;
						
//						hide door1;
//						hide door2;
//						hide door3;
						
						turn stand2 to y-axis <0> speed <300.000000>;
						wait-for-turn stand2 around y-axis;
						sleep 40;
						
						
						turn turret2 to x-axis <-90> speed <200.000000>;
						wait-for-turn turret2 around x-axis;
						sleep 40;
						
						move tower2 to y-axis [-18.000000] speed [80.000000];
						wait-for-move tower2 along y-axis;					
						sleep 40;
						
						hide tower2;
						move tower2 to y-axis [-22.000000] speed [80.000000];
						wait-for-move tower2 along y-axis;	
						sleep 40;
						
						hide stand2;
						move tower2 to y-axis [-27.000000] speed [80.000000];
						wait-for-move tower2 along y-axis;	
						sleep 40;
						
						hide spindle2;
						move tower2 to y-axis [-38.000000] speed [80.000000];
						wait-for-move tower2 along y-axis;	
						sleep 40;
						
						
						hide barrel1;
						hide barrel2;
						hide barrel3;
						hide flare2;
												
						sleep 200;

						turn gear1 to x-axis <-90.000000> now;
						turn stand to x-axis <0.000000> now;
						move tower to y-axis [-40.000000] now;
	
						sleep 40;
						
						show barrel4;
						show barrel5;
						show barrel6;
						show barrel7;
						show barrel8;
						
						move tower to y-axis [-32.000000] speed [80.000000];
						wait-for-move tower along y-axis;
						sleep 40;
						
						show sleeve1;
						show sleeve2;
						show sleeve3;
						show sleeve4;
						show sleeve5;
						move tower to y-axis [-30.000000] speed [80.000000];
						wait-for-move tower along y-axis;
						sleep 40;
						
												
						show spindle;
						move tower to y-axis [-27.000000] speed [80.000000];
						wait-for-move tower along y-axis;
						sleep 40;
						
						show gear1;
						show gear2;
						show spindleback;
						show side1;
						show side2;
						move tower to y-axis [-24.000000] speed [80.000000];
						wait-for-move tower along y-axis;
						sleep 40;
						
						show stand;
						move tower to y-axis [-18.000000] speed [80.000000];
						wait-for-move tower along y-axis;
						sleep 40;
						
						show tower;
						move tower to y-axis [0.000000] speed [80.000000];
						wait-for-move tower along y-axis;
						sleep 40;
						
						turn turret to y-axis <0.000000> speed <300.000000>;
						turn gear1 to x-axis <0.000000> speed <200.000000>;
					
						wait-for-turn stand around y-axis;
						wait-for-turn gear1 around x-axis;
						
						sleep 1000;
						
						set ARMORED to 0;
						if(( shield_on || dome_on))
						{
							set ARMORED to 1;
						}
						firedelay = 550;
						if (charge_on)
						{
							firedelay = 0;
						}
						open = 1;
						if(!inlimbo)
						{		
							signal SIG_AIM;
							set-signal-mask SIG_AIM;
							start-script RestoreAfterDelay();
						}
						closing = 0;
						firing = 0;
						return;
					}
				}
			}
		}
	}
}


Create()
{
	nbr_charge = 0;
	nbr_shield = 0;
	nbr_dome = 0;
	
	charge_on = 0;
	shield_on = 0;
	dome_on = 0;
	
	inlimbo=0;
	closing = 0;
	
	dont-cache cover;
//	dont-cache hole;
	
	hide cover;
	
	hide frame;
	hide door1;
	hide door2;
	hide door3;
	hide hole;
	
	hide tower;
	hide stand;
	hide turret;
	hide gear1;
	hide gear2;
	hide spindle;
	hide sleeve1;
	hide sleeve2;
	hide sleeve3;
	hide sleeve4;
	hide sleeve5;
	
	hide barrel4;
	hide barrel5;
	hide barrel6;
	hide barrel7;
	hide barrel8;
	
	hide side1;
	hide side2;
	
	hide flare;
	hide flare2;
	
	dont-cache flare;
	dont-cache flare2;
	
	
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-cache barrel4;
	dont-cache barrel5;
	dont-cache barrel6;
	dont-cache barrel7;
	dont-cache barrel8;
		
	dont-cache sleeve1;
	dont-cache sleeve2;
	dont-cache sleeve3;
	dont-cache sleeve4;
	dont-cache sleeve5;
	
	dont-cache spindle;
	dont-cache spindle2;
	
	dont-cache turret2;
		
	dont-cache stand;
	dont-cache stand2;
	
	dont-cache gear1;
	dont-cache gear2;
	
	dont-cache side1;
	dont-cache side2;
	dont-cache spindleback;
	
//	dont-cache frame;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	
	dont-shade flare;
	dont-shade flare2;
	
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	dont-shade barrel4;
	dont-shade barrel5;
	dont-shade barrel6;
	dont-shade barrel7;
	dont-shade barrel8;
	
	dont-shade sleeve1;
	dont-shade sleeve2;
	dont-shade sleeve3;
	dont-shade sleeve4;
	dont-shade sleeve5;
		
	dont-shade spindle;
	dont-shade spindle2;
	
	dont-shade turret2;
		
	dont-shade stand;
	dont-shade stand2;
	
	dont-shade gear1;
	dont-shade gear2;
	
	dont-shade side1;
	dont-shade side2;
	dont-shade spindleback;
	
//	dont-shade frame;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade hole;
	
	gun_1 = 0;
	upgraded = 0;
	firedelay = 1150;
	firing = 0;
	open = 1;
	restore_delay = 5000;
	building = 0;
		
	set INBUILDSTANCE to 1;	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
	show cover;
}
/*
PositionSpindle()
{
	if( gun_1 == 1 )
	{
		turn spindle to z-axis <0.000000> speed <400.093407>;
	}
	if( gun_1 == 2 )
	{
		turn spindle to z-axis <120.027473> speed <400.093407>;
	}
	if( gun_1 == 3 )
	{
		turn spindle to z-axis <0.000000> - <120.027473> speed <400.093407>;
	}
	wait-for-turn spindle around z-axis;
}
*/

FirePrimary()
{
//	firing = 1;
	if ( upgraded )
	{
		if( gun_1 == 3 )
		{
			firing = 1;
			show flare;
			sleep 50;
			hide flare;
			turn spindle to z-axis <72.000000> speed <400.093407>;
			sleep firedelay;
			firing = 0;
		}	
		if( gun_1 == 4 )
		{
			firing = 1;
			show flare;
			sleep 50;
			hide flare;
			turn spindle to z-axis <144.000000> speed <400.093407>;
			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 5 )
		{
			firing = 1;
			show flare;
			sleep 50;
			hide flare;
			turn spindle to z-axis <216.000000> speed <400.093407>;
			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 6 )
		{
			firing = 1;
			show flare;
			sleep 50;
			hide flare;
			turn spindle to z-axis <288.000000> speed <400.093407>;
			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 7 )
		{
			firing = 1;
			show flare;
			sleep 50;
			hide flare;
			turn spindle to z-axis <0.000000> speed <400.093407>;
			sleep firedelay;
			firing = 0;
		}
		++gun_1;
		if( gun_1 == 8 )
		{
			gun_1 = 3;
		}
	}
	if ( !upgraded )
		{
		if( gun_1 == 0 )
		{
			firing = 1;
			show flare2;
			sleep 50;
			hide flare2;
			turn spindle2 to z-axis <120.000000> speed <400.093407>;
			sleep firedelay;
			firing = 0;
		}	
		if( gun_1 == 1 )
		{
			firing = 1;
			show flare2;
			sleep 50;
			hide flare2;
			turn spindle2 to z-axis <240.000000> speed <400.093407>;
			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 2 )
		{
			firing = 1;
			show flare2;
			sleep 50;
			hide flare2;
			turn spindle2 to z-axis <0.000000> speed <400.093407>;
			sleep firedelay;
			firing = 0;
		}
		++gun_1;
		if( gun_1 == 3 )
		{
			gun_1 = 0;
		}
	}
}


QueryPrimary(piecenum)
{
	if ( upgraded )
	{
		piecenum = flare;
	}	
	if ( !upgraded )
	{
		piecenum = flare2;
	}	
}


AimFromPrimary(piecenum)
{
	if ( upgraded )
	{
		piecenum = gear1;
	}
	if ( !upgraded )
	{
		piecenum = turret2;
	}
}


QueryBuildInfo(piecenum)
{
	piecenum = this;
}


StopBuilding()
{
	sleep 1;
	
	building = 0;
	
	set INBUILDSTANCE to 1;
	set ACTIVATION to 0;
	call-script upgrade();
}

StartBuilding()
{
	building = 1;
	
	set YARD_OPEN to 1;
	set INBUILDSTANCE to 0;
	set ACTIVATION to 1;
}



SweetSpot(piecenum)
{
	piecenum = base;
}



Killed(severity, corpsetype)
{
	hide flare;
	hide flare2;
	
	if( upgraded == 1 )
	{
		if( severity <= 80 )
		{
			if( open )
			{
				corpsetype = 1;
			}
			if( !open )
			{
				corpsetype = 2;
			}
			explode base type BITMAPONLY | BITMAP1;
			explode barrel1 type FALL | BITMAP1;
			explode barrel2 type FALL | BITMAP1;
			explode barrel3 type FALL | BITMAP5;
			explode spindle2 type FALL | BITMAP1;
			explode stand2 type FALL | BITMAP1;
			explode turret2 type SHATTER | BITMAP1;
			return (0);
		}
		corpsetype = 4;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode spindle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode stand2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel1 type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP1;
		explode barrel3 type FALL | BITMAP5;
		explode spindle2 type FALL | BITMAP1;
		explode stand2 type FALL | BITMAP1;
		explode turret2 type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 4;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode spindle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode stand2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 5;
	explode base type BITMAPONLY | BITMAP1;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode spindle2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode stand2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
