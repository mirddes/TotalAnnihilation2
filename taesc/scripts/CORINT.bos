#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, body, turret2, rotate2, gun, barrel, 
	   turret, rotate, spindle, sleeve1, barrel1, sleeve2,
	   barrel2, sleeve3, barrel3, sleeve4, barrel4, sleeve5,
	   barrel5, sleeve6, barrel6, cover, flare, flare1,
	   flare2, flare3, flare4, flare5, flare6, GP, nano, spinner, aimer ;

#define SIG_AIM				2
#define SIG_AIM_2			4

static-var  Static_Var_1, gun_1, upgraded, firedelay, firing, inlimbo, closing, yy, xx, building ;
static-var	shield_on, charge_on, nbr_charge, nbr_shield, dome_on, nbr_dome ; 

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif




SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	inlimbo=1;
	if ( upgraded )
	{
		while(closing)
		{
			sleep 100;
		}
//		set ARMORED to 0;
//		if (shield_on)
//		{
//			set ARMORED to 1;
//		}
		turn turret to y-axis heading speed <5.000000>;
		turn rotate to x-axis <60.010989> * gun_1 - pitch speed <360.000000>;
		wait-for-turn turret around y-axis;
		wait-for-turn rotate around x-axis;
		while( firing )
		{
			sleep firedelay;
			wait-for-turn turret around y-axis;
			wait-for-turn rotate around x-axis;
			firing = 0;
		}
		inlimbo=0;
		return (1);
	}	
	if ( !upgraded )
	{
		while(building)
		{
			sleep 100;
		}
//		set ARMORED to 0;
//		if (shield_on)
//		{
//			set ARMORED to 1;
//		}
		turn turret to y-axis heading speed <5.000000>;
		turn rotate to x-axis <0.000000> - pitch speed <2.000000>;
		wait-for-turn turret around y-axis;
		wait-for-turn rotate around x-axis;
		yy=heading;
		xx=0-pitch;
		while( firing )
		{
//			sleep firedelay;
//			wait-for-turn turret around y-axis;
//			wait-for-turn rotate around x-axis;
//			firing = 0;
			sleep 100;
		}
		inlimbo=0;
		return (1);
	}	
}

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_charge = 0;
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_CHARGE)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						
						if (distance > MOBILE_RADIUS_6)			//60-90 seconds
						{
							shgen_count = 0;
						}
						if (distance <= MOBILE_RADIUS_6)		//60 seconds
						{
							shgen_count = 5;
						}
						if (distance <= MOBILE_RADIUS_5)		//45 seconds
						{
							shgen_count = 4;
						}
						if (distance <= MOBILE_RADIUS_4)		//30 seconds
						{
							shgen_count = 3;
						}
						if (distance <= MOBILE_RADIUS_3)		//15 seconds
						{
							shgen_count = 2;
						}
						if (distance <= BOOST_RADIUS)
						{
							shgen_count = 1;
							++nbr_charge;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if (!upgraded)
		{
			if(nbr_charge>=2)
			{
				if(!charge_on)
				{
					charge_on = 1;
					sleep 1;
					firedelay = 9850;				//Normal, Charged
				}
			}
			if(nbr_charge<2)
			{
				if(charge_on)
				{
					charge_on = 0;
					sleep 1;
					firedelay = 15850;				//Normal
				}
			}	
		}
		if (upgraded)
		{
			if(nbr_charge>=2)
			{
				if(!charge_on)
				{
					charge_on = 1;
					sleep 1;
					firedelay = 7850;				//Upgraded, Charged //1850
				}
			}
			if(nbr_charge<2)
			{
				if(charge_on)
				{
					charge_on = 0;
					sleep 1;
					firedelay = 11850;				//Upgraded, Not-Charged //3050
				}
			}	
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(shgen_count == 0)
		{
			sleep rand(60000,90000);
		}
		if(shgen_count == 1)
		{
			sleep rand(3000,4000);
		}
		if(shgen_count == 2)
		{
			sleep rand(8500,13500);
		}
		if(shgen_count == 3)
		{
			sleep rand(22500,28500);
		}
		if(shgen_count == 4)
		{
			sleep rand(30000,43500);
		}
		if(shgen_count == 5)
		{
			sleep rand(45000,58500);
		}
		sleep rand(3000,4000);
	}
}	

Upgrade()
{
	var xz, x, z, unit_ID, distance;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	var myid;
	myid= get MY_ID;

	for (unit_ID = min; unit_ID <= max; ++unit_ID)
	{
		if(unit_ID != myid)
		{
			if(get UNIT_HEIGHT(unit_ID) == 3781490)
			{
				if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
				{
					xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
					SECURE_XZ;
					distance=get XZ_HYPOT(xz);
					if (distance <= [2])
					{
						if (get UNIT_IS_ON_THIS_COMP(get(MY_ID)))
						{
							if (get UNIT_IS_ON_THIS_COMP(unit_ID))
							{
								drop-unit unit_ID;
								attach-unit unit_ID to rotate;
							}
						}
						firing = 1;
						closing = 1;
												
						show cover;
						show turret;
						show spindle;
						show sleeve1;
						show barrel1;
						show sleeve2;
						show barrel2;
						show sleeve3;
						show barrel3;
						show sleeve4;
						show barrel4;
						show sleeve5;
						show barrel5;
						show sleeve6;
						show barrel6;
									
						hide turret2;
						hide rotate2;
						hide gun;
						hide barrel;
						
						spin aimer around y-axis speed <60.000000>;
												
//						Static_Var_1 = 0;
						set INBUILDSTANCE to 0;
						upgraded = 1;
						gun_1 = 0;
						
						move base to y-axis [-10] now;
						show base;
						move base to y-axis [0] speed [5];
						
						wait-for-move base along y-axis;
					
						move body to y-axis [-10] speed [5];
						
						wait-for-move body along y-axis;
					
						wait-for-turn turret around y-axis;
						wait-for-turn rotate around x-axis;
											
						hide body;
						
						sleep 100;
						
//						set ARMORED to 0;
//						if (shield_on)
//						{
//							set ARMORED to 1;
//						}
						firedelay = 11850;		//3050
						if (charge_on)
						{
							firedelay = 7850;	//2250
						}
//						Static_Var_1 = 1;
						if(!inlimbo)
						{		
							signal SIG_AIM;
							set-signal-mask SIG_AIM;
//							start-script RestoreAfterDelay();
						}
						closing = 0;
						firing = 0;
						return;
					}
				}
			}
		}
	}
}





Create()
{
	xx=0;
	yy=0;
	
	nbr_charge = 0;
	nbr_shield = 0;
	nbr_dome = 0;
	
	charge_on = 0;
	shield_on = 0;
	dome_on = 0;
	
	inlimbo=0;
	
	hide cover;
	
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;
	hide flare;
	
	hide barrel1;
	hide barrel2;
	hide barrel3;
	hide barrel4;
	hide barrel5;
	hide barrel6;
	hide base;
	hide sleeve1;
	hide sleeve2;
	hide sleeve3;
	hide sleeve4;
	hide sleeve5;
	hide sleeve6;
	hide turret;
	hide spindle;

	dont-cache cover;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache flare3;
	dont-cache flare4;
	dont-cache flare5;
	dont-cache flare6;
	dont-cache flare;
	
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	dont-shade barrel4;
	dont-shade barrel5;
	dont-shade barrel6;
	dont-shade sleeve1;
	dont-shade sleeve2;
	dont-shade sleeve3;
	dont-shade sleeve4;
	dont-shade sleeve5;
	dont-shade sleeve6;
	dont-shade turret;
	dont-shade spindle;
	
	dont-shade turret2;
	dont-shade gun;
	dont-shade rotate2;
	dont-shade barrel;

	move turret to y-axis [-14.37415] NOW;
	
	hide spinner;
	hide aimer;
	
	gun_1 = 6;
	upgraded = 0;
	firedelay = 15850;
	firing = 0;
//	Static_Var_1 = 1;
	building = 0;
	
	set INBUILDSTANCE to 0;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();

}



FirePrimary()
{
//	firing = 1;
	if ( !upgraded )
	{
		gun_1 = 6;
		firing = 1;
		move barrel to z-axis [-5.000000] speed [500.000000];
		move rotate2 to z-axis [-3.000000] speed [500.000000];
		wait-for-move barrel along z-axis;
		show flare;
		sleep 150;
		hide flare;
		move barrel to z-axis [0.000000] speed [3.000000];
		move rotate2 to z-axis [0.000000] speed [3.000000];
		sleep firedelay;
		firing = 0;
	}
	if ( upgraded )
	{
		firing = 1;
		if( gun_1 == 0 )
		{
			firing = 1;
			move barrel1 to z-axis [-6.000000] now;
			show flare1;
			sleep 50;
			hide flare1;
			move barrel1 to z-axis [0.000000] speed [2.000000];
//			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 1 )
		{
			firing = 1;
			move barrel2 to z-axis [-3.000000] now;
			show flare2;
			sleep 50;
			hide flare2;
			move barrel2 to z-axis [0.000000] speed [2.000000];
//			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 2 )
		{
			firing = 1;
			move barrel3 to z-axis [3.000000] now;
			show flare3;
			sleep 50;
			hide flare3;
			move barrel3 to z-axis [0.000000] speed [2.000000];
//			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 3 )
		{
			firing = 1;
			move barrel4 to z-axis [6.000000] now;
			show flare4;
			sleep 50;
			hide flare4;
			move barrel4 to z-axis [0.000000] speed [2.000000];
//			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 4 )
		{
			firing = 1;
			move barrel5 to z-axis [3.000000] now;
			show flare5;
			sleep 50;
			hide flare5;
			move barrel5 to z-axis [0.000000] speed [2.000000];
//			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 5 )
		{
			firing = 1;
			move barrel6 to z-axis [-3.000000] now;
			show flare6;
			sleep 50;
			hide flare6;
			move barrel6 to z-axis [0.000000] speed [2.000000];
			sleep firedelay;
			firing = 0;
		}
		++gun_1;
		if( gun_1 >= 6 )
		{
			gun_1 = 0;
		}
	}
}	



TargetCleared(Func_Var_1)
{
	if( Func_Var_1 == 1 )
	{
		signal SIG_AIM;
		stop-spin turret around y-axis;
		stop-spin rotate around x-axis;
	}
}

AimFromPrimary(piecenum)
{
	if ( upgraded )
	{
		piecenum = aimer;
	}
	if ( !upgraded )
	{
		piecenum = turret2;
	}
}

QueryPrimary(piecenum)
{
	if(upgraded)
	{
		if( gun_1 == 0 )
		{
			piecenum = flare1;
		}
		if( gun_1 == 1 )
		{
			piecenum = flare2;
		}
		if( gun_1 == 2 )
		{
			piecenum = flare3;
		}			
		if( gun_1 == 3 )
		{
			piecenum = flare4;
		}			
		if( gun_1 == 4 )
		{
			piecenum = flare5;
		}			
		if( gun_1 == 5 )
		{
			piecenum = flare6;
		}	
		if( gun_1 == 6 )
		{
			piecenum = flare;
		}
	}
	if(!upgraded)
	{
		piecenum = flare;
	}
}

QueryBuildInfo(piecenum)
{
	piecenum = nano;
}


StopBuilding()
{
//	show body;
	sleep 1;
	building = 0;
	
	set ACTIVATION to 0;
	
	call-script upgrade();
	
	hide cover;
}

StartBuilding()
{
	building = 1;
	set INBUILDSTANCE to 0;
}

Deactivate()
{
	sleep 5000;
	if(!upgraded)
	{
		wait-for-move turret along y-axis;
		move turret to y-axis [-14.37415] speed [4];
		wait-for-move turret along y-axis;
		show turret2;
		hide turret;
		set INBUILDSTANCE to 0;
	}
}

Activate()
{
	if(!upgraded)
	{
		var xxx, yyy;
		yyy= yy;
		xxx= xx;
		show cover;
		turn turret to y-axis yyy speed <10>;
		turn rotate to x-axis xxx speed <10>;
		wait-for-turn turret around y-axis;
		wait-for-turn rotate around x-axis;
		wait-for-move turret along y-axis;
		set INBUILDSTANCE to 0;
		
		hide turret2;
		show turret;
		
		move turret to y-axis [0] speed [4];
		wait-for-move turret along y-axis;
		
		turn nano to y-axis <0> now;
		turn nano to x-axis <0> now;
		
		set INBUILDSTANCE to 1;
		set YARD_OPEN to 1;
	
		turn nano to y-axis yyy now;
		turn nano to x-axis xxx now;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;
	hide flare;
	if( upgraded == 1 )
	{
		if( severity <= 80 )
		{
			corpsetype = 1;
			explode body type BITMAPONLY | BITMAP1;
			explode barrel1 type FALL | BITMAP1;
			explode barrel2 type FALL | BITMAP1;
			explode barrel3 type FALL | BITMAP5;
			explode barrel4 type FALL | BITMAP5;
			explode barrel5 type FALL | BITMAP1;
			explode barrel6 type FALL | BITMAP1;
			explode sleeve1 type BITMAPONLY | BITMAP5;
			explode sleeve2 type BITMAPONLY | BITMAP1;
			explode sleeve3 type BITMAPONLY | BITMAP1;
			explode sleeve4 type BITMAPONLY | BITMAP1;
			explode sleeve5 type BITMAPONLY | BITMAP5;
			explode sleeve6 type BITMAPONLY | BITMAP1;
			return (0);
		}	
		corpsetype = 4;
		explode body type BITMAPONLY | BITMAP1;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve1 type BITMAPONLY | BITMAP5;
		explode sleeve2 type BITMAPONLY | BITMAP1;
		explode sleeve3 type BITMAPONLY | BITMAP1;
		explode sleeve4 type BITMAPONLY | BITMAP1;
		explode sleeve5 type BITMAPONLY | BITMAP5;
		explode sleeve6 type BITMAPONLY | BITMAP1;
		return (0);
	}	
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 4;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode body type BITMAPONLY | BITMAP1;
	explode gun type BITMAPONLY | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type BITMAPONLY | BITMAP5;
}
