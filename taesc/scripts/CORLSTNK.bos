#define TA

#include "sfxtype.h"
#include "exptype.h"

piece flare1, flare2, flare3, flare4, base, body, 
	  turret1, sleeve1, spin1, turret2, sleeve2, spin2, 
      turret3, sleeve3, barrel3, turret4, sleeve4, barrel4;


static-var  gun_1, gun_2, gun_3, salvo_3;
static-var firedelay, firing, firedelay_2, firing_2, firedelay_3, firing_3;

#define SIG_AIM 			2
#define SIG_AIM_2 			4
#define SIG_AIM_3			8
#define SIG_R				16

SmokeUnit()
{
	var Var0;
	var Var1;
	var Var2;
	while (get 17)
	{
	  sleep 400;
	}
	while (TRUE)
	{
	  Var0 = get 4;
	  if ((Var0 < 66))
	  {
		Var2 = (256 | 2);
		if ((rand (1, 66) < Var0))
		{
		  Var2 = (256 | 1);
		}
		emit-sfx Var2 from body;
	  }
	  Var1 = (Var0 * 50);
	  if ((Var1 < 200))
	  {
		Var1 = 200;
	  }
	  sleep Var1;
	}
}

/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}
*/
/*
RockUnit(anglex, anglez)
{
	signal 32;
	set-signal-mask 32;
	turn base to x-axis anglex speed <50.010989>;
	turn base to z-axis anglez speed <50.010989>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}
*/

Create()
{
	set ARMORED to 1;
	gun_1 = 0;
	gun_2 = 3;
	gun_3 = 6;
	
	salvo_3 = 8;
	
	firedelay = 849;
	firedelay_2 = 851;
	firedelay_3 = 350;
	firing = 0;
	firing_2 = 0; 
	firing_3 = 0; 
	
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
		
	
//	restore_delay = 3000;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script SmokeUnit();
}


RestoreAfterDelay()
{
//	sleep 6000;
	
	signal SIG_R;
	set-signal-mask SIG_R;
	
	sleep 15000;
	
	turn turret1 to y-axis <0.00> speed <120>;
	turn sleeve1 to x-axis <0.00> speed <120>;
	
	turn turret2 to y-axis <0.00> speed <120>;
	turn sleeve2 to x-axis <0.00> speed <120>;
	
	turn turret3 to y-axis <0.00> speed <180>;
	turn sleeve3 to x-axis <0.00> speed <180>;

	turn turret4 to y-axis <0.00> speed <180>;
	turn sleeve4 to x-axis <0.00> speed <180>;
}
/*
RestoreSecondary()
{
	sleep 6000;
	
	signal SIG_R;
	set-signal-mask SIG_R;
	
	turn turret2 to y-axis <0.00> speed <135>;
	turn sleeve2 to x-axis <0.00> speed <135>;
}

RestoreTertiary()
{
	sleep 6000;
	
	signal SIG_R;
	set-signal-mask SIG_R;
	
	turn turret3 to y-axis <0.00> speed <180>;
	turn sleeve3 to x-axis <0.00> speed <180>;

	turn turret4 to y-axis <0.00> speed <180>;
	turn sleeve4 to x-axis <0.00> speed <180>;
}
*/

AimPrimary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	
	turn turret1 to y-axis heading speed <240>;
	turn sleeve1 to x-axis 0 - pitch speed <240>;
	
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	while( firing )
	{
		sleep 50;
	}
	start-script RestoreAfterDelay();
	return 1;
}


FirePrimary()
{
	if( gun_1 == 0 )
	{
		firing = 1;
		turn spin1 to z-axis <120> speed <360>;
		show flare1;
		sleep 50;
		hide flare1;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 1 )
	{
		firing = 1;
		turn spin1 to z-axis <240> speed <360>;
		show flare1;
		sleep 50;
		hide flare1;
		sleep firedelay;
		firing = 0;
	}	
	if( gun_1 == 2 )
	{
		firing = 1;
		turn spin1 to z-axis <0> speed <360>;
		show flare1;
		sleep 50;
		hide flare1;
		sleep firedelay;
		firing = 0;
	}	
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = 0;
	}
}


AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn turret2 to y-axis heading speed <240>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <240>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	while( firing_2 )
	{
		sleep 50;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 3 )
	{
		firing_2 = 1;
		turn spin2 to z-axis <120> speed <360>;
		show flare2;
		sleep 50;
		hide flare2;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2 == 4 )
	{
		firing_2 = 1;
		turn spin2 to z-axis <240> speed <360>;
		show flare2;
		sleep 50;
		hide flare2;
		sleep firedelay_2;
		firing_2 = 0;
	}
	if( gun_2 == 5 )
	{
		firing_2 = 1;
		turn spin2 to z-axis <0> speed <360>;
		show flare2;
		sleep 50;
		hide flare2;
		sleep firedelay_2;
		firing_2 = 0;
	}		
	++gun_2;
	if( gun_2 == 6 )
	{
		gun_2 = 3;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	
	if( salvo_3 == 8 )
	{
		turn turret3 to y-axis heading speed <360>;
		turn sleeve3 to x-axis <0.000000> - pitch speed <360>;
	}
	if( salvo_3 == 9 )
	{
		turn turret4 to y-axis heading speed <360>;
		turn sleeve4 to x-axis <0.000000> - pitch speed <360>;
		
	}
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	
	wait-for-turn turret4 around y-axis;
	wait-for-turn sleeve4 around x-axis;	
	while( firing_3 )
	{
		sleep 100;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	var gun_3_tmp;
	gun_3_tmp = gun_3;
	++gun_3;
	if( gun_3 == 8 )
	{
		gun_3 = 6;
	}
	if( gun_3_tmp == 6 )
	{
		firing_3 = 1;
		salvo_3 = 9;
		show flare3;
		sleep 150;
		hide flare3;
		sleep firedelay_3;
		firing_3 = 0;
		
		
	}
	if( gun_3_tmp == 7 )
	{
		firing_3 = 1;
		salvo_3 = 8;
		show flare4;
		sleep 150;
		hide flare4;
		sleep firedelay_3;
		firing_3 = 0;
	}
}

QueryTertiary(piecenum)
{
	if( gun_3 == 6 )
		piecenum = flare3;
	if( gun_3 == 7 )
		piecenum = flare4;
}

AimFromTertiary(piecenum)
{
	if( salvo_3 == 8 )
		piecenum = turret3;
	if( salvo_3 == 9 )
		piecenum = turret4;
	
}

SweetSpot(piece_name)
{
	piece_name = body;
}


Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode barrel3 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode spin1 type BITMAPONLY | BITMAP1;
		explode sleeve3 type BITMAPONLY | BITMAP5;
		explode turret3 type BITMAPONLY | BITMAP5;
		explode spin2 type BITMAPONLY | BITMAP1;
		explode sleeve1 type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel3 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode spin1 type FALL | BITMAP1;
		explode sleeve3 type FALL | BITMAP5;
		explode turret3 type BITMAPONLY | BITMAP5;
		explode spin2 type FALL | BITMAP1;
		explode sleeve1 type FALL | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP5;
		explode spin1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode spin2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP5;
	explode spin1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve3 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode turret3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode spin2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode turret1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}


