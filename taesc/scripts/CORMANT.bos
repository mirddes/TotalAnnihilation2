#define TA

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, turret, base, sleeves, rocket1, rocket2, cover1, cover2, body, turret_open, closed, emit;

static-var  gun_1, reload, antiair ;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = flare1;
	reload = 0;
	antiair = 0;

	hide closed;
	hide emit;
		
	dont-cache flare1;
	dont-cache flare2;
	hide flare1;
	hide flare2;

	
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script SmokeUnit();
}


RestoreAfterDelay()
{
	sleep 3000;
	set-signal-mask 0;
	antiair = 0;
	turn turret to y-axis <0.000000> speed <180.000000>;
	turn sleeves to x-axis <0.000000> speed <180.000000>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

AimPrimary(heading, pitch)
{
	while ( antiair OR reload )
	{
		sleep 100;
	}
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <180.000000>;
	turn sleeves to x-axis <0.00> - pitch speed <180.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	reload = 1;
	if( gun_1 == flare1 )
	{
		sleep 150;
	}
	if( gun_1 == flare2 )
	{
		sleep 150;
	}
	gun_1 = !gun_1;
	reload = 0;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	PieceNum = gun_1;
}

AimTertiary(heading, pitch)
{
	antiair = 1;
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret to y-axis heading speed <180.000000>;
	turn sleeves to x-axis <0.00> - pitch speed <180.000000>;
	while( reload == 1 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <180.000000>;
	turn sleeves to x-axis <0.00> - pitch speed <180.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
//	antiair = 0;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	reload = 1;
	antiair = 0;
	if( gun_1 == flare1 )
	{
		sleep 150;
	}
	if( gun_1 == flare2 )
	{
		sleep 150;
	}
	gun_1 = !gun_1;
	reload = 0;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode rocket1 type BITMAPONLY | BITMAP1;
		explode rocket2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode sleeves type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rocket1 type FALL | BITMAP1;
		explode rocket2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | BITMAP1;
		explode flare2 type FALL | BITMAP5;
		explode sleeves type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleeves type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode rocket1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rocket2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeves type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP1;
}
