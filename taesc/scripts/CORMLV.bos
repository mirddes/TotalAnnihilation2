#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, Door1, Turret, Gun, Door2, Stand, wheel1,
       wheel2, wake1, wake2 ;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging, bMoving;


activatescr()
{
	if( TRUE )
	{
		move Door1 to y-axis [0.000000] now;
		move Turret to y-axis [0.000000] now;
		move Gun to x-axis [0.000000] now;
		turn Gun to y-axis <0.000000> now;
		turn Gun to y-axis <-90.021978> speed <5626.373626>;
		sleep 16;
	}
	if( TRUE )
	{
		move Gun to y-axis [4.500000] speed [10.514020];
		turn Door1 to z-axis <-91.846154> speed <214.593407>;
		turn Door2 to z-axis <88.802198> speed <207.489011>;
		sleep 428;
	}
	if( TRUE )
	{
		move Door1 to x-axis [-0.250000] speed [0.584106];
		move Door1 to y-axis [-4.699994] speed [10.981305];
		move Door2 to y-axis [-4.600000] speed [10.747662];
		move Stand to y-axis [3.049994] speed [7.126166];
		turn Door1 to z-axis <-91.846154> speed <0.000000>;
		turn Door2 to z-axis <88.192308> speed <1.417582>;
		sleep 428;
	}
	if( TRUE )
	{
		move Door1 to x-axis [-0.149994] speed [0.233099];
		move Door1 to y-axis [-4.649994] speed [0.116547];
		move Door2 to y-axis [-4.650000] speed [0.116547];
		move Turret to x-axis [2.000000] speed [4.662000];
		move Turret to y-axis [0.000006] speed [0.000006];
		turn Door1 to z-axis <-90.626374> speed <2.835165>;
		turn Door2 to y-axis <0.604396> speed <1.417582>;
		turn Door2 to z-axis <88.192308> speed <0.000000>;
		sleep 429;
	}
	sleep 11;
}

deactivatescr()
{
	if( TRUE )
	{
		move Door1 to x-axis [-0.149994] now;
		move Door1 to x-axis [-0.250000] speed [0.231482];
		move Door1 to y-axis [-4.649994] now;
		move Door1 to y-axis [-4.699994] speed [0.115735];
		move Door2 to y-axis [-4.650000] now;
		move Door2 to y-axis [-4.600000] speed [0.115741];
		move Turret to x-axis [2.000000] now;
		move Turret to x-axis [0.000000] speed [4.629626];
		move Turret to y-axis [0.000006] now;
		move Turret to y-axis [0.000000] speed [0.000006];
		move Stand to y-axis [3.049994] now;
		move Gun to x-axis [0.000000] now;
		move Gun to y-axis [4.500000] now;
		turn Door1 to z-axis <-90.626374> now;
		turn Door1 to z-axis <-91.846154> speed <2.813187>;
		turn Door2 to y-axis <0.604396> now;
		turn Door2 to y-axis <0.000000> speed <1.406593>;
		turn Door2 to z-axis <88.192308> now;
		turn Door2 to z-axis <88.192308> speed <0.000000>;
		turn Gun to y-axis <-90.021978> now;
		sleep 432;
	}
	if( TRUE )
	{
		move Door1 to x-axis [0.000000] speed [0.578699];
		move Door1 to y-axis [0.000000] speed [10.879626];
		move Door2 to y-axis [0.000000] speed [10.648145];
		move Stand to y-axis [0.000000] speed [7.060181];
		turn Door1 to z-axis <-91.846154> speed <0.000000>;
		turn Door2 to z-axis <88.802198> speed <1.406593>;
		sleep 432;
	}
	if( TRUE )
	{
		move Gun to y-axis [0.000000] speed [10.416663];
		turn Door1 to z-axis <0.000000> speed <212.604396>;
		turn Door2 to z-axis <0.000000> speed <205.565934>;
		sleep 432;
	}
	if( TRUE )
	{
		turn Gun to y-axis <0.000000> speed <208.379121>;
		sleep 432;
	}
	sleep 432;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	turn Gun to y-axis Static_Var_1 speed <160.038462>;
	wait-for-turn Gun around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn Gun to y-axis <0.000000> speed <160.038462>;
	wait-for-turn Gun around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);		
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

EmitSFX()
{
	while( TRUE )
	{
		if( Static_Var_2 == 3 )
		{
			set ARMORED to 1;
			if( bMoving )
			{
				emit-sfx 259 from wake1;
				emit-sfx 259 from wake2;
			}
		}
		if( Static_Var_2 != 3 )
		{
			set ARMORED to 0;
		}	
		sleep 250;
	}
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 4;
	bMoving = FALSE;
	
//	set ACTIVATION to 1;
	
	call-script InitState();
//	start-script SmokeUnit();
	start-script EmitSFX();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	sleep rand(25,250);
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
}

StartMoving()
{
	bMoving = TRUE;
	spin wheel1 around x-axis speed <150.032967>;
	spin wheel2 around x-axis speed <150.032967>;
}

StopMoving()
{
	bMoving = FALSE;
	stop-spin wheel1 around x-axis;
	stop-spin wheel2 around x-axis;
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP1;
		explode Door1 type BITMAPONLY | BITMAP1;
		explode Door2 type BITMAPONLY | BITMAP1;
		explode Gun type BITMAPONLY | BITMAP5;
		explode Stand type BITMAPONLY | BITMAP1;
		explode Turret type BITMAPONLY | BITMAP1;
		explode wheel1 type BITMAPONLY | BITMAP1;
		explode wheel2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP1;
		explode Door1 type FALL | BITMAP1;
		explode Door2 type FALL | BITMAP1;
		explode Gun type SHATTER | BITMAP5;
		explode Stand type FALL | BITMAP1;
		explode Turret type FALL | BITMAP1;
		explode wheel1 type FALL | BITMAP1;
		explode wheel2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP1;
		explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Gun type SHATTER | BITMAP5;
		explode Stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam type BITMAPONLY | BITMAP1;
	explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Gun type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode Stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
