#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, body, turret, sleeve, turny, barrel1, barrel2, barrel3, flare3, flare2, flare1, emit, doors, storage, glow, this, 
	   spinner, aimer ;

static-var upgraded, gun_1, salvo, firedelay, building, firing ;
static-var shield_on, charge_on, nbr_charge, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_charge = 0;
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;
		
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_CHARGE)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						
						if (distance > MOBILE_RADIUS_6)			//60-90 seconds
						{
							shgen_count = 0;
						}
						if (distance <= MOBILE_RADIUS_6)		//60 seconds
						{
							shgen_count = 5;
						}
						if (distance <= MOBILE_RADIUS_5)		//45 seconds
						{
							shgen_count = 4;
						}
						if (distance <= MOBILE_RADIUS_4)		//30 seconds
						{
							shgen_count = 3;
						}
						if (distance <= MOBILE_RADIUS_3)		//15 seconds
						{
							shgen_count = 2;
						}
						if (distance <= BOOST_RADIUS)
						{
							shgen_count = 1;
							++nbr_charge;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_charge>=3)
		{
			if(!charge_on)
			{
				charge_on = 1;
				sleep 1;
//				firedelay = 25450;			//Normal, Charged - not used
				if (upgraded)
				{
					firedelay = 0;			//Upgraded, Charged - 
				}
			}
		}
		if(nbr_charge<3)
		{
			if(charge_on)
			{
				charge_on = 0;
				sleep 1;
//				firedelay = 31850;				//Normal - not used
				if (upgraded)
				{
//					firedelay = 39850;			//Upgraded, Not-Charged - 
					firedelay = 31850;
				}
			}
		}	
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(shgen_count == 0)
		{
			sleep rand(60000,90000);
		}
		if(shgen_count == 1)
		{
			sleep rand(3000,4000);
		}
		if(shgen_count == 2)
		{
			sleep rand(8500,13500);
		}
		if(shgen_count == 3)
		{
			sleep rand(22500,28500);
		}
		if(shgen_count == 4)
		{
			sleep rand(30000,43500);
		}
		if(shgen_count == 5)
		{
			sleep rand(45000,58500);
		}
		sleep rand(3000,4000);
	}
}	


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
/*
SuperDeactivatescr()
{
	turn turret to y-axis 0 now;
	turn sleeve to x-axis 0 now;
	
	move barrel3 to z-axis [-10] now;
	
	move barrel2 to z-axis [-10] now;
	
	move barrel1 to z-axis [-10] now;
	
	turn turny to x-axis <90> now;
	
	move turret to y-axis [-12.48266] now;
}
*/
Deactivatescr()
{
	turn sleeve to x-axis 0 speed <1.000000>;
	
	move barrel3 to z-axis [-10] speed [4];
	wait-for-move barrel3 along z-axis;
	
	move barrel2 to z-axis [-10] speed [3];
	wait-for-move barrel2 along z-axis;
	
	move barrel1 to z-axis [-10] speed [2];
	wait-for-move barrel1 along z-axis;
	
	turn turny to x-axis <90> speed <6>;
	wait-for-turn turny around x-axis;
	
	move turret to y-axis [-12.48266] speed [4];
	wait-for-move turret along y-axis;
}

Activatescr()
{
	move turret to y-axis [0] speed [4];
	wait-for-move turret along y-axis;
	
	turn turny to x-axis <0> speed <6>;
	wait-for-turn turny around x-axis;
	
	move barrel1 to z-axis [0] speed [2];
	wait-for-move barrel1 along z-axis;
	
	move barrel2 to z-axis [0] speed [3];
	wait-for-move barrel2 along z-axis;

	move barrel3 to z-axis [0] speed [4];
	wait-for-move barrel3 along z-axis;
}

Create()
{
//	turn turret to y-axis 0 now;
//	turn sleeve to x-axis 0 now;
//	move barrel3 to z-axis [-10] now;
//	move barrel2 to z-axis [-10] now;
//	move barrel1 to z-axis [-10] now;
//	turn turny to x-axis <90> now;
//	move turret to y-axis [-12.48266] now;
	
	nbr_charge = 0;
	nbr_shield = 0;
	nbr_dome = 0;
	
	charge_on = 0;
	shield_on = 0;
	dome_on = 0;
	
	upgraded = 1;
	gun_1 = 0;
	salvo = 0;
//	firedelay = 39850;
	firedelay = 31850;	
	firing = 0;
	
	building = 0;
	
	hide spinner;
	hide aimer;

//	spin aimer around y-axis speed <-225.000000>;

	
	hide flare1;
	hide flare2;
	hide flare3;
	dont-cache glow;
	dont-shade glow;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache flare3;
	spin flare1 around z-axis speed <100>;
	spin flare2 around z-axis speed <100>;
	spin flare3 around z-axis speed <100>;
	dont-shade turret;
	dont-shade sleeve;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
//	hide glow;
//	hide storage;
	set INBUILDSTANCE to 1;

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}

//	call-script Activatescr();
	start-script detect();
	start-script SmokeUnit();
/*
	sleep 1;
	var xz, x, z, unit_ID, distance;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	var myid;
	myid= get MY_ID;
	for (unit_ID = min; unit_ID <= max; ++unit_ID)
	{
		if(unit_ID != myid)
		{
			if(get UNIT_HEIGHT(unit_ID) == 3600001)
			{
				if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
				{
					if (get UNIT_XZ(unit_ID) == get PIECE_XZ(base))
					{
						show storage;
						show glow;
						upgraded = 1;
						firedelay = 14000;
						set INBUILDSTANCE to 0;
						return(0);
					}	
				}
			}
		}
	}
	return (0);
*/
}

upgrade()
{
	var xz, x, z, unit_ID, distance;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	var myid;
	myid= get MY_ID;

	for (unit_ID = min; unit_ID <= max; ++unit_ID)
	{
		if(unit_ID != myid)
		{
			if(get UNIT_HEIGHT(unit_ID) == 3600001)
			{
				if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
				{
					xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
					SECURE_XZ;
					distance=get XZ_HYPOT(xz);
					if (distance <= [2])
					{
						if (get UNIT_IS_ON_THIS_COMP(get(MY_ID)))
						{
							if (get UNIT_IS_ON_THIS_COMP(unit_ID))
							{
								drop-unit unit_ID;
								attach-unit unit_ID to this;
							}
						}
						show storage;
						show glow;
						upgraded = 1;
//						firedelay = 39850;
						firedelay = 31850;
						if (charge_on)
						{
							firedelay = 0;
						}
						salvo=0;
						set INBUILDSTANCE to 0;
						return(0);
					}
				}
			}
		}
	}
}

QueryBuildInfo(piecenum)
{
	piecenum = this;
}

StopBuilding()
{

	sleep 1;
	
	building = 0;
	
	set INBUILDSTANCE to 1;
	set ACTIVATION to 0;
	call-script upgrade();
//	call-script Activatescr();
}

StartBuilding()
{
//	call-script Deactivatescr();
	
	building = 1;
	
	set YARD_OPEN to 1;
	set INBUILDSTANCE to 0;
	set ACTIVATION to 1;
}
/*
AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while(( gun_1 || building ))
	{
		sleep 250;
	}
	if (upgraded == 0)
	{
		salvo = 2;
	}
	turn turret to y-axis heading speed <2.500000>;
	turn sleeve to x-axis <0.000000> - pitch speed <1.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	if( salvo == 0 )
	{
		move barrel3 to z-axis [-10.000000] speed [450.000000];	
		explode flare3 type BITMAPONLY | BITMAP5;
		sleep 150;
	}
	if( salvo == 1 )
	{
		move barrel2 to z-axis [-10.000000] speed [300.000000];
		explode flare2 type BITMAPONLY | BITMAP5;
		sleep 150;
	}
	if( salvo == 2 )
	{
		gun_1 = 1;
		move barrel1 to z-axis [-10.000000] speed [150.000000];
		if (upgraded == 0)
		{
			move barrel2 to z-axis [-10.000000] speed [300.000000];
			move barrel3 to z-axis [-10.000000] speed [450.000000];
		}
		explode flare1 type BITMAPONLY | BITMAP5;
		sleep 150;
	}
	++salvo;
	if( salvo == 3 )
	{
		move barrel3 to z-axis [0.000000] speed [2.000000];
		move barrel2 to z-axis [0.000000] speed [1.700000];
		move barrel1 to z-axis [0.000000] speed [1.000000];
		move turret to z-axis [0.000000] speed [0.600000];
		sleep firedelay;
		gun_1 = 0;
		if(upgraded == 0)
		{
			salvo = 2;
			sleep 1;
		}
		if(upgraded >= 1)
		{
			salvo = 0;
			sleep 1;
		}
	}
	return (0);
}
*/

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while(building)
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <2.500000>;
	turn sleeve to x-axis <0.000000> - pitch speed <1.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	while(firing)
	{
		sleep 100;
	}
	return (1);
}

FirePrimary()
{
	signal SIG_AIM_2;
	firing = 1;

	explode flare1 type BITMAPONLY | BITMAP5;
	
	move barrel3 to z-axis [-10.000000] speed [450.000000];	
	move barrel2 to z-axis [-10.000000] speed [300.000000];
	move barrel1 to z-axis [-10.000000] speed [150.000000];

	sleep 150;

	move barrel3 to z-axis [0.000000] speed [2.000000];
	move barrel2 to z-axis [0.000000] speed [1.700000];
	move barrel1 to z-axis [0.000000] speed [1.000000];
	move turret to z-axis [0.000000] speed [0.600000];

	sleep firedelay;

	firing = 0;
}




AimFromPrimary(piecenum)
{
	piecenum = aimer;
}

QueryPrimary(piecenum)
{
	piecenum = emit;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( upgraded == 1 )
	{
		if( severity <= 80 )
		{
			corpsetype = 1;
			explode barrel1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
			explode barrel2 type BITMAPONLY | BITMAP1;
			explode barrel3 type BITMAPONLY | BITMAP1;
			explode base type BITMAPONLY | BITMAP1;
			explode sleeve type BITMAPONLY | BITMAP1;
			explode turret type BITMAPONLY | BITMAP5;
			return (0);
		}
		corpsetype = 3;
		explode barrel1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode barrel3 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type FALL | FIRE | SMOKE | BITMAP1;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 4;
	explode barrel1 type BITMAPONLY | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode sleeve type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP5;
	return (0);
}
