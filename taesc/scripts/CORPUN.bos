#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, frame, door1, door2, hole, pillartops, turretssides, turret,  barrel2, barrel3, 
	   turretback, barrel1, flare, body, turret2, sleeves, cannon1, flare1, cannon2, flare2, cover, top, leg1, leg2, leg3, leg4, attach, flareX;

static-var  open, restore_delay, gun_1, upgraded, firedelay, firing, inlimbo, closing, building, firing_2 ;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

#define SIG_AIM				2
#define SIG_AIM_2			4

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from frame;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RestoreAfterDelay()
{
	sleep 6000;
	set-signal-mask 0;
//	turn pillartops to y-axis <0.000000> speed <100.021978>;
//	turn turret to x-axis <0.000000> speed <50.010989>;
//	wait-for-turn pillartops around y-axis;
//	wait-for-turn turret around x-axis;
	open = 0;
	closing = 1;
	stop-spin pillartops around y-axis;
	stop-spin turret around x-axis;
	turn pillartops to y-axis <0.000000> speed <90.043956>;
	turn turret to x-axis <0.000000> speed <45.021978>;
	wait-for-turn pillartops around y-axis;
	wait-for-turn turret around x-axis;
	move barrel2 to z-axis [0.000000] now;
	move barrel2 to z-axis [-3.061800] speed [8.000000];
	move turretback to z-axis [0.000000] now;
	move turretback to z-axis [1.621620] speed [4.000000];
	move barrel1 to z-axis [0.000000] now;
	move barrel1 to z-axis [-15.660540] speed [45.000000];
	move door1 to y-axis [-9.593640] now;
	move door2 to y-axis [-9.593640] now;
	turn door1 to z-axis <-88.648352> now;
	turn door2 to z-axis <89.351648> now;
	sleep 278;
	move pillartops to y-axis [-15.120000] speed [18.000000];
	move door1 to y-axis [0.000000] speed [13.000000];
	move door2 to y-axis [0.000000] speed [13.000000];
	sleep 572;
	turn door1 to z-axis <0.000000> speed <236.104396>;
	turn door2 to z-axis <0.000000> speed <238.104396>;
	sleep 374;
	sleep 13;
	set ARMORED to upgraded;
	cache door1;
	cache door2;
	closing = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	inlimbo=1;
	if ( upgraded )
	{
		while(closing)
		{
			sleep 100;
		}
		set ARMORED to 0;
		if(( shield_on || dome_on))
		{
			set ARMORED to 1;
		}
		if( !open )
		{
			dont-cache door1;
			dont-cache door2;
			move pillartops to y-axis [-15.120000] now;
			move barrel2 to z-axis [-3.061800] now;
			move turretback to z-axis [1.621620] now;
			move barrel1 to z-axis [-15.660540] now;
			move door2 to y-axis [0.000000] now;
			move door1 to y-axis [0.000000] now;
			turn door1 to z-axis <0.000000> now;
			turn door1 to z-axis <-88.060440> speed <300.142857>;
			turn door2 to z-axis <0.000000> now;
			turn door2 to z-axis <89.060440> speed <302.142857>;
			sleep 295;
			move pillartops to y-axis [0.000000] speed [17.000000];
			move door1 to y-axis [-9.593640] speed [12.000000];
			move door2 to y-axis [-9.593640] speed [12.000000];
			sleep 614;
			move barrel2 to z-axis [0.000000] speed [7.000000];
			move turretback to z-axis [0.000000] speed [4.000000];
			move barrel1 to z-axis [0.000000] speed [39.000000];
			sleep 316;
			sleep 10;
		}
		open = 1;
		turn pillartops to y-axis heading speed <90.043956>;
		turn turret to x-axis <0.000000> - pitch speed <45.021978>;
		wait-for-turn pillartops around y-axis;
		wait-for-turn turret around x-axis;
		while( firing )
		{
//			sleep firedelay;
//			wait-for-turn pillartops around y-axis;
//			wait-for-turn turret around x-axis;
//			firing = 0;
			sleep 100;
		}
		
		start-script RestoreAfterDelay();
		inlimbo=0;
		return (1);
	}
	if ( !upgraded )
	{
		while(building)
		{
			sleep 100;
		}
		set ARMORED to 0;
		if(( shield_on || dome_on))
		{
			set ARMORED to 1;
		}
		turn turret2 to y-axis heading speed <30.005495>;
		turn sleeves to x-axis <0.000000> - pitch speed <45.010989>;

		turn pillartops to y-axis heading now;
		turn turret to x-axis <0.000000> - pitch now;
		
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeves around x-axis;
		while( firing )
		{
//			sleep firedelay;
//			wait-for-turn turret2 around y-axis;
//			wait-for-turn sleeves around x-axis;
//			firing = 0;
			sleep 100;
		}
		inlimbo=0;
		return (1);
	}
}		



Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;	
				}
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
				if(!open)
				{
					set ARMORED to 1;	
				}
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	

Upgrade()
{
	var xz, x, z, unit_ID, distance;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	var myid;
	myid= get MY_ID;

	for (unit_ID = min; unit_ID <= max; ++unit_ID)
	{
		if(unit_ID != myid)
		{
			if(get UNIT_HEIGHT(unit_ID) == [7.75])
			{
				if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
				{
					xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
					SECURE_XZ;
					distance=get XZ_HYPOT(xz);
					if (distance <= [2])
					{
						if (get UNIT_IS_ON_THIS_COMP(get(MY_ID)))
						{
							if (get UNIT_IS_ON_THIS_COMP(unit_ID))
							{
								drop-unit unit_ID;
								attach-unit unit_ID to attach;
							}
						}
						firing = 1;
						closing = 1;
						dont-cache door1;
						dont-cache door2;
				
						turn door1 to z-axis <-88.060440> now;
						turn door2 to z-axis <89.060440> now;
						move door1 to y-axis [-9.593640] now;
						move door2 to y-axis [-9.593640] now;
							
						show frame;
						show door1;
						show door2;
						show hole;
						
						open = 0;
						set INBUILDSTANCE to 0;
						upgraded = 1;
						gun_1 = 2;
						
						move leg1 to z-axis [4] speed [5];
						move leg1 to x-axis [-4] speed [5];
						
						move leg2 to z-axis [-4] speed [5];
						move leg2 to x-axis [-4] speed [5];
						
						move leg3 to z-axis [-4] speed [5];
						move leg3 to x-axis [4] speed [5];
						
						move leg4 to z-axis [4] speed [5];
						move leg4 to x-axis [4] speed [5];
						
						turn sleeves to x-axis <0> speed <40.000000>;
						turn turret to x-axis <0> speed <20.000000>;
						wait-for-turn sleeves around x-axis;
						
						move cannon1 to z-axis [-4.264313] speed [20.000000];
						move cannon2 to z-axis [-4.264313] speed [20.000000];
						move sleeves to z-axis [-3] speed [20];
						wait-for-move cannon1 along z-axis;
						wait-for-move cannon2 along z-axis;
						
						move top to y-axis [-3.895544] speed [20];
						wait-for-move leg1 along z-axis;
						move body to y-axis [-14.000000] speed [20.000000];
						wait-for-move body along y-axis;					
						
						sleep 50;
						
						hide leg1;
						hide leg2;
						hide leg3;
						hide leg4;
						hide top;
						hide body;
						hide turret2;
						hide sleeves;
						hide cannon1;
						hide flare1;
						hide cannon2;
						hide flare2;
						
						sleep 250;
						
						show pillartops;
						show turretssides;
						show turret;
						show turretback;
						show barrel1;
						show barrel2;
						show barrel3;
										
				
						move pillartops to y-axis [-15.120000] now;
						move barrel2 to z-axis [-3.061800] now;
						move turretback to z-axis [1.621620] now;
						move barrel1 to z-axis [-15.660540] now;
						sleep 295;
						move pillartops to y-axis [0.000000] speed [17.000000];
						sleep 614;
						move barrel2 to z-axis [0.000000] speed [7.000000];
						move turretback to z-axis [0.000000] speed [4.000000];
						move barrel1 to z-axis [0.000000] speed [39.000000];
					
						wait-for-turn pillartops around y-axis;
						wait-for-turn turret around x-axis;

						sleep 100;
				
						set ARMORED to 0;
						if(( shield_on || dome_on))
						{
							set ARMORED to 1;
						}
						firedelay = 2550;
//						if (charge_on)
//						{
//							firedelay = 0;
//						}
						open = 1;
						if(!inlimbo)
						{		
							signal SIG_AIM;
							set-signal-mask SIG_AIM;
							start-script RestoreAfterDelay();
						}
						closing = 0;
						firing = 0;
						return;
					}
				}
			}
		}
	}
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	inlimbo=0;
	closing = 0;
	
	dont-cache cover;
	hide cover;
	
	hide frame;
	hide door1;
	hide door2;
	hide hole;
	hide pillartops;
	hide turretssides;
	hide turret;
	hide barrel1;
	hide barrel2;
	hide barrel3;
	hide turretback;
	hide flare;
	hide flareX;
	
	hide flare1;
	hide flare2;
	
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	
	dont-shade door1;
	dont-shade door2;
	dont-cache door1;
	dont-cache door2;
	
	dont-shade flare;
	dont-cache flare;
	
	dont-shade flareX;
	dont-cache flareX;
	
	dont-shade hole;
	dont-shade pillartops;
	
	dont-shade turret;
	dont-shade turretback;
	dont-shade turretssides;
	dont-cache turret;
	dont-cache turretback;
	dont-cache turretssides;
	
	dont-cache flare1;
	dont-cache flare2;
	dont-cache cannon1;
	dont-cache cannon2;
	dont-cache sleeves;
	dont-cache turret2;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade cannon1;
	dont-shade cannon2;
	dont-shade sleeves;
	dont-shade turret2;
		
	gun_1 = 0;
	upgraded = 0;
	firedelay = 2850;
	firing = 0;
	firing_2 = 0;
	
	open = 1;
	restore_delay = 3000;
	building = 0;
	
	set INBUILDSTANCE to 1;	

//	call-script InitState();
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	show cover;
	start-script detect();
	start-script SmokeUnit();

	sleep 1;
	move barrel2 to z-axis [0.000000] now;
	move barrel2 to z-axis [-3.061800] now;
	move turretback to z-axis [0.000000] now;
	move turretback to z-axis [1.621620] now;
	move barrel1 to z-axis [0.000000] now;
	move barrel1 to z-axis [-15.660540] now;
	move pillartops to y-axis [-15.120000] now;

	move door2 to y-axis [0.000000] now;
	move door1 to y-axis [0.000000] now;
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <-88.060440> now;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <89.060440> now;
	move door1 to y-axis [-9.593640] now;
	move door2 to y-axis [-9.593640] now;
}
	

/*
Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_AIM;
	start-script RequestState(1);
}
*/
SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 1;
}




FirePrimary()

{
//	firing = 1;
	if ( upgraded )
	{
		
		if( gun_1 == 2 )
		{
			move barrel3 to z-axis [-2.000000] speed [250.000000];	
			show flare;
			sleep 150;
			hide flare;
		}
		if( gun_1 == 3 )
		{
			move barrel3 to z-axis [-4.000000] speed [250.000000];
			show flare;
			sleep 150;
			hide flare;
		}
		if( gun_1 == 4 )
		{
			firing = 1;
			move barrel3 to z-axis [-6.000000] speed [250.000000];
			show flare;
			sleep 150;
			hide flare;
		}
			
		++gun_1;
		if( gun_1 == 5 )
		{
			move barrel3 to z-axis [0.000000] speed [3.000000];
			sleep firedelay;
			firing = 0;
			gun_1 = 2;
		}
	}

	if ( !upgraded )
	{
		if( gun_1 == 0 )
		{
			firing = 1;
			move cannon1 to z-axis [-2.500000] now;
			show flare1;
			sleep 150;
			hide flare1;
			move cannon1 to z-axis [0.000000] speed [1.000000];
			sleep firedelay;
			firing = 0;
		}
		if( gun_1 == 1 )
		{
			firing = 1;
			move cannon2 to z-axis [-2.500000] now;
			show flare2;
			sleep 150;
			hide flare2;
			move cannon2 to z-axis [0.000000] speed [1.000000];
			sleep firedelay;
			firing = 0;
		}
		++gun_1;
		if( gun_1 == 2 )
		{
			gun_1 = 0;
		}
	}
}

AimFromPrimary(piecenum)
{
	if ( upgraded )
	{
		piecenum = barrel2;
	}
	if ( !upgraded )
	{
		piecenum = sleeves;
	}
}

QueryPrimary(piecenum)
{
	if ( !upgraded )
	{
		if( gun_1 == 0 )
		{
			piecenum = flare1;
		}
		if( gun_1 == 1 )
		{
			piecenum = flare2;
		}
	}
	if ( upgraded )
	{	
		piecenum = flare;
	}			
}


SweetSpot(piecenum)
{
	piecenum = frame;
}

QueryBuildInfo(piecenum)
{
	piecenum = attach;
}



StopBuilding()
{
	sleep 1;
	building = 0;
	set INBUILDSTANCE to 1;
	set ACTIVATION to 0;
	call-script upgrade();
}

StartBuilding()
{
	building = 1;
	set YARD_OPEN to 1;
	set INBUILDSTANCE to 0;
	set ACTIVATION to 1;
}



Killed(severity, corpsetype)
{
	hide flare;
	hide flareX;
	
	hide flare1;
	hide flare2;
	
	if( upgraded == 1 )
	{
		if( severity <= 80 )
		{
			if( open )
			{
				corpsetype = 1;
			}
			if( !open )
			{
				corpsetype = 2;
			}
			explode barrel1 type BITMAPONLY | BITMAP1;
			explode barrel2 type BITMAPONLY | BITMAP1;
			explode door1 type BITMAPONLY | BITMAP1;
			explode door2 type BITMAPONLY | BITMAP1;
			explode frame type BITMAPONLY | BITMAP5;
			explode base type BITMAPONLY | BITMAP1;
			explode hole type BITMAPONLY | BITMAP1;
			explode pillartops type BITMAPONLY | BITMAP1;
			explode turret type BITMAPONLY | BITMAP1;
			explode turretback type BITMAPONLY | BITMAP5;
			explode turretssides type BITMAPONLY | BITMAP1;
			return (0);
		}
		corpsetype = 4;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type FALL | BITMAP1;
		explode barrel3 type FALL | BITMAP1;
		explode door1 type FALL | BITMAP1;
		explode door2 type FALL | BITMAP5;
		explode flare type FALL | BITMAP1;
		explode frame type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode hole type BITMAPONLY | BITMAP1;
		explode pillartops type SHATTER | BITMAP5;
		explode turret type FALL | BITMAP1;
		explode turretback type FALL | BITMAP1;
		explode turretssides type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 3;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode frame type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;
		explode hole type BITMAPONLY | BITMAP1;
		explode pillartops type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode turretback type BITMAPONLY | BITMAP5;
		explode turretssides type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 4;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode frame type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode hole type BITMAPONLY | BITMAP1;
		explode pillartops type SHATTER | BITMAP5;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turretssides type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 5;
	explode barrel1 type BITMAPONLY | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode frame type BITMAPONLY | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode hole type BITMAPONLY | BITMAP1;
	explode pillartops type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turretssides type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
