#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare3a, flare3b, base, body, turret1, turret2, turret3,
	   sleeve1a, sleeve1b, barrel1a, barrel1b, sleeve2, barrel2, flare2, sleeve3, 
	   barrel3a, barrel3b, wake1, wake2, boob, turny, legs,
	   rupleg1, rupleg2, rupleg3, lupleg1, lupleg2, lupleg3,
	   llega1, llega2, llega3, llegb1, llegb2, llegb3, llegc1, llegc2, llegc3,
	   rlega1, rlega2, rlega3, rlegb1, rlegb2, rlegb3, rlegc1, rlegc2, rlegc3,
	   cage, height, hull, advanced_detector;

static-var  gun_1, gun_3, reload, onland, moving, aiming, wait, aimback, brb, ready, turning, loaded, firedelay, firing;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_R				16
#define SIG_MOVE			32


walk()
{
	if((moving || turning) && ready)
	{
		TURN rupleg1 to y-axis <0> SPEED <30>;
		TURN rupleg1 to z-axis <0> SPEED <30>;
		TURN rupleg2 to z-axis <15> SPEED <30>;
		TURN rupleg3 to y-axis <16.5> SPEED <30>;
		TURN rupleg3 to z-axis <0> SPEED <30>;
		TURN lupleg1 to y-axis <-19.5> SPEED <30>;
		TURN lupleg1 to z-axis <0> SPEED <30>;
		TURN lupleg2 to y-axis <0> SPEED <30>;
		TURN lupleg2 to z-axis <0> SPEED <30>;
		TURN lupleg3 to y-axis <-14.5> SPEED <30>;
		TURN lupleg3 to z-axis <-22.5> SPEED <30>;
		SLEEP 225;
	}
	if((moving || turning) && ready)
	{
		TURN rupleg2 to y-axis <16.5> SPEED <30>;
		TURN rupleg2 to z-axis <15> SPEED <30>;
		TURN lupleg1 to y-axis <0> SPEED <30>;
		TURN lupleg2 to z-axis <-15> SPEED <30>;
		TURN lupleg3 to z-axis <1> SPEED <30>;
		TURN rupleg1 to z-axis <15> SPEED <30>;
		TURN rupleg3 to y-axis <0> SPEED <30>;
		TURN rupleg3 to z-axis <0> SPEED <30>;
		SLEEP 225;
	}
	if((moving || turning) && ready)
	{
		TURN lupleg2 to y-axis <-15> SPEED <30>;
		TURN lupleg2 to z-axis <-15> SPEED <30>;
		TURN lupleg3 to y-axis <1.5> SPEED <30>;
		TURN rupleg2 to y-axis <16.5> SPEED <30>;
		TURN rupleg2 to z-axis <0> SPEED <30>;
		TURN rupleg3 to z-axis <15> SPEED <30>;
		TURN rupleg1 to y-axis <27> SPEED <30>;
		TURN rupleg1 to z-axis <15> SPEED <30>;
		TURN lupleg1 to y-axis <0> SPEED <30>;
		TURN lupleg1 to z-axis <-15> SPEED <30>;
		SLEEP 225;
	}
	if((moving || turning) && ready)
	{
		TURN lupleg2 to y-axis <-18> SPEED <30>;
		TURN lupleg2 to z-axis <0> SPEED <30>;
		TURN lupleg3 to y-axis <0> SPEED <30>;
		TURN lupleg3 to z-axis <-22.5> SPEED <30>;
		TURN rupleg2 to y-axis <0> SPEED <30>;
		TURN rupleg2 to z-axis <0> SPEED <30>;
		TURN rupleg3 to y-axis <16.5> SPEED <30>;
		TURN rupleg1 to y-axis <21> SPEED <30>;
		TURN rupleg1 to z-axis <0> SPEED <30>;
		TURN rupleg3 to z-axis <15> SPEED <30>;
		TURN lupleg1 to y-axis <-19.5> SPEED <30>;
		TURN lupleg1 to z-axis <-15> SPEED <30>;
		SLEEP 225;
	}
}




transform()
{
	hide hull;
	show body;
	show cage;
	show lupleg1;
	show lupleg2;
	show lupleg3;
	show rupleg1;
	show rupleg2;
	show rupleg3;

	show llega1;
	show llega2;
	show llega3;
	
	show llegb1;
	show llegb2;
	show llegb3;
	
	show llegc1;
	show llegc2;
	show llegc3;
	
	show rlega1;
	show rlega2;
	show rlega3;
	
	show rlegb1;
	show rlegb2;
	show rlegb3;
	
	show rlegc1;
	show rlegc2;
	show rlegc3;

	cache body;
	cache turret1;
	cache turny;
	cache sleeve1a;
	cache barrel1a;
	cache flare1a;
	cache sleeve1b;
	cache barrel1b;
	cache flare1b;
	cache turret2;
	cache sleeve2;
	cache barrel2;
	cache flare2;
	cache turret3;
	cache sleeve3;
	cache barrel3a;
	cache flare3a;
	cache barrel3b;
	cache flare3b;
	cache boob;
	cache legs;
	
	cache lupleg1;
	cache lupleg2;
	cache lupleg3;
	cache rupleg1;
	cache rupleg2;
	cache rupleg3;
	
	cache llega1;
	cache llega2;
	cache llega3;
	
	cache llegb1;
	cache llegb2;
	cache llegb3;
	
	cache llegc1;
	cache llegc2;
	cache llegc3;
	
	cache rlega1;
	cache rlega2;
	cache rlega3;
	
	cache rlegb1;
	cache rlegb2;
	cache rlegb3;
	
	cache rlegc1;
	cache rlegc2;
	cache rlegc3;


	cache cage;
	cache hull;


	move  body to y-axis [6] speed [3.000000];

	move lupleg1 to x-axis [0] speed [4];
	move lupleg2 to x-axis [0] speed [4];
	move lupleg3 to x-axis [0] speed [4];
	move rupleg1 to x-axis [0] speed [4];
	move rupleg2 to x-axis [0] speed [4];
	move rupleg3 to x-axis [0] speed [4];
	
	move lupleg1 to y-axis [0] speed [1];
	move lupleg2 to y-axis [0] speed [1];
	move lupleg3 to y-axis [0] speed [1];
	move rupleg1 to y-axis [0] speed [1];
	move rupleg2 to y-axis [0] speed [1];
	move rupleg3 to y-axis [0] speed [1];

	turn rlegc1 to z-axis <0.000000> speed <30>;
	turn rlegc2 to z-axis <0.000000> speed <30>;
	turn rlegc3 to z-axis <0.000000> speed <30>;
	turn llegc1 to z-axis <0.000000> speed <30>;
	turn llegc2 to z-axis <0.000000> speed <30>;
	turn llegc3 to z-axis <0.000000> speed <30>;
	
	sleep 100;
	
	turn rlega1 to y-axis <10.000000> speed <10.000000>;
	turn rlega2 to y-axis <-10.000000> speed <10.000000>;
	turn llega1 to y-axis <-10.000000> speed <10.000000>;
	turn llega2 to y-axis <10.000000> speed <10.000000>;
	turn rlega3 to y-axis <-30.000000> speed <10.000000>;
	turn llega3 to y-axis <30.000000> speed <10.000000>;

	sleep 74;
	
	wait-for-move lupleg1 along y-axis;
	wait-for-move lupleg1 along x-axis;
	
	ready = 1;

}
		

reform()
{
	dont-cache body;
	dont-cache turret1;
	dont-cache turny;
	dont-cache sleeve1a;
	dont-cache barrel1a;
	dont-cache flare1a;
	dont-cache sleeve1b;
	dont-cache barrel1b;
	dont-cache flare1b;
	dont-cache turret2;
	dont-cache sleeve2;
	dont-cache barrel2;
	dont-cache flare2;
	dont-cache turret3;
	dont-cache sleeve3;
	dont-cache barrel3a;
	dont-cache flare3a;
	dont-cache barrel3b;
	dont-cache flare3b;
	dont-cache boob;
	dont-cache legs;
	
	dont-cache lupleg1;
	dont-cache lupleg2;
	dont-cache lupleg3;
	dont-cache rupleg1;
	dont-cache rupleg2;
	dont-cache rupleg3;
	
	dont-cache llega1;
	dont-cache llega2;
	dont-cache llega3;
	
	dont-cache llegb1;
	dont-cache llegb2;
	dont-cache llegb3;
	
	dont-cache llegc1;
	dont-cache llegc2;
	dont-cache llegc3;
	
	dont-cache rlega1;
	dont-cache rlega2;
	dont-cache rlega3;
	
	dont-cache rlegb1;
	dont-cache rlegb2;
	dont-cache rlegb3;
	
	dont-cache rlegc1;
	dont-cache rlegc2;
	dont-cache rlegc3;

	dont-cache cage;
	dont-cache hull;
	
	ready=0;

	wait-for-turn lupleg1 around y-axis;
	wait-for-turn lupleg2 around y-axis;
	wait-for-turn lupleg3 around y-axis;
	wait-for-turn rupleg1 around y-axis;
	wait-for-turn rupleg2 around y-axis;
	wait-for-turn rupleg3 around y-axis;
	
	wait-for-turn lupleg1 around z-axis;
	wait-for-turn lupleg2 around z-axis;
	wait-for-turn lupleg3 around z-axis;
	wait-for-turn rupleg1 around z-axis;
	wait-for-turn rupleg2 around z-axis;
	wait-for-turn rupleg3 around z-axis;
	
	turn rlega1 to y-axis <0> speed <10.000000>;
	turn rlega2 to y-axis <0> speed <10.000000>;
	turn llega1 to y-axis <0> speed <10.000000>;
	turn llega2 to y-axis <0> speed <10.000000>;
	turn rlega3 to y-axis <0> speed <10.000000>;
	turn llega3 to y-axis <0> speed <10.000000>;

	turn lupleg1 to y-axis <0> speed <20>;
	turn lupleg2 to y-axis <0> speed <20.000000>;
	turn lupleg3 to y-axis <0> speed <20.000000>;
	turn rupleg1 to y-axis <0> speed <20.000000>;
	turn rupleg2 to y-axis <0> speed <20.000000>;
	turn rupleg3 to y-axis <0> speed <20.000000>;
	
	turn lupleg1 to z-axis <0> speed <20>;
	turn lupleg2 to z-axis <0> speed <20.000000>;
	turn lupleg3 to z-axis <0> speed <20.000000>;
	turn rupleg1 to z-axis <0> speed <20.000000>;
	turn rupleg2 to z-axis <0> speed <20.000000>;
	turn rupleg3 to z-axis <0> speed <20.000000>;

	move lupleg1 to x-axis [8.654994] speed [2];
	move lupleg2 to x-axis [8.654994] speed [2];
	move lupleg3 to x-axis [8.654994] speed [2];
	move rupleg1 to x-axis [-8.654994] speed [2];
	move rupleg2 to x-axis [-8.654994] speed [2];
	move rupleg3 to x-axis [-8.654994] speed [2];
	
	move lupleg1 to y-axis [-2.255111] speed [.5];
	move lupleg2 to y-axis [-2.255111] speed [.5];
	move lupleg3 to y-axis [-2.255111] speed [.5];
	move rupleg1 to y-axis [-2.255111] speed [.5];
	move rupleg2 to y-axis [-2.255111] speed [.5];
	move rupleg3 to y-axis [-2.255111] speed [.5];

	turn rlegc1 to z-axis <-90.000000> speed <30>;
	turn rlegc2 to z-axis <-90.000000> speed <30>;
	turn rlegc3 to z-axis <-90.000000> speed <30>;
	turn llegc1 to z-axis <90.000000> speed <30>;
	turn llegc2 to z-axis <90.000000> speed <30>;
	turn llegc3 to z-axis <90.000000> speed <30>;
	
	move  body to y-axis [0] speed [3.000000];
	
	wait-for-move lupleg1 along y-axis;
	wait-for-move lupleg1 along x-axis;

	show hull;
	hide body;
	hide cage;
	hide lupleg1;
	hide lupleg2;
	hide lupleg3;
	hide rupleg1;
	hide rupleg2;
	hide rupleg3;
	
	hide llega1;
	hide llega2;
	hide llega3;
	
	hide llegb1;
	hide llegb2;
	hide llegb3;
	
	hide llegc1;
	hide llegc2;
	hide llegc3;
	
	hide rlega1;
	hide rlega2;
	hide rlega3;
	
	hide rlegb1;
	hide rlegb2;
	hide rlegb3;
	
	hide rlegc1;
	hide rlegc2;
	hide rlegc3;

	sleep 74;
}	

/*
swim()
{

	if(loaded != 0)
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}
*/

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl()
{
	var transformed;
	var preang;
	var ang;
	transformed = 0;
	while( TRUE )
	{
		ang = get XZ_ATAN(-419);
		turning = 0;
		if (ang != preang)
		{
			turning = 1;
		}
		sleep 100;
		preang = ang;
		
		onland = (get GROUND_HEIGHT(get PIECE_XZ(base)) - get PIECE_Y(base)) > 0;
		
	//	onland = 1;
		if(onland && !transformed)
		{
			call-script transform();
			transformed = 1;
		}
		if(!onland && transformed)
		{
			call-script reform();
			transformed = 0;
		}
		if( moving || turning)
		{
			if(!onland && !transformed)
			{
//				call-script swim();
				if(loaded != 0)
				{
					emit-sfx 2 from wake1;
					emit-sfx 2 from wake2;
					sleep 300;
				}
			}
			if(onland && transformed)
			{
				call-script walk();
			}
		}
		if( !moving )
		{
			sleep 100;
		}
	}
}

/*
turningControl()
{
	var preang;
	var ang;
	
	while( TRUE )
	{
		ang = get XZ_ATAN(-419);
		turning = 0;
		if (ang != preang)
		{
			turning = 1;
		}
		sleep 100;
		preang = ang;
	}
}
*/

setSFXoccupy(Func_Var_1)
{
	loaded = Func_Var_1;
}

Create()
{
	set ARMORED to 1;
	turning = 0;
	firedelay = 7850;
	firing = 0;
	
//	start-script turningControl();
	ready = 0;
	move lupleg1 to x-axis [8.654994] now;
	move lupleg2 to x-axis [8.654994] now;
	move lupleg3 to x-axis [8.654994] now;
	move rupleg1 to x-axis [-8.654994] now;
	move rupleg2 to x-axis [-8.654994] now;
	move rupleg3 to x-axis [-8.654994] now;
	
	move lupleg1 to y-axis [-2.255111] now;
	move lupleg2 to y-axis [-2.255111] now;
	move lupleg3 to y-axis [-2.255111] now;
	move rupleg1 to y-axis [-2.255111] now;
	move rupleg2 to y-axis [-2.255111] now;
	move rupleg3 to y-axis [-2.255111] now;

	turn rlegc1 to z-axis <-90.000000> now;
	turn rlegc2 to z-axis <-90.000000> now;
	turn rlegc3 to z-axis <-90.000000> now;
	turn llegc1 to z-axis <90.000000> now;
	turn llegc2 to z-axis <90.000000> now;
	turn llegc3 to z-axis <90.000000> now;

	show hull;
	hide body;
	hide cage;
	
	hide lupleg1;
	hide lupleg2;
	hide lupleg3;
	hide rupleg1;
	hide rupleg2;
	hide rupleg3;
	
	hide llega1;
	hide llega2;
	hide llega3;
	
	hide llegb1;
	hide llegb2;
	hide llegb3;
	
	hide llegc1;
	hide llegc2;
	hide llegc3;
	
	hide rlega1;
	hide rlega2;
	hide rlega3;
	
	hide rlegb1;
	hide rlegb2;
	hide rlegb3;
	
	hide rlegc1;
	hide rlegc2;
	hide rlegc3;

	dont-cache body;
	dont-cache turret1;
	dont-cache turny;
	dont-cache sleeve1a;
	dont-cache barrel1a;
	dont-cache flare1a;
	dont-cache sleeve1b;
	dont-cache barrel1b;
	dont-cache flare1b;
	dont-cache turret2;
	dont-cache sleeve2;
	dont-cache barrel2;
	dont-cache flare2;
	dont-cache turret3;
	dont-cache sleeve3;
	dont-cache barrel3a;
	dont-cache flare3a;
	dont-cache barrel3b;
	dont-cache flare3b;
	dont-cache boob;
	dont-cache legs;
	
	dont-cache lupleg1;
	dont-cache lupleg2;
	dont-cache lupleg3;
	dont-cache rupleg1;
	dont-cache rupleg2;
	dont-cache rupleg3;
	
	dont-cache llega1;
	dont-cache llega2;
	dont-cache llega3;
	
	dont-cache llegb1;
	dont-cache llegb2;
	dont-cache llegb3;
	
	dont-cache llegc1;
	dont-cache llegc2;
	dont-cache llegc3;
	
	dont-cache rlega1;
	dont-cache rlega2;
	dont-cache rlega3;
	
	dont-cache rlegb1;
	dont-cache rlegb2;
	dont-cache rlegb3;
	
	dont-cache rlegc1;
	dont-cache rlegc2;
	dont-cache rlegc3;

	dont-cache cage;
	dont-cache hull;
	
	onland = 1;
	moving = 0;
//	reload = 0;
//	aiming = 0;
//	brb = 0;
//	aimback = 0;
//	wait=0;
		
	hide flare1a;
	hide flare1b;
	hide flare2;
	hide flare3a;
	hide flare3b;
	
	gun_1 = 0;
	gun_3 = 3;
	
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 1000;
	}
	start-script MotionControl();
	start-script SmokeUnit();
	
}

RestoreAll()
{
//	signal SIG_R;
//	set-signal-mask SIG_R;
	sleep 10000;
	turn turret1 to y-axis <0.000000> speed <25>;
	turn turny to x-axis <0.000000> speed <25>;
	turn sleeve1a to x-axis <0> speed <25>;
	turn turret2 to y-axis <0> speed <25>;
	turn sleeve2 to x-axis <0> speed <17.5>;
	turn turret3 to y-axis <0.000000> speed <72>;
	turn sleeve3 to x-axis <0.000000> speed <72>;
	gun_1 = 0;
	gun_3 = 3;
//	aiming = 0;
}


/*
RestoreSecondary()
{
	sleep 10000;
	turn turret2 to y-axis <0.000000> speed <25>;
	turn sleeve2 to x-axis <0.000000> speed <25>;
	aiming = 0;
}


RestoreTertiary()
{
	sleep 5000;
	turn turret3 to y-axis <0.000000> speed <50>;
	turn sleeve3 to x-axis <0.000000> speed <50>;
	aiming = 0;
}
*/

StartMoving()
{
	moving=1;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	moving=0;
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
//	if ( gun_1 == 0 )
//	{
		turn turret2 to y-axis heading speed <30>;
		turn sleeve2 to x-axis <0.000000> - pitch speed <30>;
//	}
//	if ( gun_1 >= 1 )
//	{
		turn turret1 to y-axis heading speed <30>;
		turn turny to x-axis <0.000000> - pitch speed <30>;
		
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeve2 around x-axis;
		wait-for-turn turret1 around y-axis;
		wait-for-turn turny around x-axis;
//	}
	while( firing )
	{
		sleep 100;
	}
	start-script RestoreAll();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		firing = 1;
		move barrel2 to z-axis [-4] now;
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [1.000000];
		move sleeve2 to z-axis [-2] now;
		move sleeve2 to z-axis [0.000000] speed [1.000000];
		show flare2;
		sleep 150;
		hide flare2;
		sleep firedelay;
		firing = 0;
	}	
	if( gun_1 == 1 )
	{
		firing = 1;
		move barrel1a to z-axis [-4] now;
		move barrel1a to z-axis [0.000000] speed [2.000000];
		show flare1a;
		sleep 150;
		hide flare1a;
		turn sleeve1a to x-axis <45> speed <75>;
		sleep firedelay;
		firing = 0;
	}
	if( gun_1 == 2 )
	{
		firing = 1;
		move barrel1b to z-axis [-2.8] now;
		move barrel1b to y-axis [-2.8] now;
		move barrel1b to z-axis [0.000000] speed [1.4];
		move barrel1b to y-axis [0.000000] speed [1.4];
		show flare1b;
		sleep 150;
		hide flare1b;
		turn sleeve1a to x-axis <0> speed <75>;
		sleep firedelay;
		firing = 0;
	}
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = 0;
	}
}

AimFromPrimary(piecenum)
{

	piecenum = turny;

}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare1b;
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
//	aiming = 1;
	turn turret3 to y-axis heading speed <144>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <144>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreAll();
	return (1);
}

FireTertiary()
{
	if( gun_3 == 3 )
	{
		move barrel3a to z-axis [-2] now;
		move barrel3a to z-axis [0.000000] speed [2.000000];
		show flare3a;
		sleep 150;
		hide flare3a;
	}
	if( gun_3 == 4 )
	{
		move barrel3b to z-axis [-2] now;
		move barrel3b to z-axis [0.000000] speed [2.000000];
		show flare3b;
		sleep 150;
		hide flare3b;
	}
	++gun_3;
	if( gun_3 == 5 )
	{
		gun_3 = 3;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turret3;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 3 )
	{
		piecenum = flare3a;
	}
	if( gun_3 == 4 )
	{
		piecenum = flare3b;
	}
}
/*
AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	aiming = 1;
	while(reload == 1)
	{
		sleep 10;
	}
	turn turret2 to y-axis heading speed <30>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <30>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreSecondary();
	return (1);
}

FireSecondary()
{
	reload = 1;
	move barrel2 to z-axis [-4] now;
	wait-for-move barrel2 along z-axis;
	move barrel2 to z-axis [0.000000] speed [1.000000];
	move sleeve2 to z-axis [-2] now;
	move sleeve2 to z-axis [0.000000] speed [1.000000];
	show flare2;
	sleep 150;
	hide flare2;
	sleep 1750;
	reload =0;
}

AimFromSecondary(piecenum)
{
	piecenum = sleeve2;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}
*/

SweetSpot(piecenum)
{
	piecenum = body;
}


Killed(severity, corpsetype)
{
	hide flare1a;
	hide flare1b;
	hide flare2;
	hide flare3a;
	hide flare3b;
	
	if( onland == 0 )
	{
		if( severity <= 99 )
		{
			corpsetype = 2;
			explode barrel1a type FALL | EXPLODE_ON_HIT | BITMAP1;
			explode barrel1b type FALL | EXPLODE_ON_HIT | BITMAP1;
			explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP1;
			explode barrel3a type FALL | EXPLODE_ON_HIT | BITMAP1;
			explode barrel3b type FALL | EXPLODE_ON_HIT | BITMAP1;
			explode base type BITMAPONLY | BITMAP1;
			explode turret1 type BITMAPONLY | BITMAP1;
			explode turret2 type BITMAPONLY | BITMAP5;
			explode turret3 type BITMAPONLY | BITMAP5;
			explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
			explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP1;
			return (0);
		}
		corpsetype = 3;
		explode barrel1a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3b type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP5;
		explode turret3 type BITMAPONLY | BITMAP5;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3b type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP5;
		explode turret3 type BITMAPONLY | BITMAP5;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode barrel1a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3b type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP5;
		explode turret3 type BITMAPONLY | BITMAP5;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel1b type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3a type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel3b type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP5;
		explode turret3 type BITMAPONLY | BITMAP5;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 4;
	explode barrel1a type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1b type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode barrel3a type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode barrel3b type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode turret1 type BITMAPONLY | BITMAP1;
	explode turret2 type BITMAPONLY | BITMAP5;
	explode turret3 type BITMAPONLY | BITMAP5;
	explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP1;
	explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP1;
}
	
	
	
	
