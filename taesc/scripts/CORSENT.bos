#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, turret, gun1, gun2, turret2;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	
//	dont-cache flare1;
//	dont-cache flare2;
	
//	dont-shade gun1;
//	dont-shade gun2;
//	dont-shade flare1;
//	dont-shade flare2;
//	dont-shade turret;
//	dont-shade turret2;
//	dont-shade base;
	gun_1 = flare1;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <225.142857>;
	turn turret2 to x-axis <0.000000> speed <225.142857>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret2 around x-axis;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <450.131868>;
	turn turret2 to x-axis <0.000000> - pitch speed <450.131868>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

f1()
{
	show flare1;
	sleep 200;
	hide flare1;
}

f2()
{
	show flare2;
	sleep 200;
	hide flare2;
}

FireTertiary()
{
	if( gun_1 == 0 )
	{
//		start-script f1();
		move gun1 to z-axis [-4.500000] now;
		sleep 25;
		move gun1 to z-axis [0.000000] speed [15.000000];
	}
	if( gun_1 == 1 )
	{
//		start-script f2();
		move gun2 to z-axis [-4.500000] now;
		sleep 25;
		move gun2 to z-axis [0.000000] speed [15.000000];
	}
	gun_1 = !gun_1;
}

QueryTertiary(piecenum)
{
	piecenum = gun_1;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode gun1 type BITMAPONLY | BITMAP1;
		explode gun2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
//		explode flare1 type BITMAPONLY | BITMAP1;
//		explode flare1 type BITMAPONLY | BITMAP5;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode gun1 type FALL | BITMAP1;
		explode gun2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
//		explode flare1 type FALL | BITMAP1;
//		explode flare1 type FALL | BITMAP5;
		explode turret2 type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
//		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode turret2 type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
//	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
//	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode turret2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type FALL | SMOKE | BITMAP1;
}
