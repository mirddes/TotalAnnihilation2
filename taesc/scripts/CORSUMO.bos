#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hips, body, knobs, turret, faceguard, lgun, lbarrel, lflare, rgun, rbarrel, rflare, rightchunk, leftchunk, feetparent, flfoot, frfoot, rlfoot, rrfoot;  	 

static-var  bMoving, bAiming, restore_delay, gun_1, gun_2, Static_Var_3, firing, firedelay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_MOVE			32

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	set ARMORED to 1;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	gun_1 = 0;
	firing = 0;
	firedelay = 2850;
	
	hide rflare;
	hide lflare;
	restore_delay = 6000;
	start-script SmokeUnit();
}


SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	while(bmoving)
	{
		if( 1 )
		{
			move feetparent to z-axis [-0.900000] now;
			move flfoot to x-axis [-0.900000] now;
			move flfoot to y-axis [0.359998] now;
			move flfoot to z-axis [0.300000] now;
			move flfoot to z-axis [-0.359998] speed [3.000000];
			move frfoot to x-axis [0.900000] now;
			move frfoot to y-axis [0.359998] now;
			move frfoot to z-axis [2.269995] now;
			move frfoot to z-axis [3.529999] speed [10.000000];
			move rlfoot to x-axis [-0.900000] now;
			move rlfoot to y-axis [0.359998] now;
			move rlfoot to z-axis [-0.679999] now;
			move rlfoot to z-axis [-1.319995] speed [4.000000];
			move rrfoot to x-axis [0.900000] now;
			move rrfoot to y-axis [0.359998] now;
			move rrfoot to z-axis [-1.379999] now;
			move rrfoot to z-axis [-1.729999] speed [3.000000];
			move body to y-axis [1.289996] now;
			move body to z-axis [-0.259998] now;
			move rightchunk to x-axis [0.559998] now;
			move rightchunk to y-axis [1.289996] now;
			move rightchunk to z-axis [-0.300000] now;
			move leftchunk to x-axis [-0.559998] now;
			move leftchunk to y-axis [1.289996] now;
			move leftchunk to z-axis [-0.300000] now;
		/*	move turret to x-axis [-0.100000] now;
			move turret to y-axis [0.379999] now;
			move turret to z-axis [-0.600000] now;
			move faceguard to x-axis [0.100000] now;
			move faceguard to y-axis [0.109998] now;
			move faceguard to z-axis [-0.300000] now;
			move lgun to x-axis [-0.700000] now;
			move lgun to y-axis [0.109998] now;
			move lgun to z-axis [0.509998] now;
			move rgun to x-axis [0.100000] now;
			move rgun to y-axis [0.109998] now;
			move rgun to z-axis [0.509998] now;
			move rbarrel to z-axis [0.300000] now;
			move lbarrel to z-axis [0.300000] now;*/
			turn frfoot to x-axis <-17.840659> now;
			turn frfoot to x-axis <-14.000000> speed <27.005495>;
			turn rightchunk to x-axis <-7.967033> now;
			turn rightchunk to x-axis <-11.000000> speed <31.005495>;
			sleep 109;
		}
		if( 1 )
		{
			move flfoot to z-axis [1.479999] speed [16.000000];
			move frfoot to z-axis [3.479999] speed [0.000000];
			move rlfoot to z-axis [-1.629999] speed [1.000000];
			move rrfoot to z-axis [-1.629999] speed [0.000000];
			turn flfoot to x-axis <-12.000000> speed <117.027473>;
			turn frfoot to x-axis <0.000000> speed <141.032967>;
			turn rrfoot to x-axis <9.000000> speed <89.016484>;
			turn rightchunk to x-axis <0.000000> speed <100.021978>;
			turn leftchunk to x-axis <-5.000000> speed <51.010989>;
			sleep 110;
		}
		if( 1 )
		{
			move flfoot to z-axis [2.829999] speed [12.000000];
			move frfoot to z-axis [2.519995] speed [7.000000];
			move rlfoot to z-axis [-2.059998] speed [3.000000];
			move rrfoot to z-axis [-1.579999] speed [0.000000];
			turn flfoot to x-axis <-30.016484> speed <157.032967>;
			turn rrfoot to x-axis <15.000000> speed <51.010989>;
			turn rightchunk to x-axis <7.000000> speed <75.016484>;
			turn leftchunk to x-axis <-11.000000> speed <51.010989>;
			sleep 111;
		}
		if( 1 )
		{
			move frfoot to z-axis [2.329999] speed [1.000000];
			move rlfoot to z-axis [-2.469995] speed [3.000000];
			move rrfoot to z-axis [-0.569995] speed [9.000000];
			turn flfoot to x-axis <-18.000000> speed <103.021978>;
			turn rrfoot to x-axis <19.000000> speed <37.005495>;
			turn rightchunk to x-axis <1.000000> speed <55.010989>;
			turn leftchunk to x-axis <-6.000000> speed <41.005495>;
			sleep 110;
		}
		if( 1 )
		{
			move frfoot to z-axis [1.719995] speed [4.000000];
			move rlfoot to z-axis [-3.229999] speed [6.000000];
			move rrfoot to z-axis [0.609998] speed [10.000000];
			turn flfoot to x-axis <0.000000> speed <164.038462>;
			turn rrfoot to x-axis <7.000000> speed <109.021978>;
			turn leftchunk to x-axis <0.000000> speed <61.010989>;
			sleep 111;
		}
		if( 1 )
		{
			move flfoot to z-axis [1.969995] speed [7.000000];
			move frfoot to z-axis [0.679999] speed [9.000000];
			move rrfoot to z-axis [0.259998] speed [3.000000];
			turn flfoot to x-axis <0.000000> speed <6.000000>;
			turn rlfoot to x-axis <22.000000> speed <204.049451>;
			turn rrfoot to x-axis <0.000000> speed <62.010989>;
			turn leftchunk to x-axis <9.000000> speed <83.016484>;
			sleep 109;
		}
		if( 1 )
		{
			move flfoot to z-axis [1.519995] speed [3.000000];
			move frfoot to z-axis [0.700000] speed [4.000000];
			move rlfoot to z-axis [-1.779999] speed [12.000000];
			move rrfoot to z-axis [-0.179999] speed [3.000000];
			turn rlfoot to x-axis <28.016484> speed <58.010989>;
			turn leftchunk to x-axis <10.000000> speed <10.000000>;
			sleep 111;
		}
		if( 1 )
		{
			move flfoot to z-axis [0.969995] speed [4.000000];
			move frfoot to z-axis [-0.259998] speed [3.000000];
			move rlfoot to z-axis [-0.529999] speed [10.000000];
			move rrfoot to z-axis [-0.729999] speed [4.000000];
			turn rlfoot to x-axis <10.000000> speed <169.038462>;
			turn leftchunk to x-axis <2.000000> speed <69.016484>;
			sleep 110;
		}
		if( 1 )
		{
			move flfoot to z-axis [0.819995] speed [0.000000];
			move frfoot to z-axis [0.300000] speed [1.000000];
			move rlfoot to z-axis [0.359998] speed [7.000000];
			move rrfoot to z-axis [-0.919995] speed [1.000000];
			turn frfoot to x-axis <-10.000000> speed <99.021978>;
			turn rlfoot to x-axis <0.000000> speed <96.021978>;
			turn rightchunk to x-axis <-1.000000> speed <27.005495>;
			turn leftchunk to x-axis <-2.000000> speed <48.010989>;
			sleep 111;
		}
		if( 1 )
		{
			move flfoot to z-axis [0.369995] speed [3.000000];
			move frfoot to z-axis [1.219995] speed [10.000000];
			move rlfoot to z-axis [-0.429999] speed [6.000000];
			move rrfoot to z-axis [-1.369995] speed [3.000000];
			turn frfoot to x-axis <-12.000000> speed <20.000000>;
			turn rightchunk to x-axis <-4.000000> speed <27.005495>;
			sleep 110;
		}
	}
	turn rightchunk to x-axis <0.000000> speed <150.032967>;
	turn RRFoot to x-axis <0.000000> speed <150.032967>;
	turn FRFoot to x-axis <0.000000> speed <150.032967>;
	turn leftchunk to x-axis <0.000000> speed <150.032967>;
	turn RLFoot to x-axis <0.000000> speed <150.032967>;
	turn FLFoot to x-axis <0.000000> speed <150.032967>;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

RestoreAfterDelay()
{
	sleep 12000;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn rgun to x-axis <0.000000> speed <90.000000>;
	turn lgun to x-axis <0.000000> speed <90.000000>;
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <180.000000>;
	turn rgun to x-axis <0.000000> - pitch speed <180.000000>;
	turn lgun to x-axis <0.000000> - pitch speed <180.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn rgun around x-axis;
	wait-for-turn lgun around x-axis;
	while( firing )
	{
		sleep 50;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		firing = 1;
		show rflare;
		sleep 150;
		hide rflare;
		gun_1 = 1;
		sleep firedelay;
		firing = 0;
		return (0);
	}
	if( gun_1 == 1 )
	{
		firing = 1;
		show lflare;
		sleep 150;
		hide lflare;
		gun_1 = 0;
		sleep firedelay;
		firing = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare;
	}
}





Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	hide lflare;
	hide rflare;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode body type BITMAPONLY | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP5;
		explode knobs type BITMAPONLY | BITMAP1;
		explode Lbarrel type BITMAPONLY | BITMAP5;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode lflare type BITMAPONLY | BITMAP1;
		explode Lgun type BITMAPONLY | BITMAP5;
		explode Rbarrel type BITMAPONLY | BITMAP1;
		explode rflare type BITMAPONLY | BITMAP5;
		explode Rgun type BITMAPONLY | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP5;
		explode RRFoot type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP5;
		explode knobs type FALL | BITMAP1;
		explode Lbarrel type FALL | BITMAP5;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode lflare type FALL | BITMAP1;
		explode Lgun type FALL | BITMAP5;
		explode Rbarrel type FALL | BITMAP1;
		explode rflare type FALL | BITMAP5;
		explode Rgun type FALL | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP5;
		explode RRFoot type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP5;
		explode knobs type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP5;
		explode RRFoot type BITMAPONLY | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode FLFoot type BITMAPONLY | BITMAP1;
	explode FRFoot type BITMAPONLY | BITMAP5;
	explode knobs type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leftchunk type BITMAPONLY | BITMAP5;
	explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rightchunk type BITMAPONLY | BITMAP1;
	explode RLFoot type BITMAPONLY | BITMAP5;
	explode RRFoot type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}

