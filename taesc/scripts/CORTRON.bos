#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  base, emit, vents, fliptop, riser;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}


// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif

Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}
	
activatescr()
{
	if( TRUE )
	{
		move vents to y-axis [0.000000] now;
		move vents to y-axis [1.600000] speed [3.669989];
		sleep 436;
	}
	if( TRUE )
	{
		move vents to y-axis [4.500000] speed [6.609998];
		turn fliptop to z-axis <41.225275> speed <93.912088>;
		sleep 439;
	}
	if( TRUE )
	{
		move vents to y-axis [4.400000] speed [0.229999];
		move riser to y-axis [3.200000] speed [7.289990];
		turn fliptop to z-axis <72.027473> speed <70.159341>;
		sleep 439;
	}
	if( TRUE )
	{
		move vents to y-axis [4.700000] speed [0.679999];
		move riser to y-axis [7.500000] speed [9.789990];
		turn fliptop to z-axis <160.170330> speed <200.780220>;
		sleep 439;
	}
	if( TRUE )
	{
		move riser to y-axis [12.600000] speed [11.639990];
		sleep 438;
	}
	if( TRUE )
	{
		move riser to y-axis [14.350000] speed [3.989990];
		sleep 439;
	}
	sleep 43;
}

deactivatescr()
{
	if( TRUE )
	{
		move vents to y-axis [4.050000] now;
		move vents to y-axis [5.000000] speed [1.719989];
		move riser to y-axis [14.350000] now;
		move riser to y-axis [12.600000] speed [3.169989];
		turn fliptop to z-axis <160.170330> now;
		sleep 552;
	}
	if( TRUE )
	{
		move vents to y-axis [3.600000] speed [2.529999];
		move riser to y-axis [7.500000] speed [9.219989];
		sleep 553;
	}
	if( TRUE )
	{
		move vents to y-axis [2.250000] speed [2.439990];
		move riser to y-axis [3.200000] speed [7.779999];
		turn fliptop to z-axis <72.027473> speed <159.390110>;
		sleep 553;
	}
	if( TRUE )
	{
		move vents to y-axis [1.350000] speed [1.609998];
		move riser to y-axis [0.000000] speed [5.729999];
		turn fliptop to z-axis <41.225275> speed <55.203297>;
		sleep 558;
	}
	if( TRUE )
	{
		move vents to y-axis [0.250000] speed [1.979999];
		turn fliptop to z-axis <0.000000> speed <74.280220>;
		sleep 555;
	}
	if( TRUE )
	{
		move vents to y-axis [0.000000] speed [0.450000];
		sleep 556;
	}
	sleep 38;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

go()
{
	call-script activatescr();
	gun_1 = emit;
}

stop()
{
	gun_1 = base;
	sleep 4000;
	call-script deactivatescr();
	show riser;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	dont-shade base;
	dont-shade riser;
	dont-shade fliptop;
	dont-shade vents;
	dont-cache fliptop;
	dont-cache riser;
	dont-cache vents;
	restore_delay = 3000;
	gun_1 = base;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	call-script InitState();
	start-script detect();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide riser;
	explode emit type BITMAPONLY | BITMAP5;
	gun_1 = base;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = emit;
}

/*
AimTertiary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	hide riser;
	explode emit type BITMAPONLY | BITMAP5;
	gun_1 = base;
	start-script RequestState(1);
}

QueryTertiary(piecenum)
{
	piecenum = emit;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode fliptop type FALL | BITMAP1;
		explode vents type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode fliptop type FALL | BITMAP1;
		explode vents type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode fliptop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode vents type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode fliptop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode vents type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
