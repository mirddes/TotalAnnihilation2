#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

//#define METAL_UPGRADE_HEIGHT 1206477

piece  newcorfus, emit1, shining, sphere;
static-var nbr_charge;

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif



//#define taluwfus 1964769
//#define armuwfus 2775473
//#define coruwfus 1983667

#define armuwfusSize ([16] + [1.25])
#define coruwfusSize ([16] + [1.25])
#define taluwfusSize ([19.2] + [2.5])

#define mySize coruwfusSize

Detect()
{
	sleep rand(500,5000);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	max = (get MAX_ID);
	min = (get MIN_ID);
	while (1)
	{
		nbr_charge = 0;
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_CHARGE)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(newcorfus);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= BOOST_RADIUS)
						{
//							++nbr_charge;
							++nbr_charge;
						}
					}
				}
				if((get UNIT_BUILD_PERCENT_LEFT(unit_ID)) == 0)
				{
					height = get UNIT_HEIGHT(unit_ID);
					if((height == CORUWFUS))
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(newcorfus);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= mySize + coruwfusSize)
						{
							++nbr_charge;
							++nbr_charge;
						}
					}
					if((height == TALUWFUS))
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(newcorfus);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= mySize + taluwfusSize)
						{
							++nbr_charge;
							++nbr_charge;
						}
					}
					if((height == ARMUWFUS))
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(newcorfus);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= mySize + armuwfusSize)
						{
							++nbr_charge;
							++nbr_charge;
						}
					}
				}
			}
			if((!get UNIT_ALLIED(unit_ID)) == 1)	
			{	
				if(get UNIT_HEIGHT(unit_id)==METAL_UPGRADE_HEIGHT)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==100)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(newcorfus);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						{
							--nbr_charge;
							--nbr_charge;
							--nbr_charge;
							--nbr_charge;
						}
					}
				}
			}
		}
		if (nbr_charge < 4)
		{
			show sphere;
			hide shining;
			set ACTIVATION to 0;
		}
		if (nbr_charge >= 4)
		{
		
			spin shining around y-axis speed <15>;
			dont-cache shining;
			show shining;
			hide sphere;
			set ACTIVATION to 1;
		}
		sleep rand(4000,6000);
	}
}

Create()
{
	set ARMORED to 1;
	nbr_charge = 0;
	hide shining;
	dont-cache sphere;
	dont-shade sphere;
	dont-shade newcorfus;
//	dont-cache newcorfus;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
}

/*
Activate()
{
	while( TRUE )
	{
		emit-sfx 256 | 3 from emit1;
		sleep 250;
	}
}
*/

SweetSpot(piecenum)
{
	piecenum = newcorfus;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode newcorfus type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode newcorfus type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode newcorfus type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode newcorfus type BITMAPONLY | BITMAP1;
	return (0);
}
