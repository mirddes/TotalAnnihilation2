#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"


piece  base, shaded, unshaded, drives, drive1, drive2, drive3, drive4, emit1, emit2, emit3,
       emit4, stands, shell, rotary, dingle1, dingle2, arm1, arm2 ;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, statechg_DesiredState,
            statechg_StateChanging ;
static-var	metal_on, nbr_metal ; 


// Signal definitions
#define SIG_ACTIVATE			2

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif


Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_metal = 0;
		
		shgen_count = 0;
		
		for (shgen_id = min; shgen_id < max; ++shgen_id)
		{
			if((!get UNIT_ALLIED(shgen_ID)) == 1)
			{
				h = get UNIT_HEIGHT(shgen_id);
				if(h == 13600954 || 11848867 )
				{
					shgen_count = 1;
				}
				break;
			}
		}
		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((!get UNIT_ALLIED(unit_ID)) == 1)	
			{	
				if(get UNIT_HEIGHT(unit_id)==METAL_UPGRADE_HEIGHT)
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==100)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						{
							++nbr_metal;
						}
					}
				}
			}
		}	
		if(nbr_metal>=1)
		{
			if(!metal_on)
			{
				metal_on = 1;
				set ACTIVATION to 0;
				sleep 50;
			}
		}
		if(nbr_metal==0)
		{
			if(metal_on)
			{
				metal_on = 0;
				set ACTIVATION to 1;
				sleep 50;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	

activatescr()
{
	if( TRUE )
	{
		move stands to y-axis [0.000000] now;
		move stands to y-axis [4.000000] speed [13.000000];
		sleep 772;
	}
	if( TRUE )
	{
		sleep 198;
	}
	if( TRUE )
	{
		turn shell to x-axis <-180.043956> speed <261.000000>;
		sleep 688;
	}
//	set ARMORED to 0;
	if( TRUE )
	{
		sleep 201;
	}
	if( TRUE )
	{
		move stands to y-axis [0.000000] speed [11.000000];
		sleep 911;
	}
	sleep 34;
}

deactivatescr()
{
	if( TRUE )
	{
		move stands to y-axis [0.000000] now;
		move stands to y-axis [4.000000] speed [13.000000];
		turn shell to x-axis <-180.043956> now;
		sleep 768;
	}
	if( TRUE )
	{
		sleep 199;
	}
	if( TRUE )
	{
		turn shell to x-axis <0.000000> speed <261.000000>;
		sleep 689;
	}
	if( TRUE )
	{
		sleep 201;
	}
	if( TRUE )
	{
		move stands to y-axis [0.000000] speed [11.000000];
//		set ARMORED to 1;
		sleep 911;
	}
	sleep 33;
}


Go()
{
	show dingle1;
	show dingle2;
	show rotary;
	dont-cache dingle1;
	dont-cache dingle2;
	dont-cache rotary;
	dont-cache shell;
	dont-cache stands;
	call-script activatescr();
	spin drives around y-axis speed Static_Var_1 accelerate Static_Var_2;
	spin rotary around y-axis speed Static_Var_1 accelerate Static_Var_2;
	spin dingle1 around y-axis speed Static_Var_1;
	spin dingle2 around y-axis speed Static_Var_1;
	Static_Var_4 = 1;
}

Stop()
{
	stop-spin drives around y-axis decelerate Static_Var_3;
	wait-for-turn drives around y-axis;
	stop-spin rotary around y-axis decelerate Static_Var_3;
	stop-spin dingle1 around y-axis decelerate Static_Var_3;
	stop-spin dingle2 around y-axis decelerate Static_Var_3;
	wait-for-turn rotary around y-axis;
	wait-for-turn dingle1 around y-axis;
	wait-for-turn dingle2 around y-axis;
	turn dingle1 to y-axis <0.000000> speed <120.000000>;
	turn dingle2 to y-axis <0.000000> speed <120.000000>;
	call-script deactivatescr();
	cache dingle1;
	cache dingle2;
	cache rotary;
	cache shell;
	cache stands;
	hide dingle1;
	hide dingle2;
	hide rotary;
	Static_Var_4 = 0;
	
	
	
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	set ARMORED to 1;
	nbr_metal = 0;
	metal_on = 0;
	
	Static_Var_1 = 0;
	Static_Var_2 = 91;
	Static_Var_3 = 910;
	Static_Var_4 = 0;
	set ARMORED to 0;
	hide dingle1;
	hide dingle2;
	hide rotary;
	dont-shade dingle1;
	dont-shade dingle2;
	dont-shade rotary;
	dont-shade shell;
	dont-shade stands;
	
	dont-cache drive1;
	dont-cache drive2;
	dont-cache drive3;
	dont-cache drive4;
	
	dont-shade unshaded;
	
	call-script InitState();
	
	sleep 1;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1;
	}
//	start-script detect();
}


Activate()
{
	start-script RequestState(0);
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	while( TRUE )
	{
		if( Static_Var_4 )
		{
			emit-sfx 259 from emit1;
			emit-sfx 259 from emit2;
			emit-sfx 259 from emit3;
			emit-sfx 259 from emit4;
		}
		sleep 250;
	}
}

Deactivate()
{
	start-script RequestState(1);
	signal SIG_ACTIVATE;
}



SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 27;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode drive1 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode dingle1 type BITMAPONLY | BITMAP1;
		explode stands type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode drive1 type SHATTER | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode dingle1 type BITMAPONLY | BITMAP1;
		explode stands type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode drive1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode dingle1 type BITMAPONLY | BITMAP1;
		explode stands type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode drive1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode dingle1 type BITMAPONLY | BITMAP1;
	explode stands type BITMAPONLY | BITMAP1;
}
