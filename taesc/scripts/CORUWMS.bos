#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif


//#define height [2]

//#include "TaeUnitsHeight.h"

piece  base, arm1, arm2;

//static-var canfire;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}
/*
detect()
{
	sleep rand(3000,9000);
	var sh_id, numbcared;
	var max, min;
	max = get MAX_ID;
	min = get MIN_ID;
	
	var myid;
	myid = get MY_ID;
	
	var myteam;
	myteam = get UNIT_TEAM(myid);

	var minteam;
	minteam = myteam * (max/10) + 1;	
	
	var sh_count;
	var mx_count;
	var mx_id;
	var h;
	
	var gen_id;
	var gen_count;

	while(1)
	{
		sh_count = 0;
		mx_count = 0;
		gen_count = 0;
		canfire = 0;
		for (gen_id = min; gen_id < max; ++gen_id)
		{
			h = get UNIT_HEIGHT(gen_id);
			if(h == 10649600)
			{
				gen_count = 1;
				break;
			}
		}
		if(gen_count)
		{
			for (mx_id = minteam; mx_id < myid; ++mx_id)
			{
				h = get UNIT_HEIGHT(mx_id);
				if((h==ARMFMKR) || (h==ARMMAKR) || (h==ARMMAS) || (h==ARMMEX) || (h==ARMMMKR) || (h==ARMMOHO)  || (h==ARMUWMEX) || (h==ARMUWMMM) || (h==ARMUWMOHO)
				|| (h==CORFMKR) || (h==CORMAKR) || (h==CORMAS) || (h==CORMEX) || (h==CORMMKR) || (h==CORMOHO)  || (h==CORUWMEX) || (h==CORUWMMM) || (h==CORUWMOHO)
				|| (h==ARMFORGE) || (h==ARMGEN) || (h==ARMMSTOR) || (h==ARMUWMS) || (h==ARMSMS)
				|| (h==CORFORGE) || (h==CORGEN) || (h==CORMSTOR) || (h==CORUWMS) || (h==CORSMS))
				{
					if(!get UNIT_BUILD_PERCENT_LEFT(mx_id))
						++mx_count;
				}
			}
			
			++mx_count;
			
			for (sh_id = min; sh_id <= max; ++sh_id)
			{
				if(get UNIT_ALLIED(sh_id) == 0)
				{
					if(get UNIT_HEIGHT(sh_id) == height)
					{
						++sh_count;
						if(sh_count == mx_count)
						{
							canfire=1;
							turn arm1 to y-axis get XZ_ATAN(get PIECE_XZ(arm1) - get UNIT_XZ(sh_id)) now;
							move arm2 to z-axis get XZ_HYPOT(get UNIT_XZ(sh_id) - get PIECE_XZ(arm1)) now;
							move arm1 to y-axis get UNIT_Y(sh_id) - get PIECE_Y(base) now;
							sleep 1;
							break;
						}
					}
				}
			}
			sleep rand(4000,8000);
		}
		if(!gen_count)
		{
			sleep rand(15000,45000);
		}
	}
}
*/

Create()
{
//	canfire = 0;
	
	set ARMORED to 1;
	
	sleep 1;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1;
	}
//	start-script detect();
	start-script SmokeUnit();
}
/*
FirePrimary()
{
}

QueryPrimary(p)
{
	p = arm2;
}

AimFromPrimary(p)
{
	p = base;
}

AimPrimary(h, p)
{
	signal 2;
	set-signal-mask 2;
	while(canfire == 0)
	{
		sleep 1;
	}
	return 1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
}
