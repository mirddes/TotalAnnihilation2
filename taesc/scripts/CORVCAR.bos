#define TA

#include "sfxtype.h"
#include "exptype.h"


piece 	mflare1a, mflare1b, mflare1c, mflare2a, mflare2b, mflare2c, mflare2d, mflare2e, mflare2f, 
		base, main, rear, obs, mtur1, mslv1, mtur2, mslv2,   
		radar, land1, land2, land3, land4, land5, land6,		
		beam1, beam2, cans1, cans2, s1, s2, s3, s4; 
		

static-var Static_Var_2, bMoving, gun_1, gun_2, spray;


#define SIG_AIM 		2
#define SIG_AIM2 		4
#define SIG_AIM3 		8
#define SIG_MOVE 		32

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	
	bMoving=1;
	while(bMoving)
	{
		emit-sfx 256 | 2 from s1;
		emit-sfx 256 | 2 from s2;
		emit-sfx 256 | 2 from s3;
		emit-sfx 256 | 2 from s4;
		
		sleep rand(200,300);
	}
}


StopMoving()
{
	signal SIG_MOVE;
	
	bMoving=0;
}


Create()
{
	set ARMORED to 1;
		
//	hide blast;
	hide mflare1a;
	hide mflare1b;
	hide mflare1c;
	hide mflare2a;
	hide mflare2b;
	hide mflare2c;
	hide mflare2d;
	hide mflare2e;
	hide mflare2f;
	
	dont-cache mflare1a;
	dont-cache mflare1b;
	dont-cache mflare1c;
	dont-cache mflare2a;
	dont-cache mflare2b;
	dont-cache mflare2c;
	dont-cache mflare2d;
	dont-cache mflare2e;
	dont-cache mflare2f;
		
	bMoving=0;
	
	set ARMORED to 1;
	Static_Var_2 = 1;
	spray = 0;
	
	gun_1 = 0;
	gun_2 = 3;

	set ACTIVATION to TRUE;
		
	while(get BUILD_PERCENT_LEFT)
	{
		sleep 100;
	}
	
	start-script SmokeUnit();
}

Activate()
{
	set INBUILDSTANCE to 1;
	spin radar around y-axis speed <60.005495>;
}

Deactivate()
{
	set INBUILDSTANCE to 0;
	stop-spin radar around y-axis;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4, Func_Var_5, Func_Var_6)
{
	Func_Var_1 = 18;
	Func_Var_2 = 19;
	Func_Var_3 = 20;
	Func_Var_4 = 21;
	Func_Var_5 = 22;
	Func_Var_6 = 23;
	var Func_Var_7, Func_Var_8;
	++Static_Var_2;
	if( Static_Var_2 >= 7 )
	{
		Static_Var_2 = 1;
	}
	Func_Var_7 = 1;
	while( Func_Var_7 <= Static_Var_2 )
	{
		Func_Var_8 = Func_Var_1;
		Func_Var_1 = Func_Var_2;
		Func_Var_2 = Func_Var_3;
		Func_Var_3 = Func_Var_4;
		Func_Var_4 = Func_Var_5;
		Func_Var_5 = Func_Var_6;
		Func_Var_6 = Func_Var_8;
		++Func_Var_7;
	}
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}



RestoreAfterDelay()
{
	sleep 9000;
	turn mtur1 to y-axis <0.000000> speed <180.000000>;
	turn mslv1 to x-axis <0.000000> speed <180.000000>;
	turn mtur2 to y-axis <0.000000> speed <180.000000>;
	turn mslv2 to x-axis <0.000000> speed <180.000000>;
	
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn mtur1 to y-axis heading speed <360>;
	turn mslv1 to x-axis <0.000000> - pitch speed <360>;
	wait-for-turn mtur1 around y-axis;
	wait-for-turn mslv1 around x-axis;
	
	Start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = 0;
	}
}


AimFromPrimary(piecenum)
{
	piecenum = mtur1;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = mflare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = mflare1b;
	}
	if( gun_1 == 2 )
	{
		piecenum = mflare1c;
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	
	turn mtur2 to y-axis heading speed <360>;
	turn mslv2 to x-axis <0.000000> - pitch speed <360>;
	wait-for-turn mtur2 around y-axis;
	wait-for-turn mslv2 around x-axis;
	
	Start-script RestoreAfterDelay();
	return (1);
}


FireSecondary()
{
	++gun_2;
	if( gun_2 == 9 )
	{
		gun_2 = 3;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = mtur2;
}


QuerySecondary(piecenum)
{
	if (gun_2 == 3)
	{
		piecenum = mflare2a;
	}
	if (gun_2 == 4)
	{
		piecenum = mflare2b;
	}
	if (gun_2 == 5)
	{
		piecenum = mflare2c;
	}
	if (gun_2 == 6)
	{
		piecenum = mflare2d;
	}
	if (gun_2 == 7)
	{
		piecenum = mflare2e;
	}
	if (gun_2 == 8)
	{
		piecenum = mflare2f;
	}
}


/*
AimTertiary(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	return(1);
}	
	
FireTertiary()
{	
	sleep 100;
}
		

AimFromTertiary(piecenum)
{
	piecenum = base;
}


QueryTertiary(piecenum)
{
	piecenum = blast;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}


Killed(severity, corpsetype)
{
	hide mflare1a;
	hide mflare1b;
	hide mflare1c;
	hide mflare2a;
	hide mflare2b;
	hide mflare2c;
	hide mflare2d;
	hide mflare2e;
	hide mflare2f;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode mtur1 type BITMAPONLY | BITMAP1;
		explode mtur2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode mflare1a type BITMAPONLY | BITMAP1;
		explode mflare2b type BITMAPONLY | BITMAP5;
		explode mslv1 type BITMAPONLY | BITMAP1;
		explode radar type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode mtur1 type FALL | BITMAP1;
		explode mtur2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode mflare1a type FALL | BITMAP1;
		explode mflare2b type FALL | BITMAP5;
		explode mslv1 type SHATTER | BITMAP1;
		explode radar type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode mtur1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode mtur2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode mflare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode mflare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode mslv1 type SHATTER | BITMAP1;
		explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode mtur1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode mtur2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode mflare1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode mflare2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode mslv1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}




