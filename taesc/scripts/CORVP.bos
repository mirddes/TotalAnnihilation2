#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#include "ESCUnitsHeight.h"

piece  beam1, beam2, pad, base, layer3a, layer3b, layer3c, layer2a,
       layer2b, layer2c, layer1a, layer1b, layer1c, gun2, gun1, arm1,
       arm2;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_ACTIVATE			2

#define SECURE_XZ\
if(xz<0)\
{\
xz=0 - xz;\
}\
x=xz/65536;\
z=xz - x*65536;\
if(z>32767)\
{\
z=65536 - z;\
/*x=x+(1-2*(xz<0));*/\
x=x+(xz>0);\
}\
if(707333111<get XZ_HYPOT((x/2)*65536 + (z/2)))\
{\
xz=500333222;\
}

// Lowest valid unit ID number
#ifndef MIN_ID
#define MIN_ID 69
#endif

// Highest valid unit ID number
#ifndef MAX_ID
#define MAX_ID 70
#endif

// ID of current unit
#ifndef MY_ID
#define MY_ID 71
#endif

// Player number of the unit given in parameter
#ifndef UNIT_TEAM
#define UNIT_TEAM 72
#endif

// Like BUILD_PERCENT_LEFT, but comes with a unit parameter
#ifndef UNIT_BUILD_PERCENT_LEFT
#define UNIT_BUILD_PERCENT_LEFT 73
#endif

// Is unit allied to the current COB script
#ifndef UNIT_ALLIED
#define UNIT_ALLIED 74
#endif

// Is unit owned by the local computer
#ifndef UNIT_IS_ON_THIS_COMP
#define UNIT_IS_ON_THIS_COMP 75
#endif

// Kills * 100
#ifndef VETERAN_LEVEL
#define VETERAN_LEVEL 32
#endif


Detect()
{
	sleep rand(500,1500);
	var distance, unit_ID, xz, x, z;
	var max, min, height;
	var h;
	var shgen_id;
	var shgen_count;
	
	max = (get MAX_ID);
	min = (get MIN_ID);
	
	while(1)
	{
		nbr_shield = 0;
		nbr_dome = 0;
		
		shgen_count = 0;

		for (unit_ID = min; unit_ID <= max; ++unit_ID)
		{
			if((get UNIT_ALLIED(unit_ID)) == 1)
			{
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_1)		//ARM T3 non-upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							++nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-in progress
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)>=1)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_1)
						{
							shgen_count = 1;
							--nbr_shield;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_2)		//ARM T3 upgraded-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_2)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
				if(get UNIT_HEIGHT(unit_id)==ALL_SHIELD_3)		//CORE T3 standard-built
				{
					if(get UNIT_BUILD_PERCENT_LEFT(unit_id)==0)
					{
						xz = get UNIT_XZ(unit_ID) - get PIECE_XZ(base);
						SECURE_XZ;
						distance=get XZ_HYPOT(xz);
						if (distance <= SHIELD_RADIUS_3)
						{
							shgen_count = 1;
							++nbr_dome;
						}
					}
				}
			}
		}
		if(nbr_shield>=1)
		{
			if(!shield_on)
			{
				shield_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_shield==0)
		{
			if(shield_on)
			{
				shield_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		if(nbr_dome>=1)
		{
			if(!dome_on)
			{
				dome_on = 1;
				sleep 50;
				set ARMORED to 1;
			}
		}
		if(nbr_dome==0)
		{
			if(dome_on)
			{
				dome_on = 0;
				sleep 50;
				set ARMORED to 0;
			}
		}	
		sleep rand(4000,6000);
		if(!shgen_count)
		{
			sleep rand(60000,90000);
		}
	}
}	




activatescr()
{
	if( TRUE )
	{
		turn layer3a to y-axis <0.000000> now;
		turn layer3a to y-axis <-89.445055> speed <240.450549>;
		turn layer3b to y-axis <0.000000> now;
		turn layer3b to y-axis <-89.906593> speed <241.681319>;
		turn layer3c to y-axis <0.000000> now;
		turn layer3c to y-axis <-89.906593> speed <241.681319>;
		sleep 372;
	}
	if( TRUE )
	{
		turn layer2a to y-axis <90.362637> speed <228.769231>;
		turn layer2b to y-axis <90.362637> speed <228.769231>;
		turn layer2c to y-axis <90.362637> speed <228.769231>;
		sleep 395;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <-89.906593> speed <228.186813>;
		turn layer1b to y-axis <-89.906593> speed <228.186813>;
		turn layer1c to y-axis <-89.906593> speed <228.186813>;
		sleep 394;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <-179.813187> speed <221.445055>;
		turn layer1b to y-axis <-179.351648> speed <220.313187>;
		turn layer1c to y-axis <-179.813187> speed <221.445055>;
		sleep 406;
	}
	if( TRUE )
	{
		move layer1b to z-axis [-11.400000] speed [27.078394];
		move layer2b to z-axis [-11.450000] speed [27.197150];
		move layer3b to z-axis [-11.500000] speed [27.315918];
		sleep 421;
	}
	if( TRUE )
	{
		move layer1a to x-axis [5.350000] speed [16.563470];
		move layer1c to x-axis [-5.499994] speed [17.027856];
		move layer2a to x-axis [5.350000] speed [16.563464];
		move layer2c to x-axis [-5.500000] speed [17.027863];
		move layer3a to x-axis [5.300000] speed [16.408667];
		move layer3c to x-axis [-5.550000] speed [17.182666];
		move pad to z-axis [2.300000] speed [7.120746];
		sleep 323;
	}
	if( TRUE )
	{
		move gun2 to x-axis [-0.749994] speed [1.552789];
		move gun1 to x-axis [-0.850000] speed [1.759833];
		turn arm1 to y-axis <-90.362637> speed <187.087912>;
		turn arm2 to y-axis <88.989011> speed <184.241758>;
		turn gun2 to x-axis <-11.005495> speed <22.791209>;
		turn gun2 to y-axis <66.967033> speed <138.653846>;
		turn gun2 to z-axis <2.291209> speed <4.747253>;
		turn gun1 to x-axis <10.087912> speed <20.890110>;
		turn gun1 to y-axis <-66.967033> speed <138.653846>;
		turn gun1 to z-axis <2.291209> speed <4.747253>;
		sleep 483;
	}
	sleep 21;
}

deactivatescr()
{
	if( TRUE )
	{
		move layer1a to x-axis [5.350000] now;
		move layer1b to z-axis [-11.400000] now;
		move layer1c to x-axis [-5.499994] now;
		move layer2a to x-axis [5.350000] now;
		move layer2b to z-axis [-11.450000] now;
		move layer2c to x-axis [-5.500000] now;
		move layer3a to x-axis [5.300000] now;
		move layer3b to z-axis [-11.500000] now;
		move layer3c to x-axis [-5.550000] now;
		move pad to z-axis [2.300000] now;
		move gun2 to x-axis [-0.749994] now;
		move gun2 to x-axis [0.000000] speed [1.798553];
		move gun1 to x-axis [-0.850000] now;
		move gun1 to x-axis [0.000000] speed [2.038373];
		turn layer1a to y-axis <-179.813187> now;
		turn layer1b to y-axis <-179.351648> now;
		turn layer1c to y-axis <-179.813187> now;
		turn layer2a to y-axis <90.362637> now;
		turn layer2b to y-axis <90.362637> now;
		turn layer2c to y-axis <90.362637> now;
		turn layer3a to y-axis <-89.445055> now;
		turn layer3b to y-axis <-89.906593> now;
		turn layer3c to y-axis <-89.906593> now;
		turn arm1 to y-axis <-90.362637> now;
		turn arm1 to y-axis <0.000000> speed <216.703297>;
		turn arm2 to y-axis <88.989011> now;
		turn arm2 to y-axis <0.000000> speed <213.401099>;
		turn gun2 to x-axis <-11.005495> now;
		turn gun2 to x-axis <0.000000> speed <26.395604>;
		turn gun2 to y-axis <66.967033> now;
		turn gun2 to y-axis <0.000000> speed <160.598901>;
		turn gun2 to z-axis <2.291209> now;
		turn gun2 to z-axis <0.000000> speed <5.500000>;
		turn gun1 to x-axis <10.087912> now;
		turn gun1 to x-axis <0.000000> speed <24.197802>;
		turn gun1 to y-axis <-66.967033> now;
		turn gun1 to y-axis <0.000000> speed <160.598901>;
		turn gun1 to z-axis <2.291209> now;
		turn gun1 to z-axis <0.000000> speed <5.500000>;
		sleep 417;
	}
	if( TRUE )
	{
		move layer1a to x-axis [0.000000] speed [16.666669];
		move layer1c to x-axis [0.000000] speed [17.133948];
		move layer2a to x-axis [0.000000] speed [16.666669];
		move layer2c to x-axis [0.000000] speed [17.133954];
		move layer3a to x-axis [0.000000] speed [16.510907];
		move layer3c to x-axis [0.000000] speed [17.289728];
		move pad to z-axis [0.000000] speed [7.165112];
		sleep 321;
	}
	if( TRUE )
	{
		move layer1b to z-axis [0.000000] speed [27.403851];
		move layer2b to z-axis [0.000000] speed [27.524036];
		move layer3b to z-axis [0.000000] speed [27.644232];
		sleep 416;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <-89.906593> speed <216.642857>;
		turn layer1b to y-axis <-89.906593> speed <215.538462>;
		turn layer1c to y-axis <-89.906593> speed <216.642857>;
		sleep 415;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <0.000000> speed <222.538462>;
		turn layer1b to y-axis <0.000000> speed <222.538462>;
		turn layer1c to y-axis <0.000000> speed <222.538462>;
		sleep 404;
	}
	if( TRUE )
	{
		turn layer2a to y-axis <0.000000> speed <212.126374>;
		turn layer2b to y-axis <0.000000> speed <212.126374>;
		turn layer2c to y-axis <0.000000> speed <212.126374>;
		sleep 426;
	}
	if( TRUE )
	{
		turn layer3a to y-axis <0.000000> speed <225.307692>;
		turn layer3b to y-axis <0.000000> speed <226.461538>;
		turn layer3c to y-axis <0.000000> speed <226.461538>;
		sleep 397;
	}
	sleep 12;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache arm1;
	dont-cache arm2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache layer1a;
	dont-cache layer1b;
	dont-cache layer1c;
	dont-cache layer2a;
	dont-cache layer2b;
	dont-cache layer2c;
	dont-cache layer3a;
	dont-cache layer3b;
	dont-cache layer3c;
	dont-cache pad;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache arm1;
	cache arm2;
	cache gun1;
	cache gun2;
	cache layer1a;
	cache layer1b;
	cache layer1c;
	cache layer2a;
	cache layer2b;
	cache layer2c;
	cache layer3a;
	cache layer3b;
	cache layer3c;
	cache pad;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	nbr_shield = 0;
	nbr_dome = 0;

	shield_on = 0;
	dome_on = 0;
	
	dont-shade arm1;
	dont-shade arm2;
	dont-shade pad;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade layer1a;
	dont-shade layer1b;
	dont-shade layer1c;
	dont-shade layer2a;
	dont-shade layer2b;
	dont-shade layer2c;
	dont-shade layer3a;
	dont-shade layer3b;
	dont-shade layer3c;
	dont-shade pad;
	unitviewer = FALSE;
	spray = beam1;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script detect();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP1;
		explode beam2 type BITMAPONLY | BITMAP5;
		explode gun1 type BITMAPONLY | BITMAP1;
		explode gun2 type BITMAPONLY | BITMAP1;
		explode layer1a type BITMAPONLY | BITMAP1;
		explode layer1b type BITMAPONLY | BITMAP1;
		explode layer1c type BITMAPONLY | BITMAP5;
		explode layer2a type BITMAPONLY | BITMAP1;
		explode layer2b type BITMAPONLY | BITMAP1;
		explode layer2c type BITMAPONLY | BITMAP1;
		explode layer3a type BITMAPONLY | BITMAP1;
		explode layer3b type BITMAPONLY | BITMAP5;
		explode layer3c type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type FALL | BITMAP1;
		explode arm2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP1;
		explode beam2 type FALL | BITMAP5;
		explode gun1 type FALL | BITMAP1;
		explode gun2 type FALL | BITMAP1;
		explode layer1a type BITMAPONLY | BITMAP1;
		explode layer1b type BITMAPONLY | BITMAP1;
		explode layer1c type BITMAPONLY | BITMAP5;
		explode layer2a type BITMAPONLY | BITMAP1;
		explode layer2b type BITMAPONLY | BITMAP1;
		explode layer2c type SHATTER | BITMAP1;
		explode layer3a type FALL | BITMAP1;
		explode layer3b type FALL | BITMAP5;
		explode layer3c type FALL | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode layer1a type BITMAPONLY | BITMAP1;
		explode layer1b type BITMAPONLY | BITMAP1;
		explode layer1c type BITMAPONLY | BITMAP5;
		explode layer2a type BITMAPONLY | BITMAP1;
		explode layer2b type BITMAPONLY | BITMAP1;
		explode layer2c type SHATTER | BITMAP1;
		explode layer3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode layer3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode layer3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode pad type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode layer1a type BITMAPONLY | BITMAP1;
	explode layer1b type BITMAPONLY | BITMAP1;
	explode layer1c type BITMAPONLY | BITMAP5;
	explode layer2a type BITMAPONLY | BITMAP1;
	explode layer2b type BITMAPONLY | BITMAP1;
	explode layer2c type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode layer3a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode layer3b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode layer3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode pad type BITMAPONLY | BITMAP1;
}
