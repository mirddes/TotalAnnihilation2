#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, dummy, cradle, arm1, arm2;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	set ARMORED to 1;
	if( TRUE )
	{
		turn cradle to x-axis <0.000000> now;
		turn cradle to x-axis <-90.021978> speed <45.000000>;
		sleep 1983;
	}
	sleep 18;
}

deactivatescr()
{
	set ARMORED to 0;
	if( TRUE )
	{
		turn cradle to x-axis <-90.021978> now;
		turn cradle to x-axis <0.000000> speed <45.000000>;
		sleep 1996;
	}
	sleep 8;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}
*/

Go()
{
	show dummy;
	call-script activatescr();
	gun_1 = dummy;
}

Stop()
{
	gun_1 = base;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade dummy;
	dont-cache dummy;
	gun_1 = base;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	set ARMORED to 0;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide dummy;
	gun_1 = base;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = dummy;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	var Func_Var_3, Func_Var_4;
	if( severity <= 25 )
	{
		corpsetype = 2 - ( 0 == Rand( 0, 1 ) );
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode cradle type BITMAPONLY | BITMAP1;
		explode dummy type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type FALL | BITMAP1;
		explode arm2 type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode cradle type BITMAPONLY | BITMAP1;
		explode dummy type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP1;
		explode cradle type BITMAPONLY | BITMAP1;
		explode dummy type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP1;
	explode cradle type BITMAPONLY | BITMAP1;
	explode dummy type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
